{"version":3,"sources":["_version.ts","_Library.ts","fayde.controls.js","Primitives/MenuBase.ts","ContextMenu.ts","ContextMenuService.ts","DatePicker.ts","Enums.ts","Spinner.ts","UpDownBase.ts","DomainUpDown.ts","GridSplitter.ts","HeaderedItemsControl.ts","MenuItem.ts","NumericUpDown.ts","Separator.ts","SpinEventArgs.ts","TabControl.ts","TabItem.ts","TimePicker.ts","TreeView.ts","TreeViewItem.ts","UpDownParseErrorEventArgs.ts","UpDownParsingEventArgs.ts","ContextMenu/RootVisualTracker.ts","Internal/BindingSourceEvaluator.ts","Internal/DomainCoercer.ts","Internal/EventGesture.ts","Internal/FormattedRangeCoercer.ts","Internal/GridSplitterResizer.ts","Internal/ItemsControlHelper.ts","Internal/MultiClickHelper.ts","Internal/ObservableObjectCollection.ts","Internal/ScrollEx.ts","Internal/SelectionHandler.ts","Internal/SpinFlow.ts","Internal/TextBoxFormatter.ts","TabPanel/TabPanel.ts","TabPanel/TabPanelUpdater.ts","TabPanel/helpers.ts","Validation/FocusingInvalidControlEventArgs.ts","Validation/ValidationSummary.ts","Validation/ValidationSummaryItem.ts","Validation/ValidationSummaryItemSource.ts","Validation/compare.ts","ViewBox/ViewBox.ts","ViewBox/ViewBoxUpdater.ts","ViewBox/helpers.ts","WrapPanel/WrapPanel.ts","WrapPanel/WrapPanelUpdater.ts","WrapPanel/helpers.ts","TabPanel/arrange/TabPanelArrangePipeDef.ts","TabPanel/measure/TabPanelMeasurePipeDef.ts","ViewBox/processdown/ViewBoxProcessDownPipeDef.ts","WrapPanel/arrange/WrapPanelArrangePipeDef.ts","WrapPanel/measure/WrapPanelMeasurePipeDef.ts","TabPanel/arrange/tapins/doHorizontal.ts","TabPanel/arrange/tapins/doVertical.ts","TabPanel/measure/tapins/doHorizontal.ts","TabPanel/measure/tapins/doVertical.ts","WrapPanel/arrange/tapins/doHorizontal.ts","WrapPanel/arrange/tapins/doVertical.ts","WrapPanel/measure/tapins/doHorizontal.ts","WrapPanel/measure/tapins/doVertical.ts"],"names":["Fayde","Fayde.Controls","__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","Fayde.Controls.Primitives","Fayde.Controls.Primitives.MenuBase","Fayde.Controls.Primitives.MenuBase.constructor","Fayde.Controls.Primitives.MenuBase.IsItemItsOwnContainer","Fayde.Controls.Primitives.MenuBase.GetContainerForItem","Fayde.Controls.Primitives.MenuBase.PrepareContainerForItem","Fayde.Controls.Primitives.MenuBase.HasDefaultValue","Fayde.Controls.ContextMenu","Fayde.Controls.ContextMenu.constructor","Fayde.Controls.ContextMenu.OnHorizontalOffsetChanged","Fayde.Controls.ContextMenu.OnVerticalOffsetChanged","Fayde.Controls.ContextMenu.OnIsOpenChanged","Fayde.Controls.ContextMenu.OnKeyDown","Fayde.Controls.ContextMenu.OnMouseLeftButtonDown","Fayde.Controls.ContextMenu.OnMouseRightButtonDown","get","Fayde.Controls.ContextMenu.Owner","set","enumerable","configurable","Fayde.Controls.ContextMenu._HandleOwnerMouseRightButtonDown","Fayde.Controls.ContextMenu._HandleOverlayMouseButtonDown","Fayde.Controls.ContextMenu._HandleContextMenuSizeChanged","Fayde.Controls.ContextMenu.ChildMenuItemClicked","Fayde.Controls.ContextMenu.UpdateContextMenuPlacement","Fayde.Controls.ContextMenu.OpenPopup","Fayde.Controls.ContextMenu.OnOpened","Fayde.Controls.ContextMenu.ClosePopup","Fayde.Controls.ContextMenu.OnClosed","Fayde.Controls.ContextMenu.FocusNextItem","Fayde.Controls.ContextMenuService","Fayde.Controls.ContextMenuService.GetContextMenu","Fayde.Controls.ContextMenuService.SetContextMenu","Fayde.Controls.ContextMenuService.OnContextMenuPropertyChanged","Fayde.Controls.formatNumber","Fayde.Controls.DatePicker","Fayde.Controls.DatePicker.constructor","Fayde.Controls.DatePicker.OnSelectedMonthChanged","Fayde.Controls.DatePicker.OnSelectedDayChanged","Fayde.Controls.DatePicker.OnSelectedYearChanged","Fayde.Controls.DatePicker.OnSelectedDateChanged","Fayde.Controls.DatePicker.OnApplyTemplate","Fayde.Controls.DatePicker.CoerceMonth","Fayde.Controls.DatePicker.CoerceDay","Fayde.Controls.DatePicker.CoerceYear","Fayde.Controls.DatePicker.CoerceDate","Fayde.Controls.DatePicker._UpdateText","Fayde.Controls.ValidSpinDirections","Fayde.Controls.SpinDirection","Fayde.Controls.InvalidInputAction","Fayde.Controls.Dock","Fayde.Controls.DatePickerFormat","Fayde.Controls.TimeDisplayMode","Fayde.Controls.ValidationSummaryFilters","Fayde.Controls.ValidationSummaryItemType","Fayde.Controls.StretchDirection","Fayde.Controls.Spinner","Fayde.Controls.Spinner.constructor","Fayde.Controls.Spinner.OnValidSpinDirectionChanged","Fayde.Controls.Spinner.OnSpin","Fayde.Controls.Spinner.OnApplyTemplate","Fayde.Controls.Spinner.OnIncreaseClick","Fayde.Controls.Spinner.OnDecreaseClick","Fayde.Controls.Spinner.EnableButtons","Fayde.Controls.Spinner.GoToStates","Fayde.Controls.Spinner.GoToStateCommon","Fayde.Controls.Spinner.GoToStateIncrease","Fayde.Controls.Spinner.GoToStateDecrease","Fayde.Controls.Spinner.OnMouseEnter","Fayde.Controls.Spinner.OnMouseLeave","Fayde.Controls.Spinner.OnMouseLeftButtonDown","Fayde.Controls.Spinner.OnMouseLeftButtonUp","Fayde.Controls.Spinner.OnGotFocus","Fayde.Controls.Spinner.OnLostFocus","Fayde.Controls.UpDownBase","Fayde.Controls.UpDownBase.constructor","Fayde.Controls.UpDownBase._OnValueChanged","Fayde.Controls.UpDownBase.OnValueChanging","Fayde.Controls.UpDownBase.OnValueChanged","Fayde.Controls.UpDownBase.OnIsEditableChanged","Fayde.Controls.UpDownBase.OnApplyTemplate","Fayde.Controls.UpDownBase.SetTextBox","Fayde.Controls.UpDownBase.SetSpinner","Fayde.Controls.UpDownBase.OnKeyDown","Fayde.Controls.UpDownBase.OnMouseWheel","Fayde.Controls.UpDownBase.ApplyValue","Fayde.Controls.UpDownBase.OnParseError","Fayde.Controls.UpDownBase.OnParsing","Fayde.Controls.UpDownBase.FormatValue","Fayde.Controls.UpDownBase.SelectAllText","Fayde.Controls.UpDownBase.SetTextBoxText","Fayde.Controls.UpDownBase.TextBox_LostFocus","Fayde.Controls.UpDownBase.TextBox_GotFocus","Fayde.Controls.UpDownBase.Spinner_Spin","Fayde.Controls.UpDownBase.OnSpin","Fayde.Controls.UpDownBase.ProcessUserInput","Fayde.Controls.UpDownBase.DoDecrement","Fayde.Controls.UpDownBase.DoIncrement","Fayde.Controls.inputActionValidator","Fayde.Controls.matchItem","Fayde.Controls.DomainUpDown","Fayde.Controls.DomainUpDown.constructor","Fayde.Controls.DomainUpDown.OnCurrentIndexChanged","Fayde.Controls.DomainUpDown._OnIsCyclicChanged","Fayde.Controls.DomainUpDown._OnItemsSourceChanged","Fayde.Controls.DomainUpDown._ItemsSourceModified","Fayde.Controls.DomainUpDown._OnItemsChanged","Fayde.Controls.DomainUpDown.ValueMemberPath","Fayde.Controls.DomainUpDown.ValueMemberBinding","Fayde.Controls.DomainUpDown.OnApplyTemplate","Fayde.Controls.DomainUpDown.OnGotFocus","Fayde.Controls.DomainUpDown.OnLostFocus","Fayde.Controls.DomainUpDown.OnMouseEnter","Fayde.Controls.DomainUpDown.OnMouseLeave","Fayde.Controls.DomainUpDown.OnMouseLeftButtonDown","Fayde.Controls.DomainUpDown.OnMouseLeftButtonUp","Fayde.Controls.DomainUpDown.GoToStates","Fayde.Controls.DomainUpDown.GoToStateEditing","Fayde.Controls.DomainUpDown.GoToStateValid","Fayde.Controls.DomainUpDown.UpdateValidSpinDirection","Fayde.Controls.DomainUpDown.TryEnterEditMode","Fayde.Controls.DomainUpDown.OnIsEditingChanged","Fayde.Controls.DomainUpDown.OnIsInvalidInputChanged","Fayde.Controls.DomainUpDown.OnSpin","Fayde.Controls.DomainUpDown.OnIncrement","Fayde.Controls.DomainUpDown.OnDecrement","Fayde.Controls.DomainUpDown.TryParseValue","Fayde.Controls.DomainUpDown.FormatValue","Fayde.Controls.GridSplitter","Fayde.Controls.GridSplitter.constructor","Fayde.Controls.GridSplitter.OnApplyTemplate","Fayde.Controls.GridSplitter._OnLayoutUpdated","Fayde.Controls.GridSplitter._OnResizeDirectionChanged","Fayde.Controls.GridSplitter.OnGotFocus","Fayde.Controls.GridSplitter.OnLostFocus","Fayde.Controls.GridSplitter.OnKeyDown","Fayde.Controls.GridSplitter.OnMouseLeftButtonDown","Fayde.Controls.GridSplitter.OnMouseLeftButtonUp","Fayde.Controls.GridSplitter.OnMouseMove","Fayde.Controls.GridSplitter.InitHelper","Fayde.Controls.GridSplitter._HandleMove","Fayde.Controls.GridSplitter._GetTransformedPos","Fayde.Controls.hasDefaultValue","Fayde.Controls.HeaderedItemsControl","Fayde.Controls.HeaderedItemsControl.constructor","Fayde.Controls.HeaderedItemsControl.OnItemContainerStyleChanged","Fayde.Controls.HeaderedItemsControl.OnApplyTemplate","Fayde.Controls.HeaderedItemsControl.PrepareContainerForItem","Fayde.Controls.HeaderedItemsControl.PrepareHeaderedItemsControlContainer","Fayde.Controls.MenuItem","Fayde.Controls.MenuItem.constructor","Fayde.Controls.MenuItem.OnCommandChanged","Fayde.Controls.MenuItem._CanExecuteChanged","Fayde.Controls.MenuItem.OnCommandParameterChanged","Fayde.Controls.MenuItem.OnApplyTemplate","Fayde.Controls.MenuItem.UpdateIsEnabled","Fayde.Controls.MenuItem.OnGotFocus","Fayde.Controls.MenuItem.OnLostFocus","Fayde.Controls.MenuItem.OnMouseEnter","Fayde.Controls.MenuItem.OnMouseLeave","Fayde.Controls.MenuItem.OnMouseLeftButtonDown","Fayde.Controls.MenuItem.OnMouseRightButtonDown","Fayde.Controls.MenuItem.OnKeyDown","Fayde.Controls.MenuItem.OnClick","Fayde.Controls.MenuItem.GoToStateCommon","Fayde.Controls.NumericUpDown","Fayde.Controls.NumericUpDown.constructor","Fayde.Controls.NumericUpDown.OnMinimumChanged","Fayde.Controls.NumericUpDown.OnMaximumChanged","Fayde.Controls.NumericUpDown.OnValueChanged","Fayde.Controls.NumericUpDown.OnApplyTemplate","Fayde.Controls.NumericUpDown.UpdateValidSpinDirection","Fayde.Controls.NumericUpDown.ParseValue","Fayde.Controls.NumericUpDown.FormatValue","Fayde.Controls.NumericUpDown.OnSpin","Fayde.Controls.NumericUpDown.OnIncrement","Fayde.Controls.NumericUpDown.OnDecrement","Fayde.Controls.Separator","Fayde.Controls.Separator.constructor","Fayde.Controls.SpinEventArgs","Fayde.Controls.SpinEventArgs.constructor","Fayde.Controls.TabControl","Fayde.Controls.TabControl.constructor","Fayde.Controls.TabControl.OnApplyTemplate","Fayde.Controls.TabControl.OnSelectedItemChanged","Fayde.Controls.TabControl.OnSelectedIndexChanged","Fayde.Controls.TabControl.OnSelectedContentChanged","Fayde.Controls.TabControl.OnTabStripPlacementPropertyChanged","Fayde.Controls.TabControl.OnItemsChanged","Fayde.Controls.TabControl.OnKeyDown","Fayde.Controls.TabControl._FindEndTabItem","Fayde.Controls.TabControl._FindHomeTabItem","Fayde.Controls.TabControl.SelectItem","Fayde.Controls.TabControl.UpdateTabPanelLayout","Fayde.Controls.TabControl.UpdateSelectedContent","Fayde.Controls.TabControl.EnsureLanguageBinding","Fayde.Controls.TabControl.ClearLanguageBinding","Fayde.Controls.TabControl._AddToTabPanel","Fayde.Controls.TabControl._InsertIntoTabPanel","Fayde.Controls.TabControl._RemoveFromTabPanel","Fayde.Controls.TabControl._ClearTabPanel","Fayde.Controls.TabControl._GetTabPanel","Fayde.Controls.TabControl._GetTemplate","Fayde.Controls.TabControl._GetContentHost","Fayde.Controls.TabControl._GetItemAtIndex","Fayde.Controls.TabControl._ThrowInvalidTabItem","Fayde.Controls.TabItem","Fayde.Controls.TabItem.constructor","Fayde.Controls.TabItem.TabStripPlacement","Fayde.Controls.TabItem.TabControlParent","Fayde.Controls.TabItem.OnApplyTemplate","Fayde.Controls.TabItem._OnHeaderChanged","Fayde.Controls.TabItem.OnHeaderChanged","Fayde.Controls.TabItem.OnHeaderTemplateChanged","Fayde.Controls.TabItem._OnIsSelectedChanged","Fayde.Controls.TabItem.OnSelected","Fayde.Controls.TabItem.OnUnselected","Fayde.Controls.TabItem.UpdateVisualState","Fayde.Controls.TabItem._UpdateHeaderVisuals","Fayde.Controls.TabItem.OnMouseLeave","Fayde.Controls.TabItem.OnMouseEnter","Fayde.Controls.TabItem.OnMouseLeftButtonDown","Fayde.Controls.TabItem.OnGotFocus","Fayde.Controls.TabItem.OnLostFocus","Fayde.Controls.TabItem.OnContentChanged","Fayde.Controls.TabItem.OnKeyDown","Fayde.Controls.TabItem.GetTemplate","Fayde.Controls.TabItem._GetContentControl","Fayde.Controls.TabItem._FindPreviousTabItem","Fayde.Controls.TabItem._FindNextTabItem","Fayde.Controls.Elements","Fayde.Controls.Elements.constructor","Fayde.Controls.Elements.OnApplyTemplate","Fayde.Controls.Element","Fayde.Controls.Element.constructor","Fayde.Controls.Element.OnApplyTemplate","Fayde.Controls.TimePicker","Fayde.Controls.TimePicker.constructor","Fayde.Controls.TimePicker.OnSelectedHourChanged","Fayde.Controls.TimePicker.OnSelectedMinuteChanged","Fayde.Controls.TimePicker.OnSelectedSecondChanged","Fayde.Controls.TimePicker.OnSelectedTimeChanged","Fayde.Controls.TimePicker.OnDisplayModeChanged","Fayde.Controls.TimePicker.OnApplyTemplate","Fayde.Controls.TimePicker._GetHourInput","Fayde.Controls.TimePicker.CoerceHour","Fayde.Controls.TimePicker.CoerceMinute","Fayde.Controls.TimePicker.CoerceSecond","Fayde.Controls.TimePicker.CoerceTime","Fayde.Controls.TimePicker.ToggleAmPm","Fayde.Controls.TimePicker._UpdateText","Fayde.Controls.TreeView","Fayde.Controls.TreeView.constructor","Fayde.Controls.TreeView.OnSelectedItemChanged","Fayde.Controls.TreeView.OnSelectedValueChanged","Fayde.Controls.TreeView.OnSelectedValuePathChanged","Fayde.Controls.TreeView.OnItemContainerStyleChanged","Fayde.Controls.TreeView.OnApplyTemplate","Fayde.Controls.TreeView.GetContainerForItem","Fayde.Controls.TreeView.IsItemItsOwnContainer","Fayde.Controls.TreeView.PrepareContainerForItem","Fayde.Controls.TreeView.ClearContainerForItem","Fayde.Controls.TreeView.OnItemsChanged","Fayde.Controls.TreeView.CheckForSelectedDescendents","Fayde.Controls.TreeView.PropagateKeyDown","Fayde.Controls.TreeView.OnKeyDown","Fayde.Controls.TreeView.HandleScrollByPage","Fayde.Controls.TreeView.OnMouseEnter","Fayde.Controls.TreeView.OnMouseLeave","Fayde.Controls.TreeView.OnMouseMove","Fayde.Controls.TreeView.OnMouseLeftButtonDown","Fayde.Controls.TreeView.HandleMouseButtonDown","Fayde.Controls.TreeView.OnMouseLeftButtonUp","Fayde.Controls.TreeView.OnGotFocus","Fayde.Controls.TreeView.OnLostFocus","Fayde.Controls.TreeView.ChangeSelection","Fayde.Controls.TreeView.UpdateSelectedValue","Fayde.Controls.TreeView.SelectFirstItem","Fayde.Controls.TreeView.FocusFirstItem","Fayde.Controls.TreeView.FocusLastItem","GetValue","TreeView","SelectedValueProperty","_AllowWrite","SetValue","value","SelectedItemProperty","Fayde.Controls.calculateDelta","Fayde.Controls.TreeViewItem","Fayde.Controls.TreeViewItem.constructor","Fayde.Controls.TreeViewItem.$SetHasItems","Fayde.Controls.TreeViewItem.$SetIsSelectionActive","Fayde.Controls.TreeViewItem.OnHasItemsChanged","Fayde.Controls.TreeViewItem.OnIsExpandedPropertyChanged","Fayde.Controls.TreeViewItem.OnIsSelectedChanged","Fayde.Controls.TreeViewItem.OnIsSelectionActiveChanged","Fayde.Controls.TreeViewItem.ExpanderButton","Fayde.Controls.TreeViewItem.HeaderElement","Fayde.Controls.TreeViewItem.ExpansionStateGroup","Fayde.Controls.TreeViewItem.ParentItemsControl","Fayde.Controls.TreeViewItem.ParentTreeViewItem","Fayde.Controls.TreeViewItem.ParentTreeView","Fayde.Controls.TreeViewItem.IsRoot","Fayde.Controls.TreeViewItem.CanExpandOnInput","Fayde.Controls.TreeViewItem.OnApplyTemplate","Fayde.Controls.TreeViewItem.OnExpansionStateGroupStateChanged","Fayde.Controls.TreeViewItem.BringIntoView","Fayde.Controls.TreeViewItem.GoToStates","Fayde.Controls.TreeViewItem.GoToStateCommon","Fayde.Controls.TreeViewItem.GoToStateExpansion","Fayde.Controls.TreeViewItem.GoToStateHasItems","Fayde.Controls.TreeViewItem.GoToStateSelection","Fayde.Controls.TreeViewItem.GetContainerForItem","Fayde.Controls.TreeViewItem.IsItemItsOwnContainer","Fayde.Controls.TreeViewItem.PrepareContainerForItem","Fayde.Controls.TreeViewItem.ClearContainerForItem","Fayde.Controls.TreeViewItem.OnItemsChanged","Fayde.Controls.TreeViewItem.OnExpanded","Fayde.Controls.TreeViewItem.OnCollapsed","Fayde.Controls.TreeViewItem.ToggleExpanded","Fayde.Controls.TreeViewItem.OnSelected","Fayde.Controls.TreeViewItem.OnUnselected","Fayde.Controls.TreeViewItem.OnGotFocus","Fayde.Controls.TreeViewItem.OnLostFocus","Fayde.Controls.TreeViewItem.OnExpanderGotFocus","Fayde.Controls.TreeViewItem.OnMouseEnter","Fayde.Controls.TreeViewItem.OnMouseLeave","Fayde.Controls.TreeViewItem.OnHeaderMouseLeftButtonDown","Fayde.Controls.TreeViewItem.OnExpanderClick","Fayde.Controls.TreeViewItem.OnMouseLeftButtonDown","Fayde.Controls.TreeViewItem.OnMouseLeftButtonUp","Fayde.Controls.TreeViewItem.OnIsEnabledChanged","Fayde.Controls.TreeViewItem.OnKeyDown","Fayde.Controls.TreeViewItem.HandleRightKey","Fayde.Controls.TreeViewItem.HandleLeftKey","Fayde.Controls.TreeViewItem.HandleDownKey","Fayde.Controls.TreeViewItem.HandleUpKey","Fayde.Controls.TreeViewItem.HandleScrollByPage","Fayde.Controls.TreeViewItem.Select","Fayde.Controls.TreeViewItem.UpdateContainsSelection","Fayde.Controls.TreeViewItem.AllowKeyHandleEvent","Fayde.Controls.TreeViewItem.FocusDown","Fayde.Controls.TreeViewItem.FocusInto","Fayde.Controls.TreeViewItem.FindNextFocusableItem","Fayde.Controls.TreeViewItem.FindLastFocusableItem","Fayde.Controls.TreeViewItem.FindPreviousFocusableItem","Fayde.Controls.UpDownParseErrorEventArgs","Fayde.Controls.UpDownParseErrorEventArgs.constructor","Fayde.Controls.UpDownParsingEventArgs","Fayde.Controls.UpDownParsingEventArgs.constructor","Fayde.Controls.contextmenu","Fayde.Controls.contextmenu.RootVisualTracker","Fayde.Controls.contextmenu.RootVisualTracker.constructor","Fayde.Controls.contextmenu.RootVisualTracker.rootVisual","Fayde.Controls.contextmenu.RootVisualTracker.tryInit","Fayde.Controls.contextmenu.RootVisualTracker.setOnSizeChanged","Fayde.Controls.contextmenu.RootVisualTracker.getAvailableSize","Fayde.Controls.contextmenu.RootVisualTracker._HandleLayoutUpdated","Fayde.Controls.contextmenu.RootVisualTracker._HandleRootVisualMouseMove","Fayde.Controls.contextmenu.RootVisualTracker._HandleSizeChanged","Fayde.Controls.Internal","Fayde.Controls.Internal.BindingSourceEvaluator","Fayde.Controls.Internal.BindingSourceEvaluator.constructor","Fayde.Controls.Internal.BindingSourceEvaluator.ValueBinding","Fayde.Controls.Internal.BindingSourceEvaluator.GetDynamicValue","Fayde.Controls.Internal.DomainCoercer","Fayde.Controls.Internal.DomainCoercer.constructor","Fayde.Controls.Internal.DomainCoercer.IsEditing","Fayde.Controls.Internal.DomainCoercer.OnIsEditingChanged","Fayde.Controls.Internal.DomainCoercer.IsInvalidInput","Fayde.Controls.Internal.DomainCoercer.Attach","Fayde.Controls.Internal.DomainCoercer.Detach","Fayde.Controls.Internal.DomainCoercer.OnKeyDown","Fayde.Controls.Internal.DomainCoercer.EscapeFocus","Fayde.Controls.Internal.DomainCoercer.OnValueChanged","Fayde.Controls.Internal.DomainCoercer.OnCurrentIndexChanged","Fayde.Controls.Internal.DomainCoercer.TextBox_LostFocus","Fayde.Controls.Internal.DomainCoercer.TextBox_GotFocus","Fayde.Controls.Internal.DomainCoercer.SelectAllText","Fayde.Controls.Internal.DomainCoercer.UpdateTextBoxText","Fayde.Controls.Internal.DomainCoercer.UpdateIsEditable","Fayde.Controls.Internal.DomainCoercer.ProcessUserInput","Fayde.Controls.Internal.DomainCoercer.OnParseError","Fayde.Controls.Internal.DomainCoercer.ApplyValue","Fayde.Controls.Internal.EventGesture","Fayde.Controls.Internal.EventGesture.Attach","Fayde.Controls.Internal.EventGesture._OnEvent","Fayde.Controls.Internal.FormattedRangeCoercer","Fayde.Controls.Internal.FormattedRangeCoercer.constructor","Fayde.Controls.Internal.FormattedRangeCoercer.OnDecimalPlacesChanged","Fayde.Controls.Internal.FormattedRangeCoercer.AddToValue","Fayde.Controls.Internal.createSize","rd","ActualHeight","MaxHeight","MinHeight","Height","Type","GridUnitType","Star","cd","ActualWidth","MaxWidth","MinWidth","Width","Fayde.Controls.Internal.GridResizeDirection","Fayde.Controls.Internal.GridResizeBehavior","Fayde.Controls.Internal.SplitBehavior","Fayde.Controls.Internal.GridSplitterResizer","Fayde.Controls.Internal.GridSplitterResizer.constructor","Fayde.Controls.Internal.GridSplitterResizer.Setup","Fayde.Controls.Internal.GridSplitterResizer.Move","Fayde.Controls.Internal.GridSplitterResizer.UpdateResizeDirection","Fayde.Controls.Internal.GridSplitterResizer.SetLengths","Fayde.Controls.Internal.GridSplitterResizer.GetConstraints","Fayde.Controls.Internal.GridSplitterResizer.GetBehaviorIndices","Fayde.Controls.Internal.ItemsControlHelper","Fayde.Controls.Internal.ItemsControlHelper.constructor","Fayde.Controls.Internal.ItemsControlHelper.ItemsHost","Fayde.Controls.Internal.ItemsControlHelper.ScrollHost","Fayde.Controls.Internal.ItemsControlHelper.OnApplyTemplate","Fayde.Controls.Internal.ItemsControlHelper.PrepareContainerForItemOverride","Fayde.Controls.Internal.ItemsControlHelper.UpdateItemContainerStyle","Fayde.Controls.Internal.ItemsControlHelper.ScrollIntoView","Fayde.Controls.Internal.getDistance","Fayde.Controls.Internal.MultiClickHelper","Fayde.Controls.Internal.MultiClickHelper.constructor","Fayde.Controls.Internal.MultiClickHelper.OnMouseLeftButtonDown","Fayde.Controls.Internal.ObservableObjectCollection","Fayde.Controls.Internal.ObservableObjectCollection.constructor","Fayde.Controls.Internal.ObservableObjectCollection.Add","Fayde.Controls.Internal.ObservableObjectCollection.AddRange","Fayde.Controls.Internal.ObservableObjectCollection.Insert","Fayde.Controls.Internal.ObservableObjectCollection.RemoveAt","Fayde.Controls.Internal.ObservableObjectCollection.SetValueAt","Fayde.Controls.Internal.ObservableObjectCollection.Clear","Fayde.Controls.Internal.scrollByVerticalOffset","Fayde.Controls.Internal.scrollByHorizontalOffset","Fayde.Controls.Internal.ScrollEx","Fayde.Controls.Internal.ScrollEx.HandleKey","Fayde.Controls.Internal.ScrollEx.LineUp","Fayde.Controls.Internal.ScrollEx.LineDown","Fayde.Controls.Internal.ScrollEx.LineLeft","Fayde.Controls.Internal.ScrollEx.LineRight","Fayde.Controls.Internal.ScrollEx.PageUp","Fayde.Controls.Internal.ScrollEx.PageDown","Fayde.Controls.Internal.ScrollEx.PageLeft","Fayde.Controls.Internal.ScrollEx.PageRight","Fayde.Controls.Internal.ScrollEx.ScrollToTop","Fayde.Controls.Internal.ScrollEx.ScrollToBottom","Fayde.Controls.Internal.ScrollEx.GetTopAndBottom","Fayde.Controls.Internal.SelectionHandler","Fayde.Controls.Internal.SelectionHandler.constructor","Fayde.Controls.Internal.SelectionHandler.ActiveBox","Fayde.Controls.Internal.SelectionHandler.Dispose","Fayde.Controls.Internal.SelectionHandler._GotFocus","Fayde.Controls.Internal.SelectionHandler._MouseDown","Fayde.Controls.Internal.SelectionHandler._MouseUp","Fayde.Controls.Internal.SelectionHandler._LostFocus","Fayde.Controls.Internal.SpinFlow","Fayde.Controls.Internal.SpinFlow.constructor","Fayde.Controls.Internal.SpinFlow.UpdateValid","Fayde.Controls.Internal.SpinFlow.Dispose","Fayde.Controls.Internal.SpinFlow.OnKeyDown","Fayde.Controls.Internal.SpinFlow.OnMouseWheel","Fayde.Controls.Internal.SpinFlow.Spinner_Spin","Fayde.Controls.Internal.SpinFlow.DoIncrement","Fayde.Controls.Internal.SpinFlow.DoDecrement","Fayde.Controls.Internal.TextBoxFormatter","Fayde.Controls.Internal.TextBoxFormatter.constructor","Fayde.Controls.Internal.TextBoxFormatter.Value","Fayde.Controls.Internal.TextBoxFormatter.ProcessUserInput","Fayde.Controls.Internal.TextBoxFormatter.Dispose","Fayde.Controls.Internal.TextBoxFormatter.TextBox_LostFocus","Fayde.Controls.Internal.TextBoxFormatter.TextBox_GotFocus","Fayde.Controls.Internal.TextBoxFormatter.ApplyValue","Fayde.Controls.Internal.TextBoxFormatter.OnParseError","Fayde.Controls.Internal.TextBoxFormatter.OnParsing","Fayde.Controls.Internal.TextBoxFormatter.SelectAllText","Fayde.Controls.Internal.TextBoxFormatter.UpdateTextBoxText","Fayde.Controls.Internal.TextBoxFormatter.UpdateIsEditable","Fayde.Controls.TabPanel","Fayde.Controls.TabPanel.constructor","Fayde.Controls.TabPanel.CreateLayoutUpdater","Fayde.Controls.TabPanel.TabAlignment","Fayde.Controls.TabPanel.setTabAlignment","Fayde.Controls.tabpanel","Fayde.Controls.tabpanel.TabPanelUpdater","Fayde.Controls.tabpanel.TabPanelUpdater.constructor","Fayde.Controls.tabpanel.TabPanelUpdater.init","Fayde.Controls.tabpanel.helpers","Fayde.Controls.tabpanel.helpers.getDesiredSizeWithoutMargin","Fayde.Controls.tabpanel.helpers.getTabItemMargin","Fayde.Controls.tabpanel.helpers.getHeadersSize","Fayde.Controls.tabpanel.helpers.setTabItemZ","Fayde.Controls.tabpanel.helpers.getTabItemIsSelected","Fayde.Controls.tabpanel.helpers.getActiveRow","Fayde.Controls.tabpanel.helpers.calculateHeaderDistribution","Fayde.Controls.FocusingInvalidControlEventArgs","Fayde.Controls.FocusingInvalidControlEventArgs.constructor","Fayde.Controls.ValidationSummary","Fayde.Controls.ValidationSummary.constructor","Fayde.Controls.ValidationSummary.GetShowErrorsInSummary","Fayde.Controls.ValidationSummary.SetShowErrorsInSummary","Fayde.Controls.ValidationSummary.OnShowErrorsInSummaryChanged","Fayde.Controls.ValidationSummary.OnFilterChanged","Fayde.Controls.ValidationSummary.OnHeaderChanged","Fayde.Controls.ValidationSummary.OnTargetChanged","Fayde.Controls.ValidationSummary.Errors","Fayde.Controls.ValidationSummary.DisplayedErrors","Fayde.Controls.ValidationSummary.OnApplyTemplate","Fayde.Controls.ValidationSummary.Errors_CollectionChanged","Fayde.Controls.ValidationSummary.ErrorsListBox_KeyDown","Fayde.Controls.ValidationSummary.ErrorsListBox_MouseLeftButtonUp","Fayde.Controls.ValidationSummary.ErrorsListBox_SelectionChanged","Fayde.Controls.ValidationSummary.ValidationSummary_Loaded","Fayde.Controls.ValidationSummary.ValidationSummary_Unloaded","Fayde.Controls.ValidationSummary.ValidationSummary_IsEnabledChanged","Fayde.Controls.ValidationSummary.ValidationSummaryItem_PropertyChanged","Fayde.Controls.ValidationSummary.UpdateValidation","Fayde.Controls.ValidationSummary.UpdateCommon","Fayde.Controls.ValidationSummary.UpdateHeaderText","Fayde.Controls.ValidationSummary.UpdateDisplayedErrors","Fayde.Controls.ValidationSummary.Target_BindingValidationError","Fayde.Controls.ValidationSummary.GetHeaderString","Fayde.Controls.ValidationSummary.ExecuteClick","Fayde.Controls.ValidationSummary.FindMatchingErrorSource","Fayde.Controls.ValidationSummary.UpdateDisplayedErrorsOnAllValidationSummaries","Fayde.Controls.ValidationItemCollection","Fayde.Controls.ValidationItemCollection.constructor","Fayde.Controls.ValidationItemCollection.ClearErrors","Fayde.Controls.ValidationItemCollection.ClearItems","Fayde.Controls.ValidationSummaryItem","Fayde.Controls.ValidationSummaryItem.constructor","Fayde.Controls.ValidationSummaryItem.Sources","Fayde.Controls.ValidationSummaryItemSource","Fayde.Controls.ValidationSummaryItemSource.constructor","Fayde.Controls.ValidationSummaryItemSource.Equals","Fayde.Controls.compareSummaryItems","Fayde.Controls.compareRefs","Fayde.Controls.compareNum","Fayde.Controls.compareVisualOrder","Fayde.Controls.Viewbox","Fayde.Controls.Viewbox.constructor","Fayde.Controls.Viewbox.CreateLayoutUpdater","Fayde.Controls.reactions","Fayde.Controls.viewbox","Fayde.Controls.viewbox.ViewboxUpdater","Fayde.Controls.viewbox.ViewboxUpdater.constructor","Fayde.Controls.viewbox.ViewboxUpdater.init","Fayde.Controls.viewbox.ViewboxUpdater.measureOverride","Fayde.Controls.viewbox.ViewboxUpdater.arrangeOverride","Fayde.Controls.viewbox.ViewboxUpdater.setViewXform","Fayde.Controls.viewbox.helpers","Fayde.Controls.viewbox.helpers.computeScaleFactor","Fayde.Controls.viewbox.helpers.isZero","Fayde.Controls.WrapPanel","Fayde.Controls.WrapPanel.constructor","Fayde.Controls.WrapPanel.CreateLayoutUpdater","Fayde.Controls.wrappanel","Fayde.Controls.wrappanel.WrapPanelUpdater","Fayde.Controls.wrappanel.WrapPanelUpdater.constructor","Fayde.Controls.wrappanel.WrapPanelUpdater.init","Fayde.Controls.wrappanel.helpers","Fayde.Controls.wrappanel.helpers.coerceChildSize","Fayde.Controls.tabpanel.arrange","Fayde.Controls.tabpanel.arrange.TabPanelArrangePipeDef","Fayde.Controls.tabpanel.arrange.TabPanelArrangePipeDef.constructor","Fayde.Controls.tabpanel.measure","Fayde.Controls.tabpanel.measure.TabPanelMeasurePipeDef","Fayde.Controls.tabpanel.measure.TabPanelMeasurePipeDef.constructor","Fayde.Controls.tabpanel.measure.TabPanelMeasurePipeDef.createOutput","Fayde.Controls.tabpanel.measure.TabPanelMeasurePipeDef.prepare","Fayde.Controls.tabpanel.measure.TabPanelMeasurePipeDef.flush","Fayde.Controls.viewbox.processdown","Fayde.Controls.viewbox.processdown.ViewboxProcessDownPipeDef","Fayde.Controls.viewbox.processdown.ViewboxProcessDownPipeDef.constructor","Fayde.Controls.viewbox.processdown.tapins","Fayde.Controls.viewbox.processdown.tapins.applyViewXform","Fayde.Controls.wrappanel.arrange","Fayde.Controls.wrappanel.arrange.WrapPanelArrangePipeDef","Fayde.Controls.wrappanel.arrange.WrapPanelArrangePipeDef.constructor","Fayde.Controls.wrappanel.measure","Fayde.Controls.wrappanel.measure.WrapPanelMeasurePipeDef","Fayde.Controls.wrappanel.measure.WrapPanelMeasurePipeDef.constructor","Fayde.Controls.tabpanel.arrange.tapins","Fayde.Controls.tabpanel.arrange.tapins.doHorizontal","Fayde.Controls.tabpanel.arrange.tapins.doVertical","Fayde.Controls.tabpanel.measure.tapins","Fayde.Controls.tabpanel.measure.tapins.doHorizontal","Fayde.Controls.tabpanel.measure.tapins.doVertical","Fayde.Controls.wrappanel.arrange.tapins","Fayde.Controls.wrappanel.arrange.tapins.doHorizontal","Fayde.Controls.wrappanel.arrange.tapins.doVertical","Fayde.Controls.wrappanel.measure.tapins","Fayde.Controls.wrappanel.measure.tapins.doHorizontal","Fayde.Controls.wrappanel.measure.tapins.doVertical"],"mappings":"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","file":"fayde.controls.min.js","sourcesContent":["module Fayde.Controls {\r\n    export var version = '0.19.1';\r\n}","module Fayde.Controls {\r\n    export var Library = TypeManager.resolveLibrary(\"lib://fayde.controls\");\r\n}",null,"\r\nmodule Fayde.Controls.Primitives {\r\n    export class MenuBase extends Fayde.Controls.ItemsControl {\r\n        static ItemContainerStyleProperty = DependencyProperty.Register(\"ItemContainerStyle\", () => Style, MenuBase);\r\n        ItemContainerStyle: Style;\r\n\r\n        IsItemItsOwnContainer(item: any): boolean { return item instanceof MenuItem || item instanceof Separator; }\r\n        GetContainerForItem(): UIElement { return new MenuItem(); }\r\n        PrepareContainerForItem(element: UIElement, item: any) {\r\n            super.PrepareContainerForItem(element, item);\r\n            var menuItem = <MenuItem>element;\r\n            if (!(menuItem instanceof MenuItem))\r\n                return;\r\n            menuItem.ParentMenuBase = this;\r\n            if (menuItem != item) {\r\n                var itemTemplate = this.ItemTemplate;\r\n                var itemContainerStyle = this.ItemContainerStyle;\r\n                if (itemTemplate != null)\r\n                    menuItem.SetValue(Fayde.Controls.ItemsControl.ItemTemplateProperty, itemTemplate);\r\n                if (itemContainerStyle != null && MenuBase.HasDefaultValue(menuItem, Controls.HeaderedItemsControl.ItemContainerStyleProperty))\r\n                    menuItem.SetValue(Controls.HeaderedItemsControl.ItemContainerStyleProperty, itemContainerStyle);\r\n                if (MenuBase.HasDefaultValue(menuItem, Controls.HeaderedItemsControl.HeaderProperty))\r\n                    menuItem.Header = item;\r\n                if (itemTemplate != null)\r\n                    menuItem.SetValue(Controls.HeaderedItemsControl.HeaderTemplateProperty, itemTemplate);\r\n                if (itemContainerStyle != null)\r\n                    menuItem.SetValue(FrameworkElement.StyleProperty, itemContainerStyle);\r\n            }\r\n        }\r\n        private static HasDefaultValue(control: Control, propd: DependencyProperty): boolean {\r\n            return control.ReadLocalValue(propd) === DependencyProperty.UnsetValue;\r\n        }\r\n    }\r\n}","/// <reference path=\"Primitives/MenuBase.ts\" />\r\n\r\nmodule Fayde.Controls {\r\n    export class ContextMenu extends Primitives.MenuBase {\r\n        static HorizontalOffsetProperty = DependencyProperty.Register(\"HorizontalOffset\", () => Number, ContextMenu, 0.0);\r\n        static VerticalOffsetProperty = DependencyProperty.Register(\"VerticalOffset\", () => Number, ContextMenu, 0.0);\r\n        static IsOpenProperty = DependencyProperty.Register(\"IsOpen\", () => Boolean, ContextMenu, false);\r\n        HorizontalOffset: number;\r\n        VerticalOffset: number;\r\n        IsOpen: boolean;\r\n\r\n        private OnHorizontalOffsetChanged (args: IDependencyPropertyChangedEventArgs) {\r\n            this.UpdateContextMenuPlacement();\r\n        }\r\n\r\n        private OnVerticalOffsetChanged (args: IDependencyPropertyChangedEventArgs) {\r\n            this.UpdateContextMenuPlacement();\r\n        }\r\n\r\n        private OnIsOpenChanged (args: IDependencyPropertyChangedEventArgs) {\r\n            if (this._SettingIsOpen)\r\n                return;\r\n            if (args.NewValue === true)\r\n                this.OpenPopup(this.$RootVisualTracker.mousePosition);\r\n            else\r\n                this.ClosePopup();\r\n        }\r\n\r\n        Opened = new RoutedEvent<RoutedEventArgs>();\r\n        Closed = new RoutedEvent<RoutedEventArgs>();\r\n\r\n        private $RootVisualTracker: contextmenu.RootVisualTracker;\r\n\r\n        constructor () {\r\n            super();\r\n            this.DefaultStyleKey = ContextMenu;\r\n            this.$RootVisualTracker = new contextmenu.RootVisualTracker(this);\r\n        }\r\n\r\n        OnKeyDown (e: Input.KeyEventArgs) {\r\n            switch (e.Key) {\r\n                case Input.Key.Escape:\r\n                    this.ClosePopup();\r\n                    e.Handled = true;\r\n                    break;\r\n                case Input.Key.Up:\r\n                    this.FocusNextItem(false);\r\n                    e.Handled = true;\r\n                    break;\r\n                case Input.Key.Down:\r\n                    this.FocusNextItem(true);\r\n                    e.Handled = true;\r\n                    break;\r\n            }\r\n            super.OnKeyDown(e)\r\n        }\r\n\r\n        OnMouseLeftButtonDown (e: Input.MouseButtonEventArgs) {\r\n            e.Handled = true;\r\n            super.OnMouseLeftButtonDown(e);\r\n        }\r\n\r\n        OnMouseRightButtonDown (e: Input.MouseButtonEventArgs) {\r\n            e.Handled = true;\r\n            super.OnMouseRightButtonDown(e);\r\n        }\r\n\r\n        private _Owner: DependencyObject = null;\r\n        get Owner (): DependencyObject {\r\n            return this._Owner;\r\n        }\r\n\r\n        set Owner (value: DependencyObject) {\r\n            if (this._Owner) {\r\n                var fe = this._Owner instanceof FrameworkElement ? <FrameworkElement>this._Owner : null;\r\n                if (fe)\r\n                    fe.MouseRightButtonDown.off(this._HandleOwnerMouseRightButtonDown, this);\r\n            }\r\n            this._Owner = value;\r\n            if (!this._Owner)\r\n                return;\r\n            fe = this._Owner instanceof FrameworkElement ? <FrameworkElement>this._Owner : null;\r\n            if (fe)\r\n                fe.MouseRightButtonDown.on(this._HandleOwnerMouseRightButtonDown, this);\r\n        }\r\n\r\n        private _PopupAlignmentPoint = new Point();\r\n        private _SettingIsOpen: boolean = false;\r\n        private _Popup: Controls.Primitives.Popup = null;\r\n        private _Overlay: Panel = null;\r\n\r\n        private _HandleOwnerMouseRightButtonDown (sender: any, e: Fayde.Input.MouseButtonEventArgs) {\r\n            this.OpenPopup(e.GetPosition(null));\r\n            e.Handled = true;\r\n        }\r\n\r\n        private _HandleOverlayMouseButtonDown (sender: any, e: Fayde.Input.MouseButtonEventArgs) {\r\n            this.ClosePopup();\r\n            e.Handled = true;\r\n        }\r\n\r\n        private _HandleContextMenuSizeChanged (sender: any, e: Fayde.SizeChangedEventArgs) {\r\n            this.UpdateContextMenuPlacement();\r\n        }\r\n\r\n        ChildMenuItemClicked () {\r\n            this.ClosePopup();\r\n        }\r\n\r\n        private UpdateContextMenuPlacement () {\r\n            var pap = this._PopupAlignmentPoint;\r\n            var full = this.$RootVisualTracker.getAvailableSize();\r\n\r\n            var x = Math.max(0, Math.min(pap.x + this.HorizontalOffset, full.width - this.ActualWidth));\r\n            var y = Math.max(0, Math.min(pap.y + this.VerticalOffset, full.height - this.ActualHeight));\r\n            Controls.Canvas.SetLeft(this, x);\r\n            Controls.Canvas.SetTop(this, y);\r\n\r\n            var overlay = this._Overlay;\r\n            if (!overlay)\r\n                return;\r\n            overlay.Width = full.width;\r\n            overlay.Height = full.height;\r\n        }\r\n\r\n        private OpenPopup (position: Point) {\r\n            this._PopupAlignmentPoint = position;\r\n\r\n            var canvas1 = new Canvas();\r\n            canvas1.Background = new Fayde.Media.SolidColorBrush(Color.KnownColors.Transparent);\r\n            this._Overlay = canvas1;\r\n            this._Overlay.MouseLeftButtonDown.on(this._HandleOverlayMouseButtonDown, this);\r\n            this._Overlay.MouseRightButtonDown.on(this._HandleOverlayMouseButtonDown, this);\r\n            this._Overlay.Children.Add(this);\r\n\r\n            var popup = this._Popup = new Controls.Primitives.Popup();\r\n            var initiator = <XamlObject>this._Owner;\r\n            while (initiator && !(initiator instanceof UIElement))\r\n                initiator = initiator.Parent;\r\n            if (initiator) {\r\n                popup.XamlNode.RegisterInitiator(<UIElement>initiator);\r\n                this.$RootVisualTracker.tryInit(<UIElement>initiator);\r\n            }\r\n            popup.Child = this._Overlay;\r\n\r\n            this.SizeChanged.on(this._HandleContextMenuSizeChanged, this);\r\n            this.$RootVisualTracker.setOnSizeChanged((newSize) => this.UpdateContextMenuPlacement());\r\n            this.UpdateContextMenuPlacement();\r\n            if (this.ReadLocalValue(DependencyObject.DataContextProperty) === DependencyProperty.UnsetValue) {\r\n                var binding1 = new Fayde.Data.Binding(\"DataContext\");\r\n                binding1.Source = this.Owner || this.$RootVisualTracker.rootVisual;\r\n                this.SetBinding(DependencyObject.DataContextProperty, binding1);\r\n            }\r\n            popup.IsOpen = true;\r\n            this.Focus();\r\n            this._SettingIsOpen = true;\r\n            this.IsOpen = true;\r\n            this._SettingIsOpen = false;\r\n            this.OnOpened(new RoutedEventArgs());\r\n        }\r\n\r\n        OnOpened (e: RoutedEventArgs) {\r\n            this.Opened.raise(this, e);\r\n        }\r\n\r\n        private ClosePopup () {\r\n            if (this._Popup) {\r\n                this._Popup.IsOpen = false;\r\n                this._Popup.Child = null;\r\n                this._Popup = null;\r\n            }\r\n            if (this._Overlay) {\r\n                this._Overlay.Children.Clear();\r\n                this._Overlay = null;\r\n            }\r\n            this.SizeChanged.off(this._HandleContextMenuSizeChanged, this);\r\n            this.$RootVisualTracker.setOnSizeChanged();\r\n            this._SettingIsOpen = true;\r\n            this.IsOpen = false;\r\n            this._SettingIsOpen = false;\r\n            this.OnClosed(new RoutedEventArgs());\r\n        }\r\n\r\n        OnClosed (e: RoutedEventArgs) {\r\n            this.Closed.raise(this, e);\r\n        }\r\n\r\n        private FocusNextItem (down: boolean) {\r\n            var count = this.Items.Count;\r\n            var num = down ? -1 : count;\r\n\r\n            var menuItem1 = <MenuItem>Fayde.Surface.GetFocusedElement(this);\r\n            if (menuItem1 instanceof MenuItem && this === menuItem1.ParentMenuBase)\r\n                num = this.ItemContainersManager.IndexFromContainer(menuItem1);\r\n            var index = num;\r\n            var menuItem2;\r\n            do {\r\n                index = (index + count + (down ? 1 : -1)) % count;\r\n                menuItem2 = this.ItemContainersManager.ContainerFromIndex(index);\r\n                if (!(menuItem2 instanceof MenuItem)) menuItem2 = null;\r\n            }\r\n            while ((!menuItem2 || (!menuItem2.IsEnabled || !menuItem2.Focus())) && index !== num);\r\n        }\r\n    }\r\n}","\r\nmodule Fayde.Controls {\r\n    export class ContextMenuService {\r\n        static ContextMenuProperty = DependencyProperty.RegisterAttached(\"ContextMenu\", () => ContextMenu, ContextMenuService, undefined, ContextMenuService.OnContextMenuPropertyChanged);\r\n        static GetContextMenu(d: DependencyObject): ContextMenu { return d.GetValue(ContextMenuService.ContextMenuProperty); }\r\n        static SetContextMenu(d: DependencyObject, value: ContextMenu) { d.SetValue(ContextMenuService.ContextMenuProperty, value); }\r\n        private static OnContextMenuPropertyChanged(d: DependencyObject, args: IDependencyPropertyChangedEventArgs) {\r\n            var fe = <FrameworkElement>d;\r\n            if (!(fe instanceof FrameworkElement))\r\n                return;\r\n            var oldMenu = <ContextMenu>args.OldValue;\r\n            if (oldMenu instanceof ContextMenu)\r\n                oldMenu.Owner = null;\r\n            var newMenu = <ContextMenu>args.NewValue;\r\n            if (newMenu instanceof ContextMenu)\r\n                newMenu.Owner = fe;\r\n        }\r\n    }\r\n}","module Fayde.Controls {\r\n    export class DatePicker extends Control {\r\n        static SelectedMonthProperty = DependencyProperty.Register(\"SelectedMonth\", () => Number, DatePicker, NaN, (d, args) => (<DatePicker>d).OnSelectedMonthChanged(args));\r\n        static SelectedDayProperty = DependencyProperty.Register(\"SelectedDay\", () => Number, DatePicker, NaN, (d, args) => (<DatePicker>d).OnSelectedDayChanged(args));\r\n        static SelectedYearProperty = DependencyProperty.Register(\"SelectedYear\", () => Number, DatePicker, NaN, (d, args) => (<DatePicker>d).OnSelectedYearChanged(args));\r\n        static SelectedDateProperty = DependencyProperty.Register(\"SelectedDate\", () => DateTime, DatePicker, undefined, (d, args) => (<DatePicker>d).OnSelectedDateChanged(args));\r\n        SelectedMonth: number;\r\n        SelectedDay: number;\r\n        SelectedYear: number;\r\n        SelectedDate: DateTime;\r\n\r\n        private OnSelectedMonthChanged(args: IDependencyPropertyChangedEventArgs) {\r\n            this.CoerceMonth(args.NewValue);\r\n            this.CoerceDate();\r\n        }\r\n        private OnSelectedDayChanged(args: IDependencyPropertyChangedEventArgs) {\r\n            this.CoerceDay(args.NewValue);\r\n            this.CoerceDate();\r\n        }\r\n        private OnSelectedYearChanged(args: IDependencyPropertyChangedEventArgs) {\r\n            this.CoerceYear(args.NewValue);\r\n            this.CoerceDate();\r\n        }\r\n        private OnSelectedDateChanged(args: IDependencyPropertyChangedEventArgs) {\r\n            var dt = <DateTime>args.NewValue;\r\n            if (dt instanceof DateTime) {\r\n                this.CoerceMonth(dt.Month);\r\n                this.CoerceDay(dt.Day);\r\n                this.CoerceYear(dt.Year);\r\n            } else {\r\n                this.CoerceMonth(NaN);\r\n                this.CoerceDay(NaN);\r\n                this.CoerceYear(NaN);\r\n            }\r\n        }\r\n\r\n        private _MonthTextBox: TextBox = null;\r\n        private _DayTextBox: TextBox = null;\r\n        private _YearTextBox: TextBox = null;\r\n\r\n        private _MonthGesture = new Internal.EventGesture<TextBox>();\r\n        private _DayGesture = new Internal.EventGesture<TextBox>();\r\n        private _YearGesture = new Internal.EventGesture<TextBox>();\r\n\r\n        private _SelectionHandler: Internal.SelectionHandler = null;\r\n\r\n        constructor() {\r\n            super();\r\n            this.DefaultStyleKey = DatePicker;\r\n        }\r\n\r\n        OnApplyTemplate() {\r\n            super.OnApplyTemplate();\r\n\r\n            this._MonthGesture.Detach();\r\n            this._MonthTextBox = <TextBox>this.GetTemplateChild(\"MonthTextBox\", TextBox);\r\n            if (this._MonthTextBox)\r\n                this._MonthGesture.Attach(this._MonthTextBox.LostFocus, (tb) => this.CoerceMonth(tb.Text));\r\n\r\n            this._DayGesture.Detach();\r\n            this._DayTextBox = <TextBox>this.GetTemplateChild(\"DayTextBox\", TextBox);\r\n            if (this._DayTextBox)\r\n                this._DayGesture.Attach(this._DayTextBox.LostFocus, (tb) => this.CoerceDay(tb.Text));\r\n\r\n            this._YearGesture.Detach();\r\n            this._YearTextBox = <TextBox>this.GetTemplateChild(\"YearTextBox\", TextBox);\r\n            if (this._YearTextBox)\r\n                this._YearGesture.Attach(this._YearTextBox.LostFocus, (tb) => this.CoerceDay(tb.Text));\r\n\r\n            if (this._SelectionHandler)\r\n                this._SelectionHandler.Dispose();\r\n            this._SelectionHandler = new Internal.SelectionHandler([this._MonthTextBox, this._DayTextBox, this._YearTextBox]);\r\n\r\n            this._UpdateText();\r\n        }\r\n\r\n        private CoerceMonth(month: any) {\r\n            month = Math.max(1, Math.min(12, month));\r\n            if (!isNaN(month) || !isNaN(this.SelectedMonth))\r\n                this.SetCurrentValue(DatePicker.SelectedMonthProperty, month);\r\n            this._UpdateText();\r\n        }\r\n        private CoerceDay(day: any) {\r\n            day = Math.max(1, Math.min(31, parseFloat(day)));\r\n            if (!isNaN(day) || !isNaN(this.SelectedDay))\r\n                this.SetCurrentValue(DatePicker.SelectedDayProperty, day);\r\n            this._UpdateText();\r\n        }\r\n        private CoerceYear(year: any) {\r\n            var maxYear = DateTime.MaxValue.Year - 1;\r\n            year = Math.min(maxYear, Math.max(0, year));\r\n            if (!isNaN(year) || !isNaN(this.SelectedYear))\r\n                this.SetCurrentValue(DatePicker.SelectedYearProperty, year);\r\n            this._UpdateText();\r\n        }\r\n        private CoerceDate() {\r\n            var m = this.SelectedMonth;\r\n            var d = this.SelectedDay;\r\n            var y = this.SelectedYear;\r\n            if (isNaN(m) || isNaN(d) || isNaN(y))\r\n                return;\r\n            var dte = new DateTime(y, m, d);\r\n            if (DateTime.Compare(dte, this.SelectedDate) === 0)\r\n                return;\r\n            this.SetCurrentValue(DatePicker.SelectedDateProperty, dte);\r\n        }\r\n\r\n        private _UpdateText() {\r\n            if (this._MonthTextBox)\r\n                this._MonthTextBox.Text = formatNumber(this.SelectedMonth, 2, \"MM\");\r\n            if (this._DayTextBox)\r\n                this._DayTextBox.Text = formatNumber(this.SelectedDay, 2, \"DD\");\r\n            if (this._YearTextBox)\r\n                this._YearTextBox.Text = formatNumber(this.SelectedYear, 4, \"YYYY\");\r\n        }\r\n    }\r\n    TemplateParts(DatePicker,\r\n        { Name: \"MonthTextBox\", Type: TextBox },\r\n        { Name: \"DayTextBox\", Type: TextBox },\r\n        { Name: \"YearTextBox\", Type: TextBox });\r\n    TemplateVisualStates(DatePicker,\r\n        { GroupName: \"CommonStates\", Name: \"Normal\" },\r\n        { GroupName: \"CommonStates\", Name: \"Disabled\" },\r\n        { GroupName: \"ValidationStates\", Name: \"Valid\" },\r\n        { GroupName: \"ValidationStates\", Name: \"InvalidFocused\" },\r\n        { GroupName: \"ValidationStates\", Name: \"InvalidUnfocused\" });\r\n    //[StyleTypedProperty(Property = \"CalendarStyle\", StyleTargetType = typeof (Calendar))]\r\n\r\n    function formatNumber(n: number, digits: number, fallback: string) {\r\n        if (isNaN(n))\r\n            return fallback;\r\n        return Localization.Format(\"{0:d\" + digits + \"}\", n);\r\n    }\r\n}","module Fayde.Controls {\r\n    export enum ValidSpinDirections {\r\n        None = 0,\r\n        Increase = 1,\r\n        Decrease = 2\r\n    }\r\n    Library.addEnum(ValidSpinDirections, \"ValidSpinDirections\");\r\n\r\n    export enum SpinDirection {\r\n        Increase,\r\n        Decrease\r\n    }\r\n    Library.addEnum(SpinDirection, \"SpinDirection\");\r\n\r\n    export enum InvalidInputAction {\r\n        UseFallbackItem,\r\n        TextBoxCannotLoseFocus\r\n    }\r\n    Library.addEnum(InvalidInputAction, \"InvalidInputAction\");\r\n\r\n    export enum Dock {\r\n        Left,\r\n        Top,\r\n        Right,\r\n        Bottom\r\n    }\r\n    Library.addEnum(Dock, \"Dock\");\r\n\r\n    export enum DatePickerFormat {\r\n        Long,\r\n        Short,\r\n    }\r\n    Library.addEnum(DatePickerFormat, \"DatePickerFormat\");\r\n\r\n    export enum TimeDisplayMode {\r\n        Regular,\r\n        Military\r\n    }\r\n    Library.addEnum(TimeDisplayMode, \"TimeDisplayMode\");\r\n\r\n    export enum ValidationSummaryFilters {\r\n        None = 0,\r\n        ObjectErrors = 1,\r\n        PropertyErrors = 2,\r\n        All = PropertyErrors | ObjectErrors,\r\n    }\r\n    Library.addEnum(ValidationSummaryFilters, \"ValidationSummaryFilters\");\r\n\r\n    export enum ValidationSummaryItemType {\r\n        ObjectError = 1,\r\n        PropertyError = 2,\r\n    }\r\n    Library.addEnum(ValidationSummaryItemType, \"ValidationSummaryItemType\");\r\n\r\n    export enum StretchDirection {\r\n        UpOnly,\r\n        DownOnly,\r\n        Both,\r\n    }\r\n    Library.addEnum(StretchDirection, \"StretchDirection\");\r\n}","/// <reference path=\"Enums.ts\" />\r\n\r\nmodule Fayde.Controls {\r\n    import ButtonBase = Controls.Primitives.ButtonBase;\r\n\r\n    export class Spinner extends Control {\r\n        static ContentProperty = DependencyProperty.Register(\"Content\", () => Object, Spinner, undefined, (d: Spinner, args) => d.OnContentChanged(args.OldValue, args.NewValue));\r\n        static ValidSpinDirectionProperty = DependencyProperty.Register(\"ValidSpinDirection\", () => new Enum(ValidSpinDirections), Spinner, ValidSpinDirections.Increase, (d, args) => (<Spinner>d).OnValidSpinDirectionChanged(args));\r\n        Content: any;\r\n        ValidSpinDirection: ValidSpinDirections;\r\n\r\n        OnContentChanged (oldContent: any, newContent: any) {\r\n\r\n        }\r\n\r\n        OnValidSpinDirectionChanged (args: IDependencyPropertyChangedEventArgs) {\r\n            this.UpdateVisualState(true);\r\n            this.EnableButtons();\r\n        }\r\n\r\n        Spin = new RoutedEvent<SpinEventArgs>();\r\n\r\n        OnSpin (e: SpinEventArgs) {\r\n            var valid = e.Direction === SpinDirection.Increase ? ValidSpinDirections.Increase : ValidSpinDirections.Decrease;\r\n            if ((this.ValidSpinDirection & valid) !== valid)\r\n                throw new InvalidOperationException(\"Invalid Spin Direction\");\r\n            this.Spin.raise(this, e);\r\n        }\r\n\r\n        private _IncreaseButton: ButtonBase = null;\r\n        private _DecreaseButton: ButtonBase = null;\r\n\r\n        constructor () {\r\n            super();\r\n            this.DefaultStyleKey = Spinner;\r\n        }\r\n\r\n        OnApplyTemplate () {\r\n            super.OnApplyTemplate();\r\n\r\n            if (this._IncreaseButton)\r\n                this._IncreaseButton.Click.off(this.OnIncreaseClick, this);\r\n            this._IncreaseButton = <ButtonBase>this.GetTemplateChild(\"IncreaseButton\", ButtonBase);\r\n            if (this._IncreaseButton)\r\n                this._IncreaseButton.Click.on(this.OnIncreaseClick, this);\r\n\r\n            if (this._DecreaseButton)\r\n                this._DecreaseButton.Click.off(this.OnDecreaseClick, this);\r\n            this._DecreaseButton = <ButtonBase>this.GetTemplateChild(\"DecreaseButton\", ButtonBase);\r\n            if (this._DecreaseButton)\r\n                this._DecreaseButton.Click.on(this.OnDecreaseClick, this);\r\n\r\n            this.UpdateVisualState(false);\r\n            this.EnableButtons();\r\n        }\r\n\r\n        private OnIncreaseClick (sender: any, e: Fayde.Input.MouseButtonEventArgs) {\r\n            this.OnSpin(new SpinEventArgs(SpinDirection.Increase));\r\n        }\r\n\r\n        private OnDecreaseClick (sender: any, e: Fayde.Input.MouseButtonEventArgs) {\r\n            this.OnSpin(new SpinEventArgs(SpinDirection.Decrease));\r\n        }\r\n\r\n        private EnableButtons () {\r\n            if (this._IncreaseButton)\r\n                this._IncreaseButton.IsEnabled = (this.ValidSpinDirection & ValidSpinDirections.Increase) === ValidSpinDirections.Increase;\r\n            if (this._DecreaseButton)\r\n                this._DecreaseButton.IsEnabled = (this.ValidSpinDirection & ValidSpinDirections.Decrease) === ValidSpinDirections.Decrease;\r\n        }\r\n\r\n        GoToStates (gotoFunc: (state: string) => boolean) {\r\n            super.GoToStates(gotoFunc);\r\n            this.GoToStateIncrease(gotoFunc);\r\n            this.GoToStateDecrease(gotoFunc);\r\n        }\r\n\r\n        GoToStateCommon (gotoFunc: (state: string) => boolean): boolean {\r\n            if (!this.IsEnabled)\r\n                return gotoFunc(\"Disabled\");\r\n            if (this.IsMouseOver)\r\n                return gotoFunc(\"MouseOver\");\r\n            return gotoFunc(\"Normal\");\r\n        }\r\n\r\n        GoToStateIncrease (gotoFunc: (state: string) => boolean): boolean {\r\n            return gotoFunc(((this.ValidSpinDirection & ValidSpinDirections.Increase) === ValidSpinDirections.Increase) ? \"IncreaseEnabled\" : \"IncreaseDisabled\");\r\n        }\r\n\r\n        GoToStateDecrease (gotoFunc: (state: string) => boolean): boolean {\r\n            return gotoFunc(((this.ValidSpinDirection & ValidSpinDirections.Decrease) === ValidSpinDirections.Decrease) ? \"DecreaseEnabled\" : \"DecreaseDisabled\");\r\n        }\r\n\r\n        OnMouseEnter (e: Input.MouseEventArgs) {\r\n            super.OnMouseEnter(e);\r\n            this.UpdateVisualState();\r\n        }\r\n\r\n        OnMouseLeave (e: Input.MouseEventArgs) {\r\n            super.OnMouseLeave(e);\r\n            this.UpdateVisualState();\r\n        }\r\n\r\n        OnMouseLeftButtonDown (e: Input.MouseButtonEventArgs) {\r\n            this.UpdateVisualState();\r\n            super.OnMouseLeftButtonDown(e);\r\n        }\r\n\r\n        OnMouseLeftButtonUp (e: Input.MouseButtonEventArgs) {\r\n            super.OnMouseLeftButtonUp(e);\r\n            this.UpdateVisualState();\r\n        }\r\n\r\n        OnGotFocus (e: RoutedEventArgs) {\r\n            super.OnGotFocus(e);\r\n            this.UpdateVisualState();\r\n        }\r\n\r\n        OnLostFocus (e: RoutedEventArgs) {\r\n            super.OnLostFocus(e);\r\n            this.UpdateVisualState();\r\n        }\r\n    }\r\n    Markup.Content(Spinner, Spinner.ContentProperty);\r\n    TemplateVisualStates(Spinner,\r\n        {GroupName: \"CommonStates\", Name: \"Normal\"},\r\n        {GroupName: \"CommonStates\", Name: \"MouseOver\"},\r\n        {GroupName: \"CommonStates\", Name: \"Disabled\"},\r\n        {GroupName: \"FocusStates\", Name: \"Unfocused\"},\r\n        {GroupName: \"FocusStates\", Name: \"Focused\"},\r\n        {GroupName: \"IncreaseStates\", Name: \"IncreaseEnabled\"},\r\n        {GroupName: \"IncreaseStates\", Name: \"IncreaseDisabled\"},\r\n        {GroupName: \"DecreaseStates\", Name: \"DecreaseEnabled\"},\r\n        {GroupName: \"DecreaseStates\", Name: \"DecreaseDisabled\"});\r\n    TemplateParts(Spinner,\r\n        {Name: \"IncreaseButton\", Type: Primitives.ButtonBase},\r\n        {Name: \"DecreaseButton\", Type: Primitives.ButtonBase});\r\n}","/// <reference path=\"Spinner.ts\" />\r\n\r\nmodule Fayde.Controls {\r\n    export class UpDownBase<T> extends Control {\r\n        private _IgnoreValueChange: boolean = false;\r\n        _TextBox: TextBox = null;\r\n        _Spinner: Spinner = null;\r\n        private _Text: string = \"\";\r\n\r\n        static SpinnerStyleProperty = DependencyProperty.Register(\"SpinnerStyle\", () => Style, UpDownBase, undefined, <T>(d: UpDownBase<T>, args) => d.OnSpinnerStyleChanged(args.OldValue, args.NewValue));\r\n        SpinnerStyle: Style;\r\n        private OnSpinnerStyleChanged(oldStyle: Style, newStyle: Style) { }\r\n\r\n        Value: T;\r\n        _OnValueChanged(args: IDependencyPropertyChangedEventArgs) {\r\n            if (this._IgnoreValueChange)\r\n                return;\r\n            var oldValue: T = args.OldValue;\r\n            var newValue: T = args.NewValue;\r\n            var e1 = new RoutedPropertyChangingEventArgs<T>(args.Property, oldValue, newValue, true);\r\n            this.OnValueChanging(e1);\r\n            if (e1.InCoercion)\r\n                return;\r\n            if (!e1.Cancel) {\r\n                var newValue2: T = e1.NewValue;\r\n                var e2 = new RoutedPropertyChangedEventArgs<T>(oldValue, newValue2);\r\n                this.OnValueChanged(e2);\r\n            } else {\r\n                this._IgnoreValueChange = true;\r\n                this.Value = oldValue;\r\n                this._IgnoreValueChange = false;\r\n            }\r\n        }\r\n        OnValueChanging(e: RoutedPropertyChangingEventArgs<T>) {\r\n            this.ValueChanging.raise(this, e);\r\n        }\r\n        OnValueChanged(e: RoutedPropertyChangedEventArgs<T>) {\r\n            (<RoutedEvent<RoutedPropertyChangedEventArgs<T>>>this.ValueChanged).raise(this, e); //WTF: compiler choking without cast for some odd reason\r\n            this.SetTextBoxText();\r\n        }\r\n\r\n        static IsEditableProperty = DependencyProperty.Register(\"IsEditable\", () => Boolean, UpDownBase, true, <T>(d: UpDownBase<T>, args) => d.OnIsEditableChanged(args));\r\n        IsEditable: boolean;\r\n        private OnIsEditableChanged(args: IDependencyPropertyChangedEventArgs) {\r\n            if (!this._TextBox)\r\n                this._TextBox.IsReadOnly = !this.IsEditable;\r\n        }\r\n\r\n        ValueChanging = new RoutedPropertyChangingEvent<T>();\r\n        ValueChanged = new RoutedPropertyChangedEvent<T>();\r\n        Parsing = new RoutedEvent<UpDownParsingEventArgs<T>>();\r\n        ParseError = new RoutedEvent<UpDownParseErrorEventArgs>();\r\n\r\n        OnApplyTemplate() {\r\n            super.OnApplyTemplate();\r\n            this.SetTextBox(this.GetTemplateChild(\"Text\"));\r\n            this.SetSpinner(this.GetTemplateChild(\"Spinner\"));\r\n            this.SetTextBoxText();\r\n            if (this._TextBox != null)\r\n                this._TextBox.IsReadOnly = !this.IsEditable;\r\n            this.UpdateVisualState(false);\r\n        }\r\n        private SetTextBox(d: DependencyObject) {\r\n            if (this._TextBox) {\r\n                this._TextBox.GotFocus.off(this.TextBox_GotFocus, this);\r\n                this._TextBox.LostFocus.off(this.TextBox_LostFocus, this);\r\n            }\r\n            if (d instanceof TextBox)\r\n                this._TextBox = <TextBox>d;\r\n            else\r\n                this._TextBox = null;\r\n            this._TextBox.GotFocus.on(this.TextBox_GotFocus, this);\r\n            this._TextBox.LostFocus.on(this.TextBox_LostFocus, this);\r\n            this._Text = this._TextBox.Text;\r\n        }\r\n        private SetSpinner(d: DependencyObject) {\r\n            if (this._Spinner)\r\n                this._Spinner.Spin.off(this.Spinner_Spin, this);\r\n            if (d instanceof Spinner)\r\n                this._Spinner = <Spinner>d;\r\n            else\r\n                this._Spinner = null;\r\n            if (this._Spinner)\r\n                this._Spinner.Spin.on(this.Spinner_Spin, this);\r\n        }\r\n\r\n        OnKeyDown(e: Fayde.Input.KeyEventArgs) {\r\n            super.OnKeyDown(e);\r\n            if (e.Handled)\r\n                return;\r\n            switch (e.Key) {\r\n                case Fayde.Input.Key.Enter:\r\n                    this.ProcessUserInput();\r\n                    e.Handled = true;\r\n                    break;\r\n                case Fayde.Input.Key.Up:\r\n                    this.DoIncrement();\r\n                    e.Handled = true;\r\n                    break;\r\n                case Fayde.Input.Key.Down:\r\n                    this.DoDecrement();\r\n                    e.Handled = true;\r\n                    break;\r\n            }\r\n        }\r\n        OnMouseWheel(e: Fayde.Input.MouseWheelEventArgs) {\r\n            super.OnMouseWheel(e);\r\n            if (e.Handled)\r\n                return;\r\n            if (e.Delta < 0)\r\n                this.DoDecrement();\r\n            else if (0 < e.Delta)\r\n                this.DoIncrement();\r\n            e.Handled = true;\r\n        }\r\n\r\n        ApplyValue(text: string) {\r\n            var e1 = new UpDownParsingEventArgs<T>(text);\r\n            var obj1: any;\r\n            var error: Error = null;\r\n            try {\r\n                obj1 = this.ParseValue(text);\r\n                e1.Value = obj1;\r\n            } catch (err) {\r\n                error = err;\r\n            }\r\n            try {\r\n                this.OnParsing(e1);\r\n            } catch (err) {\r\n            }\r\n            if (error == null) {\r\n                var obj2 = e1.Handled ? e1.Value : obj1;\r\n                var value = this.Value;\r\n                if (this.Value === obj2)\r\n                    this.SetTextBoxText();\r\n                this.Value = obj2;\r\n            } else if (e1.Handled) {\r\n                if (this.Value === e1.Value)\r\n                    this.SetTextBoxText();\r\n                this.Value = e1.Value;\r\n            } else {\r\n                var e2 = new UpDownParseErrorEventArgs(text, error);\r\n                this.OnParseError(e2);\r\n                if (!e2.Handled)\r\n                    this.SetTextBoxText();\r\n            }\r\n        }\r\n        OnParseError(e: UpDownParseErrorEventArgs) {\r\n            this.ParseError.raise(this, e);\r\n        }\r\n        OnParsing(e: UpDownParsingEventArgs<T>) {\r\n            this.Parsing.raise(this, e);\r\n        }\r\n        ParseValue(text: string): T { return; }\r\n        FormatValue(): string { return \"\"; }\r\n\r\n        SelectAllText() {\r\n            if (this._TextBox)\r\n                this._TextBox.SelectAll();\r\n        }\r\n        SetTextBoxText() {\r\n            if (!this._TextBox)\r\n                return;\r\n            this._Text = this.FormatValue() || \"\";\r\n            this._TextBox.Text = this._Text;\r\n            this._TextBox.SelectionStart = this._Text.length;\r\n        }\r\n        private TextBox_LostFocus(sender: any, e: RoutedEventArgs) {\r\n            this.ProcessUserInput();\r\n        }\r\n        private TextBox_GotFocus(sender: any, e: RoutedEventArgs) {\r\n            this.SelectAllText();\r\n        }\r\n\r\n        private Spinner_Spin(sender: any, e: SpinEventArgs) {\r\n            if (this._TextBox)\r\n                this.ProcessUserInput();\r\n            this.OnSpin(e);\r\n        }\r\n        OnSpin(e: SpinEventArgs) {\r\n            if (e.Direction === SpinDirection.Increase)\r\n                this.DoIncrement();\r\n            else\r\n                this.DoDecrement();\r\n        }\r\n\r\n        private ProcessUserInput() {\r\n            if (!this._TextBox || this._Text === this._TextBox.Text)\r\n                return;\r\n            var selectionStart = this._TextBox.SelectionStart;\r\n            this._Text = this._TextBox.Text;\r\n            this.ApplyValue(this._Text);\r\n            if (selectionStart < this._TextBox.Text.length)\r\n                this._TextBox.SelectionStart = selectionStart;\r\n        }\r\n        private DoDecrement() {\r\n            if (this._Spinner && (this._Spinner.ValidSpinDirection & ValidSpinDirections.Decrease) !== ValidSpinDirections.Decrease)\r\n                return;\r\n            this.OnDecrement();\r\n        }\r\n        OnDecrement() { }\r\n        private DoIncrement() {\r\n            if (this._Spinner && (this._Spinner.ValidSpinDirection & ValidSpinDirections.Increase) !== ValidSpinDirections.Increase)\r\n                return;\r\n            this.OnIncrement();\r\n        }\r\n        OnIncrement() { }\r\n    }\r\n    TemplateVisualStates(UpDownBase,\r\n        { GroupName: \"CommonStates\", Name: \"Normal\" },\r\n        { GroupName: \"CommonStates\", Name: \"MouseOver\" },\r\n        { GroupName: \"CommonStates\", Name: \"Pressed\" },\r\n        { GroupName: \"CommonStates\", Name: \"Disabled\" },\r\n        { GroupName: \"FocusStates\", Name: \"Unfocused\" },\r\n        { GroupName: \"FocusStates\", Name: \"Focused\" });\r\n    TemplateParts(UpDownBase,\r\n        { Name: \"Text\", Type: TextBox },\r\n        { Name: \"Spinner\", Type: Spinner });\r\n}","/// <reference path=\"UpDownBase.ts\" />\r\n\r\nmodule Fayde.Controls {\r\n    export interface IOutValue {\r\n        Value: any;\r\n    }\r\n\r\n    export class DomainUpDown extends Control {\r\n        static ValueProperty = DependencyProperty.Register(\"Value\", () => Object, DomainUpDown, null, (d, args) => (<DomainUpDown>d)._Coercer.OnValueChanged(args.OldValue, args.NewValue));\r\n        static IsEditableProperty = DependencyProperty.Register(\"IsEditable\", () => Boolean, DomainUpDown, false, (d, args) => (<DomainUpDown>d)._Coercer.UpdateIsEditable());\r\n        static SpinnerStyleProperty = DependencyProperty.Register(\"SpinnerStyle\", () => Style, DomainUpDown);\r\n        static CurrentIndexProperty = DependencyProperty.Register(\"CurrentIndex\", () => Number, DomainUpDown, -1, (d, args) => (<DomainUpDown>d)._Coercer.OnCurrentIndexChanged(args.OldValue, args.NewValue));\r\n        static IsCyclicProperty = DependencyProperty.Register(\"IsCyclic\", () => Boolean, DomainUpDown, false, (d, args) => (<DomainUpDown>d)._OnIsCyclicChanged(args));\r\n        static InvalidInputActionProperty = DependencyProperty.RegisterFull(\"InvalidInputAction\", () => new Enum(InvalidInputAction), DomainUpDown, InvalidInputAction.UseFallbackItem, undefined, undefined, false, inputActionValidator, true);\r\n        static FallbackItemProperty = DependencyProperty.Register(\"FallbackItem\", () => Object, DomainUpDown, null);\r\n        static ItemsSourceProperty = DependencyProperty.Register(\"ItemsSource\", () => nullstone.IEnumerable_, DomainUpDown, undefined, (d, args) => (<DomainUpDown>d)._OnItemsSourceChanged(args.OldValue, args.NewValue));\r\n        static ItemTemplateProperty = DependencyProperty.Register(\"ItemTemplate\", () => DataTemplate, DomainUpDown);\r\n\r\n        Value: any;\r\n        IsEditable: boolean;\r\n        SpinnerStyle: Style;\r\n        CurrentIndex: number;\r\n        IsCyclic: boolean;\r\n        InvalidInputAction: InvalidInputAction;\r\n        FallbackItem: any;\r\n        ItemsSource: nullstone.IEnumerable<any>;\r\n        ItemTemplate: DataTemplate;\r\n        Items: Internal.ObservableObjectCollection;\r\n\r\n        OnValueChanged (oldItem: any, newItem: any) {\r\n        }\r\n\r\n        OnCurrentIndexChanged (oldIndex: number, newIndex: number) {\r\n            this.UpdateValidSpinDirection();\r\n        }\r\n\r\n        private _OnIsCyclicChanged (args: IDependencyPropertyChangedEventArgs) {\r\n            this.UpdateValidSpinDirection();\r\n        }\r\n\r\n        private _OnItemsSourceChanged (oldItemsSource: nullstone.IEnumerable<any>, newItemsSource: nullstone.IEnumerable<any>) {\r\n            var cc = Collections.INotifyCollectionChanged_.as(oldItemsSource);\r\n            if (cc)\r\n                cc.CollectionChanged.off(this._ItemsSourceModified, this);\r\n\r\n            this.Items.IsReadOnly = false;\r\n            this.Items.Clear();\r\n            if (!newItemsSource)\r\n                return;\r\n\r\n            var en = nullstone.IEnumerable_.as(newItemsSource);\r\n            var arr: any[];\r\n            if (en) {\r\n                var enu = en.getEnumerator();\r\n                arr = [];\r\n                while (enu.moveNext()) {\r\n                    arr.push(enu.current);\r\n                }\r\n            } else if (newItemsSource instanceof Array) {\r\n                arr = <any[]><any>newItemsSource;\r\n            }\r\n            if (arr) {\r\n                this.Items.AddRange(arr);\r\n                this.Items.IsReadOnly = true;\r\n            }\r\n\r\n            cc = Collections.INotifyCollectionChanged_.as(newItemsSource);\r\n            if (cc)\r\n                cc.CollectionChanged.on(this._ItemsSourceModified, this);\r\n        }\r\n\r\n        private _ItemsSourceModified (sender: any, e: Collections.CollectionChangedEventArgs) {\r\n            var coll = <Collections.ObservableCollection<any>>sender;\r\n            var index: number;\r\n            this.Items.IsReadOnly = false;\r\n            switch (e.Action) {\r\n                case Collections.CollectionChangedAction.Add:\r\n                    index = e.NewStartingIndex;\r\n                    for (var en = nullstone.IEnumerator_.fromArray(e.NewItems); en.moveNext();) {\r\n                        this.Items.Insert(index, en.current);\r\n                        index++;\r\n                    }\r\n                    break;\r\n                case Collections.CollectionChangedAction.Remove:\r\n                    for (var en = nullstone.IEnumerator_.fromArray(e.OldItems); en.moveNext();) {\r\n                        this.Items.RemoveAt(e.OldStartingIndex);\r\n                    }\r\n                    break;\r\n                case Collections.CollectionChangedAction.Replace:\r\n                    index = e.NewStartingIndex;\r\n                    for (var en = nullstone.IEnumerator_.fromArray(e.NewItems); en.moveNext();) {\r\n                        this.Items.SetValueAt(index, en.current);\r\n                        index++;\r\n                    }\r\n                    break;\r\n                case Collections.CollectionChangedAction.Reset:\r\n                    this.Items.Clear();\r\n                    this.Items.AddRange(coll.ToArray());\r\n                    break;\r\n            }\r\n            this.Items.IsReadOnly = true;\r\n        }\r\n\r\n        private _OnItemsChanged (sender: any, e: Collections.CollectionChangedEventArgs) {\r\n            this._Coercer.UpdateTextBoxText();\r\n        }\r\n\r\n        ValueChanging = new RoutedPropertyChangingEvent<number>();\r\n        ParseError = new RoutedEvent<UpDownParseErrorEventArgs>();\r\n\r\n        get ValueMemberPath (): string {\r\n            var vb = this.ValueMemberBinding;\r\n            return vb ? vb.Path.Path : null;\r\n        }\r\n\r\n        set ValueMemberPath (value: string) {\r\n            var vb = this.ValueMemberBinding;\r\n            if (!value) {\r\n                if (!vb)\r\n                    return;\r\n                var binding1 = new Fayde.Data.Binding();\r\n                binding1.Converter = vb.Converter;\r\n                binding1.ConverterCulture = vb.ConverterCulture;\r\n                binding1.ConverterParameter = vb.ConverterParameter;\r\n                this.ValueMemberBinding = binding1;\r\n            } else if (vb != null) {\r\n                var binding1 = new Fayde.Data.Binding(value);\r\n                binding1.Converter = vb.Converter;\r\n                binding1.ConverterCulture = vb.ConverterCulture;\r\n                binding1.ConverterParameter = vb.ConverterParameter;\r\n                this.ValueMemberBinding = binding1;\r\n            } else\r\n                this.ValueMemberBinding = new Fayde.Data.Binding(value);\r\n        }\r\n\r\n        private _ValueBindingEvaluator: Internal.BindingSourceEvaluator<string> = null;\r\n\r\n        get ValueMemberBinding (): Fayde.Data.Binding {\r\n            var vbe = this._ValueBindingEvaluator;\r\n            return vbe ? vbe.ValueBinding : null;\r\n        }\r\n\r\n        set ValueMemberBinding (value: Fayde.Data.Binding) {\r\n            this._ValueBindingEvaluator = new Internal.BindingSourceEvaluator<string>(value);\r\n        }\r\n\r\n        private _Coercer: Internal.IDomainCoercer;\r\n        private _SpinFlow: Internal.ISpinFlow;\r\n        private _CanEditByFocus = false;\r\n\r\n        constructor () {\r\n            super();\r\n            this.DefaultStyleKey = DomainUpDown;\r\n\r\n            Object.defineProperty(this, \"Items\", {value: new Internal.ObservableObjectCollection(), writable: false});\r\n            this.Items.CollectionChanged.on(this._OnItemsChanged, this);\r\n\r\n            this._Coercer = new Internal.DomainCoercer(this,\r\n                    val => this.SetCurrentValue(DomainUpDown.ValueProperty, val),\r\n                    val => this.SetCurrentValue(DomainUpDown.CurrentIndexProperty, val));\r\n        }\r\n\r\n        OnApplyTemplate () {\r\n            super.OnApplyTemplate();\r\n\r\n            if (this._SpinFlow)\r\n                this._SpinFlow.Dispose();\r\n            this._SpinFlow = new Internal.SpinFlow(this, <Spinner>this.GetTemplateChild(\"Spinner\", Spinner));\r\n\r\n            this._Coercer.Detach();\r\n            this._Coercer.Attach(<TextBox>this.GetTemplateChild(\"Text\", TextBox));\r\n\r\n            this.UpdateValidSpinDirection();\r\n            this.UpdateVisualState();\r\n        }\r\n\r\n        OnGotFocus (e: RoutedEventArgs) {\r\n            super.OnGotFocus(e);\r\n            this.UpdateVisualState();\r\n            if (this.IsEnabled)\r\n                this.TryEnterEditMode();\r\n        }\r\n\r\n        OnLostFocus (e: RoutedEventArgs) {\r\n            super.OnLostFocus(e);\r\n            this.UpdateVisualState();\r\n            if (this.IsEnabled)\r\n                this._Coercer.EscapeFocus();\r\n        }\r\n\r\n        OnMouseEnter (e: Fayde.Input.MouseEventArgs) {\r\n            super.OnMouseEnter(e);\r\n            this.UpdateVisualState();\r\n        }\r\n\r\n        OnMouseLeave (e: Fayde.Input.MouseEventArgs) {\r\n            super.OnMouseLeave(e);\r\n            this.UpdateVisualState();\r\n        }\r\n\r\n        OnMouseLeftButtonDown (e: Fayde.Input.MouseButtonEventArgs) {\r\n            super.OnMouseLeftButtonDown(e);\r\n            this.UpdateVisualState();\r\n        }\r\n\r\n        OnMouseLeftButtonUp (e: Fayde.Input.MouseButtonEventArgs) {\r\n            super.OnMouseLeftButtonUp(e);\r\n            this.UpdateVisualState();\r\n            if (this.IsEnabled && !this._Coercer.IsEditing) {\r\n                this.Focus();\r\n                this.TryEnterEditMode();\r\n            }\r\n        }\r\n\r\n        GoToStates (gotoFunc: (state: string) => boolean) {\r\n            super.GoToStates(gotoFunc);\r\n            this.GoToStateEditing(gotoFunc);\r\n            this.GoToStateValid(gotoFunc);\r\n        }\r\n\r\n        GoToStateEditing (gotoFunc: (state: string) => boolean): boolean {\r\n            return gotoFunc(this._Coercer.IsEditing ? \"Edit\" : \"Display\");\r\n        }\r\n\r\n        GoToStateValid (gotoFunc: (state: string) => boolean): boolean {\r\n            return gotoFunc(this._Coercer.IsInvalidInput ? \"InvalidDomain\" : \"ValidDomain\");\r\n        }\r\n\r\n        private UpdateValidSpinDirection () {\r\n            if (!this._SpinFlow)\r\n                return;\r\n            var isCyclic = this.IsCyclic;\r\n            var curIndex = this.CurrentIndex;\r\n            this._SpinFlow.UpdateValid(isCyclic || curIndex > 0, isCyclic || curIndex < this.Items.Count - 1);\r\n        }\r\n\r\n        private TryEnterEditMode () {\r\n            if (this._Coercer.IsEditing)\r\n                return;\r\n            if (!this._CanEditByFocus && this.IsEditable)\r\n                this._Coercer.IsEditing = true;\r\n        }\r\n\r\n        OnIsEditingChanged (isEditing: boolean) {\r\n            this.UpdateVisualState();\r\n        }\r\n\r\n        OnIsInvalidInputChanged (isInvalid: boolean) {\r\n            this.UpdateVisualState();\r\n        }\r\n\r\n        OnSpin () {\r\n            this._Coercer.ProcessUserInput();\r\n        }\r\n\r\n        OnIncrement () {\r\n            if (this.CurrentIndex < this.Items.Count - 1)\r\n                this.CurrentIndex++;\r\n            else if (this.IsCyclic)\r\n                this.CurrentIndex = 0;\r\n            this._Coercer.IsInvalidInput = false;\r\n            this._CanEditByFocus = true;\r\n            this.Focus();\r\n            window.setTimeout(() => this._CanEditByFocus = false, 1);\r\n        }\r\n\r\n        OnDecrement () {\r\n            if (this.CurrentIndex > 0)\r\n                this.CurrentIndex--;\r\n            else if (this.IsCyclic)\r\n                this.CurrentIndex = this.Items.Count - 1;\r\n            this._Coercer.IsInvalidInput = false;\r\n            this._CanEditByFocus = true;\r\n            this.Focus();\r\n            window.setTimeout(() => this._CanEditByFocus = false, 1);\r\n        }\r\n\r\n        TryParseValue (text: string, ov: IOutValue): boolean {\r\n            if (!text) {\r\n                ov.Value = this.Value;\r\n                return true;\r\n            }\r\n            var vb = this._ValueBindingEvaluator;\r\n            var enu = this.Items.getEnumerator();\r\n            while (enu.moveNext() && ov.Value == null) {\r\n                ov.Value = matchItem(vb, enu.current, text);\r\n            }\r\n            if (ov.Value != null)\r\n                return true;\r\n\r\n            ov.Value = this.Value;\r\n            if (this.InvalidInputAction === InvalidInputAction.TextBoxCannotLoseFocus)\r\n                return false;\r\n\r\n            if (this.InvalidInputAction === InvalidInputAction.UseFallbackItem) {\r\n                ov.Value = this.FallbackItem;\r\n                if (ov.Value == null || !this.Items.Contains(ov.Value))\r\n                    throw new ArgumentException(\"Cannot parse value.\");\r\n            }\r\n            return true;\r\n        }\r\n\r\n        FormatValue (): string {\r\n            var val = this.Value;\r\n            if (!val)\r\n                return \"\";\r\n            if (!this.Items.Contains(val))\r\n                return \"\";\r\n            try {\r\n                var vb = this._ValueBindingEvaluator;\r\n                if (vb)\r\n                    val = vb.GetDynamicValue(val);\r\n            } catch (err) {\r\n            }\r\n            if (typeof val === \"string\")\r\n                return val;\r\n            return \"\";\r\n        }\r\n    }\r\n    TemplateVisualStates(DomainUpDown,\r\n        {GroupName: \"CommonStates\", Name: \"Normal\"},\r\n        {GroupName: \"CommonStates\", Name: \"MouseOver\"},\r\n        {GroupName: \"CommonStates\", Name: \"Pressed\"},\r\n        {GroupName: \"CommonStates\", Name: \"Disabled\"},\r\n        {GroupName: \"FocusStates\", Name: \"Unfocused\"},\r\n        {GroupName: \"FocusStates\", Name: \"Focused\"},\r\n        {GroupName: \"ValidationStates\", Name: \"Valid\"},\r\n        {GroupName: \"ValidationStates\", Name: \"InvalidUnfocused\"},\r\n        {GroupName: \"ValidationStates\", Name: \"InvalidFocused\"},\r\n        {GroupName: \"DomainStates\", Name: \"ValidDomain\"},\r\n        {GroupName: \"DomainStates\", Name: \"InvalidDomain\"});\r\n\r\n\r\n    function inputActionValidator (d: DependencyObject, propd: DependencyProperty, value: any): boolean {\r\n        switch (value) {\r\n            case InvalidInputAction.UseFallbackItem:\r\n            case InvalidInputAction.TextBoxCannotLoseFocus:\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    function matchItem (evaluator: Internal.BindingSourceEvaluator<string>, item: any, text: string): boolean {\r\n        if (!evaluator)\r\n            return text === item.toString();\r\n        return text === (evaluator.GetDynamicValue(item) || \"\");\r\n    }\r\n}","module Fayde.Controls {\r\n\r\n    var dragIncrement = 1;\r\n    var keyIncrement = 10;\r\n\r\n    export class GridSplitter extends Control {\r\n        private _Helper: Internal.GridSplitterResizer;\r\n        private _HorizontalTemplate: FrameworkElement = null;\r\n        private _VerticalTemplate: FrameworkElement = null;\r\n        private _DragStart: Point = null;\r\n        private _IsDragging = false;\r\n\r\n        constructor() {\r\n            super();\r\n            this.DefaultStyleKey = GridSplitter;\r\n            this._Helper = new Internal.GridSplitterResizer(this);\r\n            this.LayoutUpdated.on(this._OnLayoutUpdated, this);\r\n        }\r\n\r\n        OnApplyTemplate() {\r\n            super.OnApplyTemplate();\r\n            this._HorizontalTemplate = <FrameworkElement>this.GetTemplateChild(\"HorizontalTemplate\", FrameworkElement);\r\n            this._VerticalTemplate = <FrameworkElement>this.GetTemplateChild(\"VerticalTemplate\", FrameworkElement);\r\n            this._Helper.UpdateResizeDirection(this);\r\n            this._OnResizeDirectionChanged();\r\n            this.UpdateVisualState();\r\n        }\r\n        private _OnLayoutUpdated(sender: any, e: any) {\r\n            if (this._Helper && this._Helper.UpdateResizeDirection(this))\r\n                this._OnResizeDirectionChanged();\r\n        }\r\n        private _OnResizeDirectionChanged() {\r\n            var isColumns = this._Helper.Direction === Internal.GridResizeDirection.Columns;\r\n\r\n            this.Cursor = isColumns ? CursorType.SizeWE : CursorType.SizeNS;\r\n\r\n            var ht = this._HorizontalTemplate;\r\n            if (ht)\r\n                ht.Visibility = !isColumns ? Visibility.Visible : Visibility.Collapsed;\r\n            var vt = this._VerticalTemplate;\r\n            if (vt)\r\n                vt.Visibility = isColumns ? Visibility.Visible : Visibility.Collapsed;\r\n        }\r\n\r\n        OnGotFocus(e: RoutedEventArgs) {\r\n            super.OnGotFocus(e);\r\n            this.UpdateVisualState();\r\n        }\r\n        OnLostFocus(e: RoutedEventArgs) {\r\n            super.OnLostFocus(e);\r\n            this.UpdateVisualState();\r\n        }\r\n        OnKeyDown(e: Input.KeyEventArgs) {\r\n            super.OnKeyDown(e);\r\n            if (e.Key === Fayde.Input.Key.Escape) {\r\n                if (!this._Helper)\r\n                    return;\r\n                this._Helper = null;\r\n                e.Handled = true;\r\n                return;\r\n            }\r\n            if (!this.IsFocused || !this.IsEnabled)\r\n                return;\r\n            var horiz = 0;\r\n            var vert = 0;\r\n            switch (e.Key) {\r\n                case Fayde.Input.Key.Left:\r\n                    horiz = -keyIncrement;\r\n                    break;\r\n                case Fayde.Input.Key.Up:\r\n                    vert = -keyIncrement;\r\n                    break;\r\n                case Fayde.Input.Key.Right:\r\n                    horiz = keyIncrement;\r\n                    break;\r\n                case Fayde.Input.Key.Down:\r\n                    vert = keyIncrement;\r\n                    break;\r\n            }\r\n            if (this.FlowDirection === FlowDirection.RightToLeft)\r\n                e.Handled = this._HandleMove(-horiz, vert, true);\r\n            else\r\n                e.Handled = this._HandleMove(horiz, vert, true);\r\n        }\r\n\r\n        OnMouseLeftButtonDown(e: Input.MouseButtonEventArgs) {\r\n            super.OnMouseLeftButtonDown(e);\r\n            if (!this.IsEnabled)\r\n                return;\r\n            this._IsDragging = this.CaptureMouse();\r\n            if (!this._IsDragging)\r\n                return;\r\n            this._DragStart = this._GetTransformedPos(e);\r\n            this.Focus();\r\n            this.InitHelper();\r\n        }\r\n        OnMouseLeftButtonUp(e: Input.MouseButtonEventArgs) {\r\n            super.OnMouseLeftButtonUp(e);\r\n            this.ReleaseMouseCapture();\r\n            this._IsDragging = false;\r\n            this._Helper = null;\r\n            this.UpdateVisualState();\r\n        }\r\n        OnMouseMove(e: Input.MouseEventArgs) {\r\n            super.OnMouseMove(e);\r\n            if (!this._IsDragging)\r\n                return;\r\n            var pos = this._GetTransformedPos(e);\r\n            if (pos)\r\n                this._HandleMove(pos.x - this._DragStart.x, pos.y - this._DragStart.y, false);\r\n        }\r\n\r\n        private InitHelper() {\r\n            var parent = <Grid>this.VisualParent;\r\n            if (!(parent instanceof Grid))\r\n                return;\r\n            this._Helper = new Internal.GridSplitterResizer(this);\r\n            if (this._Helper.Setup(this, parent))\r\n                return;\r\n            this._Helper = null;\r\n        }\r\n        private _HandleMove(horiz: number, vert: number, isKeyboard: boolean): boolean {\r\n            if (isKeyboard) {\r\n                if (this._Helper)\r\n                    return false;\r\n                this.InitHelper();\r\n            }\r\n            if (!this._Helper)\r\n                return false;\r\n            if (!this._Helper.Move(<Grid>this.VisualParent, horiz, vert) || isKeyboard)\r\n                this._Helper = null;\r\n            return true;\r\n        }\r\n        private _GetTransformedPos(e: Input.MouseEventArgs) {\r\n            if (this.RenderTransform)\r\n                return this.RenderTransform.Transform(e.GetPosition(this));\r\n            return e.GetPosition(this);\r\n        }\r\n    }\r\n}","module Fayde.Controls {\r\n    export class HeaderedItemsControl extends ItemsControl {\r\n        private _HeaderIsItem: boolean = false;\r\n        private _ItemsControlHelper: Internal.ItemsControlHelper;\r\n\r\n        static HeaderProperty = DependencyProperty.Register(\"Header\", () => Object, HeaderedItemsControl, undefined, (d: HeaderedItemsControl, args) => d.OnHeaderChanged(args.OldValue, args.NewValue));\r\n        static HeaderTemplateProperty = DependencyProperty.Register(\"HeaderTemplate\", () => DataTemplate, HeaderedItemsControl, undefined, (d: HeaderedItemsControl, args) => d.OnHeaderTemplateChanged(args.OldValue, args.NewValue));\r\n        static ItemContainerStyleProperty = DependencyProperty.Register(\"ItemContainerStyle\", () => Style, HeaderedItemsControl, undefined, (d: HeaderedItemsControl, args) => d.OnItemContainerStyleChanged(args));\r\n        Header: any;\r\n        HeaderTemplate: DataTemplate;\r\n        ItemContainerStyle: Style;\r\n\r\n        OnHeaderChanged (oldHeader: any, newHeader: any) {\r\n        }\r\n\r\n        OnHeaderTemplateChanged (oldHeaderTemplate: DataTemplate, newHeaderTemplate: DataTemplate) {\r\n        }\r\n\r\n        private OnItemContainerStyleChanged (args: IDependencyPropertyChangedEventArgs) {\r\n            this._ItemsControlHelper.UpdateItemContainerStyle(args.NewValue);\r\n        }\r\n\r\n        constructor () {\r\n            super();\r\n            this.DefaultStyleKey = HeaderedItemsControl;\r\n            this._ItemsControlHelper = new Internal.ItemsControlHelper(this);\r\n        }\r\n\r\n        OnApplyTemplate () {\r\n            super.OnApplyTemplate();\r\n            this._ItemsControlHelper.OnApplyTemplate();\r\n        }\r\n\r\n        PrepareContainerForItem (element: UIElement, item: any) {\r\n            var control = <Control>element;\r\n            if (!(control instanceof Control)) control = null;\r\n\r\n            var ics = this.ItemContainerStyle;\r\n            if (ics != null && control != null && control.Style == null)\r\n                control.SetValue(FrameworkElement.StyleProperty, ics);\r\n\r\n            var hic = <HeaderedItemsControl>element;\r\n            if (hic instanceof HeaderedItemsControl)\r\n                HeaderedItemsControl.PrepareHeaderedItemsControlContainer(hic, item, this, ics);\r\n            super.PrepareContainerForItem(element, item);\r\n        }\r\n\r\n        static PrepareHeaderedItemsControlContainer (control: HeaderedItemsControl, item: any, parentItemsControl: ItemsControl, parentItemContainerStyle: Style) {\r\n            if (control === item)\r\n                return;\r\n            var itemTemplate = parentItemsControl.ItemTemplate;\r\n            if (itemTemplate != null)\r\n                control.SetValue(ItemsControl.ItemTemplateProperty, itemTemplate);\r\n            if (parentItemContainerStyle != null && hasDefaultValue(control, HeaderedItemsControl.ItemContainerStyleProperty))\r\n                control.SetValue(HeaderedItemsControl.ItemContainerStyleProperty, parentItemContainerStyle);\r\n            if (control._HeaderIsItem || hasDefaultValue(control, HeaderedItemsControl.HeaderProperty)) {\r\n                control.Header = item;\r\n                control._HeaderIsItem = true;\r\n            }\r\n            if (itemTemplate != null)\r\n                control.SetValue(HeaderedItemsControl.HeaderTemplateProperty, itemTemplate);\r\n            if (parentItemContainerStyle != null && control.Style == null)\r\n                control.SetValue(FrameworkElement.StyleProperty, parentItemContainerStyle);\r\n            var hdt = <HierarchicalDataTemplate>itemTemplate;\r\n            if (!(hdt instanceof HierarchicalDataTemplate))\r\n                return;\r\n            var isexpr = hdt.GetBindingExpression(HierarchicalDataTemplate.ItemsSourceProperty);\r\n            if (isexpr) {\r\n                var binding = new Data.Binding(isexpr.ParentBinding);\r\n                binding.Source = control.Header;\r\n                control.SetBinding(ItemsControl.ItemsSourceProperty, binding);\r\n            }\r\n            if (hdt.ItemTemplate !== undefined && control.ItemTemplate === itemTemplate) {\r\n                control.ClearValue(ItemsControl.ItemTemplateProperty);\r\n                if (hdt.ItemTemplate != null)\r\n                    control.ItemTemplate = hdt.ItemTemplate;\r\n            }\r\n            if (hdt.ItemContainerStyle !== undefined && control.ItemContainerStyle === parentItemContainerStyle) {\r\n                control.ClearValue(HeaderedItemsControl.ItemContainerStyleProperty);\r\n                if (hdt.ItemContainerStyle != null)\r\n                    control.ItemContainerStyle = hdt.ItemContainerStyle;\r\n            }\r\n        }\r\n    }\r\n\r\n    function hasDefaultValue (control: Control, propd: DependencyProperty): boolean {\r\n        return control.ReadLocalValue(propd) === DependencyProperty.UnsetValue;\r\n    }\r\n}","/// <reference path=\"Primitives/MenuBase.ts\" />\r\n\r\nmodule Fayde.Controls {\r\n    export class MenuItem extends Fayde.Controls.HeaderedItemsControl {\r\n        ParentMenuBase: Primitives.MenuBase;\r\n        Click = new RoutedEvent<RoutedEventArgs>();\r\n\r\n        static CommandProperty = DependencyProperty.Register(\"Command\", () => Input.ICommand_, MenuItem, undefined, (d: MenuItem, args) => d.OnCommandChanged(args));\r\n        static CommandParameterProperty = DependencyProperty.Register(\"CommandParameter\", () => Object, MenuItem, undefined, (d: MenuItem, args) => d.OnCommandParameterChanged(args));\r\n        static IconProperty = DependencyProperty.Register(\"Icon\", () => Object, MenuItem);\r\n        Command: Input.ICommand;\r\n        CommandParameter: any;\r\n        Icon: any;\r\n\r\n        private OnCommandChanged (args: IDependencyPropertyChangedEventArgs) {\r\n            var oldcmd = Input.ICommand_.as(args.OldValue);\r\n            if (oldcmd)\r\n                oldcmd.CanExecuteChanged.off(this._CanExecuteChanged, this);\r\n            var newcmd = Input.ICommand_.as(args.NewValue);\r\n            if (newcmd)\r\n                newcmd.CanExecuteChanged.on(this._CanExecuteChanged, this);\r\n            this.UpdateIsEnabled();\r\n        }\r\n\r\n        private _CanExecuteChanged (sender: any, e: any) {\r\n            this.UpdateIsEnabled();\r\n        }\r\n\r\n        private OnCommandParameterChanged (args: IDependencyPropertyChangedEventArgs) {\r\n            this.UpdateIsEnabled();\r\n        }\r\n\r\n\r\n        constructor () {\r\n            super();\r\n            this.DefaultStyleKey = MenuItem;\r\n            this.UpdateIsEnabled();\r\n        }\r\n\r\n        OnApplyTemplate () {\r\n            super.OnApplyTemplate();\r\n            this.UpdateVisualState(false);\r\n        }\r\n\r\n        private UpdateIsEnabled () {\r\n            this.IsEnabled = this.Command == null || this.Command.CanExecute(this.CommandParameter);\r\n            this.UpdateVisualState(true);\r\n        }\r\n\r\n        OnGotFocus (e: RoutedEventArgs) {\r\n            super.OnGotFocus(e);\r\n            this.UpdateVisualState(true);\r\n        }\r\n\r\n        OnLostFocus (e: RoutedEventArgs) {\r\n            super.OnLostFocus(e);\r\n            this.UpdateVisualState(true);\r\n        }\r\n\r\n        OnMouseEnter (e: Input.MouseEventArgs) {\r\n            super.OnMouseEnter(e);\r\n            this.Focus();\r\n            this.UpdateVisualState(true);\r\n        }\r\n\r\n        OnMouseLeave (e: Input.MouseEventArgs) {\r\n            super.OnMouseLeave(e);\r\n            if (this.ParentMenuBase != null)\r\n                this.ParentMenuBase.Focus();\r\n            this.UpdateVisualState(true);\r\n        }\r\n\r\n        OnMouseLeftButtonDown (e: Input.MouseButtonEventArgs) {\r\n            if (!e.Handled) {\r\n                this.OnClick();\r\n                e.Handled = true;\r\n            }\r\n            super.OnMouseLeftButtonDown(e);\r\n        }\r\n\r\n        OnMouseRightButtonDown (e: Input.MouseButtonEventArgs) {\r\n            if (!e.Handled) {\r\n                this.OnClick();\r\n                e.Handled = true;\r\n            }\r\n            super.OnMouseRightButtonDown(e);\r\n        }\r\n\r\n        OnKeyDown (e: Input.KeyEventArgs) {\r\n            if (!e.Handled && Input.Key.Enter === e.Key) {\r\n                this.OnClick();\r\n                e.Handled = true;\r\n            }\r\n            super.OnKeyDown(e);\r\n        }\r\n\r\n        private OnClick () {\r\n            var contextMenu = <ContextMenu>this.ParentMenuBase;\r\n            if (contextMenu instanceof ContextMenu)\r\n                contextMenu.ChildMenuItemClicked();\r\n            this.Click.raise(this, new RoutedEventArgs());\r\n            if (this.Command == null || !this.Command.CanExecute(this.CommandParameter))\r\n                return;\r\n            this.Command.Execute(this.CommandParameter);\r\n        }\r\n\r\n        GoToStateCommon (gotoFunc: (state: string) => boolean): boolean {\r\n            if (!this.IsEnabled)\r\n                return gotoFunc(\"Disabled\");\r\n            return gotoFunc(\"Normal\");\r\n        }\r\n    }\r\n    TemplateVisualStates(MenuItem,\r\n        {GroupName: \"CommonStates\", Name: \"Normal\"},\r\n        {GroupName: \"CommonStates\", Name: \"Disabled\"},\r\n        {GroupName: \"FocusStates\", Name: \"Unfocused\"},\r\n        {GroupName: \"FocusStates\", Name: \"Focused\"});\r\n}","/// <reference path=\"UpDownBase.ts\" />\r\n/// <reference path=\"Spinner.ts\" />\r\n\r\nmodule Fayde.Controls {\r\n    export class NumericUpDown extends Control {\r\n        static MinimumProperty = DependencyProperty.Register(\"Minimum\", () => Number, NumericUpDown, 0.0, (d: NumericUpDown, args) => d._Coercer.OnMinimumChanged(args.OldValue, args.NewValue));\r\n        static MaximumProperty = DependencyProperty.Register(\"Maximum\", () => Number, NumericUpDown, 100.0, (d: NumericUpDown, args) => d._Coercer.OnMaximumChanged(args.OldValue, args.NewValue));\r\n        static ValueProperty = DependencyProperty.Register(\"Value\", () => Number, NumericUpDown, 0.0, (d: NumericUpDown, args) => d._Coercer.OnValueChanged(args.OldValue, args.NewValue));\r\n        static IncrementProperty = DependencyProperty.Register(\"Increment\", () => Number, NumericUpDown, 1.0, (d: NumericUpDown, args) => d.OnIncrementChanged(args.OldValue, args.NewValue));\r\n        static DecimalPlacesProperty = DependencyProperty.Register(\"DecimalPlaces\", () => Number, NumericUpDown, 0, (d: NumericUpDown, args) => d._Coercer.OnDecimalPlacesChanged(args.OldValue, args.NewValue));\r\n        static SpinnerStyleProperty = DependencyProperty.Register(\"SpinnerStyle\", () => Style, NumericUpDown);\r\n        static IsEditableProperty = DependencyProperty.Register(\"IsEditable\", () => Boolean, NumericUpDown, true, (d: NumericUpDown, args) => d._Formatter.UpdateIsEditable());\r\n\r\n        Minimum: number;\r\n        Maximum: number;\r\n        Value: number;\r\n        Increment: number;\r\n        DecimalPlaces: number;\r\n        SpinnerStyle: Style;\r\n        IsEditable: boolean;\r\n\r\n        OnMinimumChanged (oldMinimum: number, newMinimum: number) {\r\n            this.UpdateValidSpinDirection();\r\n        }\r\n\r\n        OnMaximumChanged (oldMaximum: number, newMaximum: number) {\r\n            this.UpdateValidSpinDirection();\r\n        }\r\n\r\n        OnValueChanged (oldValue: number, newValue: number) {\r\n            this.UpdateValidSpinDirection();\r\n            if (this._Formatter)\r\n                this._Formatter.UpdateTextBoxText();\r\n        }\r\n\r\n        OnIncrementChanged (oldIncrement: number, newIncrement: number) {\r\n        }\r\n\r\n        OnDecimalPlacesChanged (oldDecimalPlaces: number, newDecimalPlaces: number) {\r\n        }\r\n\r\n        Parsing = new RoutedEvent<UpDownParsingEventArgs<number>>();\r\n        ParseError = new RoutedEvent<UpDownParseErrorEventArgs>();\r\n\r\n        private _Coercer: Internal.IFormattedRangeCoercer;\r\n        private _Formatter: Internal.ITextBoxFormatter;\r\n        private _SpinFlow: Internal.ISpinFlow;\r\n\r\n        constructor () {\r\n            super();\r\n            this.DefaultStyleKey = NumericUpDown;\r\n            this._Coercer = new Internal.FormattedRangeCoercer(this,\r\n                (val) => this.SetCurrentValue(NumericUpDown.MaximumProperty, val),\r\n                (val) => this.SetCurrentValue(NumericUpDown.ValueProperty, val),\r\n                () => {\r\n                    if (this._Formatter) this._Formatter.UpdateTextBoxText();\r\n                });\r\n        }\r\n\r\n        OnApplyTemplate () {\r\n            super.OnApplyTemplate();\r\n\r\n            if (this._SpinFlow)\r\n                this._SpinFlow.Dispose();\r\n            this._SpinFlow = new Internal.SpinFlow(this, <Spinner>this.GetTemplateChild(\"Spinner\", Spinner));\r\n\r\n            if (this._Formatter)\r\n                this._Formatter.Dispose();\r\n            this._Formatter = new Internal.TextBoxFormatter<number>(this, <TextBox>this.GetTemplateChild(\"Text\", TextBox),\r\n                (val) => this.SetCurrentValue(NumericUpDown.ValueProperty, val));\r\n\r\n            this.UpdateValidSpinDirection();\r\n            this.UpdateVisualState(false);\r\n        }\r\n\r\n        private UpdateValidSpinDirection () {\r\n            if (!this._SpinFlow)\r\n                return;\r\n            var val = this.Value;\r\n            this._SpinFlow.UpdateValid(val < this.Maximum, val > this.Minimum);\r\n        }\r\n\r\n        ParseValue (text: string) {\r\n            return parseFloat(text);\r\n        }\r\n\r\n        FormatValue (val: number): string {\r\n            return val.toFixed(this.DecimalPlaces);\r\n        }\r\n\r\n        OnSpin () {\r\n            this._Formatter.ProcessUserInput();\r\n        }\r\n\r\n        OnIncrement () {\r\n            this._Coercer.AddToValue(this.Increment);\r\n        }\r\n\r\n        OnDecrement () {\r\n            this._Coercer.AddToValue(-this.Increment);\r\n        }\r\n    }\r\n    TemplateVisualStates(NumericUpDown,\r\n        {GroupName: \"CommonStates\", Name: \"Normal\"},\r\n        {GroupName: \"CommonStates\", Name: \"MouseOver\"},\r\n        {GroupName: \"CommonStates\", Name: \"Pressed\"},\r\n        {GroupName: \"CommonStates\", Name: \"Disabled\"},\r\n        {GroupName: \"FocusStates\", Name: \"Unfocused\"},\r\n        {GroupName: \"FocusStates\", Name: \"Focused\"},\r\n        {GroupName: \"ValidationStates\", Name: \"Valid\"},\r\n        {GroupName: \"ValidationStates\", Name: \"InvalidUnfocused\"},\r\n        {GroupName: \"ValidationStates\", Name: \"InvalidFocused\"});\r\n    TemplateParts(NumericUpDown,\r\n        {Name: \"Text\", Type: TextBox},\r\n        {Name: \"Spinner\", Type: Spinner});\r\n\r\n    function numberValidator (d: DependencyObject, propd: DependencyProperty, value: any): boolean {\r\n        if (typeof value !== \"number\")\r\n            return false;\r\n        if (isNaN(value))\r\n            return false;\r\n        if (!isFinite(value))\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    function decimalPlacesValidator (d: DependencyObject, propd: DependencyProperty, value: any): boolean {\r\n        if (!numberValidator(d, propd, value))\r\n            return false;\r\n        return value >= 0 && value <= 15;\r\n    }\r\n}","\r\nmodule Fayde.Controls {\r\n    export class Separator extends Control {\r\n        constructor() {\r\n            super();\r\n            this.DefaultStyleKey = Separator;\r\n        }\r\n    }\r\n}","\r\nmodule Fayde.Controls {\r\n    export class SpinEventArgs extends RoutedEventArgs {\r\n        Direction: SpinDirection;\r\n        constructor(direction: SpinDirection) {\r\n            super();\r\n            Object.defineProperty(this, \"Direction\", { value: direction, writable: false });\r\n        }\r\n    }\r\n}","module Fayde.Controls {\r\n    var ElementTemplateTopName = \"TemplateTop\";\r\n    var ElementTemplateBottomName = \"TemplateBottom\";\r\n    var ElementTemplateLeftName = \"TemplateLeft\";\r\n    var ElementTemplateRightName = \"TemplateRight\";\r\n    var ElementTabPanelTopName = \"TabPanelTop\";\r\n    var ElementTabPanelBottomName = \"TabPanelBottom\";\r\n    var ElementTabPanelLeftName = \"TabPanelLeft\";\r\n    var ElementTabPanelRightName = \"TabPanelRight\";\r\n    var ElementContentTopName = \"ContentTop\";\r\n    var ElementContentBottomName = \"ContentBottom\";\r\n    var ElementContentLeftName = \"ContentLeft\";\r\n    var ElementContentRightName = \"ContentRight\";\r\n\r\n    export class TabControl extends ItemsControl {\r\n        static SelectedItemProperty = DependencyProperty.Register(\"SelectedItem\", () => Object, TabControl, null, (d: TabControl, args) => d.OnSelectedItemChanged(args));\r\n        static SelectedIndexProperty = DependencyProperty.Register(\"SelectedIndex\", () => Number, TabControl, -1, (d: TabControl, args) => d.OnSelectedIndexChanged(args));\r\n        static SelectedContentProperty = DependencyProperty.Register(\"SelectedContent\", () => Object, TabControl, null, (d: TabControl, args) => d.OnSelectedContentChanged(args));\r\n        static TabStripPlacementProperty = DependencyProperty.Register(\"TabStripPlacement\", () => new Enum(Dock), TabControl, Dock.Top, (d: TabControl, args) => d.OnTabStripPlacementPropertyChanged(args));\r\n        SelectedItem: any;\r\n        SelectedIndex: number;\r\n        SelectedContent: any;\r\n        TabStripPlacement: Dock;\r\n        SelectionChanged = new RoutedEvent<Controls.Primitives.SelectionChangedEventArgs>();\r\n\r\n        private _ElementTemplateTop: FrameworkElement;\r\n        private _ElementTemplateBottom: FrameworkElement;\r\n        private _ElementTemplateLeft: FrameworkElement;\r\n        private _ElementTemplateRight: FrameworkElement;\r\n\r\n        private _ElementTabPanelTop: TabPanel;\r\n        private _ElementTabPanelBottom: TabPanel;\r\n        private _ElementTabPanelLeft: TabPanel;\r\n        private _ElementTabPanelRight: TabPanel;\r\n\r\n        private _ElementContentTop: ContentPresenter;\r\n        private _ElementContentBottom: ContentPresenter;\r\n        private _ElementContentLeft: ContentPresenter;\r\n        private _ElementContentRight: ContentPresenter;\r\n\r\n        private _UpdateIndex = true;\r\n        private _DesiredIndex: number = 0;\r\n\r\n        constructor () {\r\n            super();\r\n            this.DefaultStyleKey = TabControl;\r\n        }\r\n\r\n        OnApplyTemplate () {\r\n            super.OnApplyTemplate();\r\n            if (this._ElementTabPanelTop != null)\r\n                this._ElementTabPanelTop.Children.Clear();\r\n            if (this._ElementTabPanelBottom != null)\r\n                this._ElementTabPanelBottom.Children.Clear();\r\n            if (this._ElementTabPanelLeft != null)\r\n                this._ElementTabPanelLeft.Children.Clear();\r\n            if (this._ElementTabPanelRight != null)\r\n                this._ElementTabPanelRight.Children.Clear();\r\n\r\n            var contentHost = this._GetContentHost(this.TabStripPlacement);\r\n            if (contentHost != null)\r\n                contentHost.Content = null;\r\n            this._ElementTemplateTop = <FrameworkElement>this.GetTemplateChild(\"TemplateTop\", FrameworkElement);\r\n            this._ElementTemplateBottom = <FrameworkElement>this.GetTemplateChild(\"TemplateBottom\", FrameworkElement);\r\n            this._ElementTemplateLeft = <FrameworkElement>this.GetTemplateChild(\"TemplateLeft\", FrameworkElement);\r\n            this._ElementTemplateRight = <FrameworkElement>this.GetTemplateChild(\"TemplateRight\", FrameworkElement);\r\n            this._ElementTabPanelTop = <TabPanel>this.GetTemplateChild(\"TabPanelTop\", TabPanel);\r\n            this._ElementTabPanelBottom = <TabPanel>this.GetTemplateChild(\"TabPanelBottom\", TabPanel);\r\n            this._ElementTabPanelLeft = <TabPanel>this.GetTemplateChild(\"TabPanelLeft\", TabPanel);\r\n            this._ElementTabPanelRight = <TabPanel>this.GetTemplateChild(\"TabPanelRight\", TabPanel);\r\n            TabPanel.setTabAlignment(this._ElementTabPanelTop, Dock.Top);\r\n            TabPanel.setTabAlignment(this._ElementTabPanelBottom, Dock.Bottom);\r\n            TabPanel.setTabAlignment(this._ElementTabPanelLeft, Dock.Left);\r\n            TabPanel.setTabAlignment(this._ElementTabPanelRight, Dock.Right);\r\n            this._ElementContentTop = <ContentPresenter>this.GetTemplateChild(\"ContentTop\", ContentPresenter);\r\n            this._ElementContentBottom = <ContentPresenter>this.GetTemplateChild(\"ContentBottom\", ContentPresenter);\r\n            this._ElementContentLeft = <ContentPresenter>this.GetTemplateChild(\"ContentLeft\", ContentPresenter);\r\n            this._ElementContentRight = <ContentPresenter>this.GetTemplateChild(\"ContentRight\", ContentPresenter);\r\n\r\n            var enumerator = this.Items.getEnumerator();\r\n            while (enumerator.moveNext()) {\r\n                var tabItem = <TabItem>enumerator.current;\r\n                if (!(tabItem instanceof TabItem))\r\n                    this._ThrowInvalidTabItem(tabItem);\r\n                this._AddToTabPanel(tabItem);\r\n            }\r\n\r\n            if (this.SelectedIndex >= 0)\r\n                this.UpdateSelectedContent(this.SelectedContent);\r\n            this.UpdateTabPanelLayout(this.TabStripPlacement, this.TabStripPlacement);\r\n            this.UpdateVisualState(false);\r\n        }\r\n\r\n        private OnSelectedItemChanged (args: IDependencyPropertyChangedEventArgs) {\r\n            var oldItem = <TabItem>args.OldValue;\r\n            var newItem = <TabItem>args.NewValue;\r\n            var num = newItem == null ? -1 : this.Items.IndexOf(newItem);\r\n            if (newItem != null && num === -1) {\r\n                this.SelectedItem = oldItem;\r\n            } else {\r\n                this.SelectedIndex = num;\r\n                this.SelectItem(oldItem, newItem);\r\n            }\r\n        }\r\n\r\n        private OnSelectedIndexChanged (args: IDependencyPropertyChangedEventArgs) {\r\n            var index = <number>args.NewValue;\r\n            var num = <number>args.OldValue;\r\n            if (index < -1)\r\n                throw new ArgumentException(\"'\" + index.toString() + \"' is not a valid value for property 'SelectedIndex'\");\r\n            if (this._UpdateIndex)\r\n                this._DesiredIndex = index;\r\n            else if (!this._UpdateIndex)\r\n                this._UpdateIndex = true;\r\n            if (index >= this.Items.Count) {\r\n                this._UpdateIndex = false;\r\n                this.SelectedIndex = num;\r\n            } else {\r\n                var item: any;\r\n                if (index >= 0 && index < this.Items.Count)\r\n                    item = this.Items.GetValueAt(index);\r\n                if (this.SelectedItem === item)\r\n                    return;\r\n                this.SelectedItem = item;\r\n            }\r\n        }\r\n\r\n        private OnSelectedContentChanged (args: IDependencyPropertyChangedEventArgs) {\r\n            this.UpdateSelectedContent(args.NewValue);\r\n        }\r\n\r\n        private OnTabStripPlacementPropertyChanged (args: IDependencyPropertyChangedEventArgs) {\r\n            this.UpdateTabPanelLayout(<Dock> args.OldValue, <Dock> args.NewValue);\r\n            var enumerator = this.Items.getEnumerator();\r\n            var ti: TabItem;\r\n            while (enumerator.moveNext()) {\r\n                ti = <TabItem>enumerator.current;\r\n                if (ti != null)\r\n                    ti.UpdateVisualState();\r\n            }\r\n        }\r\n\r\n        OnItemsChanged (e: Collections.CollectionChangedEventArgs) {\r\n            super.OnItemsChanged(e);\r\n            switch (e.Action) {\r\n                case Collections.CollectionChangedAction.Add:\r\n                    var index1 = -1;\r\n                    var len = e.NewItems.length;\r\n                    for (var i = 0; i < len; i++) {\r\n                        var obj = e.NewItems[i];\r\n                        var tabItem = <TabItem>obj;\r\n                        if (!(tabItem instanceof TabItem))\r\n                            this._ThrowInvalidTabItem(tabItem);\r\n                        var index2 = this.Items.IndexOf(tabItem);\r\n                        this._InsertIntoTabPanel(index2, tabItem);\r\n                        if (tabItem.IsSelected)\r\n                            index1 = index2;\r\n                        else if (this.SelectedItem !== this._GetItemAtIndex(this.SelectedIndex))\r\n                            index1 = this.Items.IndexOf(this.SelectedItem);\r\n                        else if (this._DesiredIndex < this.Items.Count && this._DesiredIndex >= 0)\r\n                            index1 = this._DesiredIndex;\r\n                        tabItem.UpdateVisualState();\r\n                    }\r\n                    if (index1 === -1) {\r\n                        var enumerator = this.Items.getEnumerator();\r\n                        while (enumerator.moveNext()) {\r\n                            var tabItem = <TabItem>enumerator.current;\r\n                            if (!(tabItem instanceof TabItem))\r\n                                this._ThrowInvalidTabItem(tabItem);\r\n                            if (tabItem.IsSelected)\r\n                                return;\r\n                        }\r\n                        if (this.Items.Count <= 1) {\r\n                            var item0 = <TabItem>this.Items.GetValueAt(0);\r\n                            var iss = item0.ReadLocalValue(TabItem.IsSelectedProperty);\r\n                            if (iss !== false)\r\n                                index1 = 0;\r\n                        } else {\r\n                            index1 = 0;\r\n                        }\r\n                    }\r\n                    this.SelectedItem = this._GetItemAtIndex(index1);\r\n                    this.SelectedIndex = index1;\r\n                    break;\r\n                case Collections.CollectionChangedAction.Remove:\r\n                    var len = e.OldItems.length;\r\n                    var tabItem: TabItem;\r\n                    for (var i = 0; i < len; i++) {\r\n                        tabItem = <TabItem>e.OldItems[i];\r\n                        this._RemoveFromTabPanel(tabItem);\r\n                        if (this.Items.Count === 0)\r\n                            this.SelectedIndex = -1;\r\n                        else if (this.Items.Count <= this.SelectedIndex)\r\n                            this.SelectedIndex = this.Items.Count - 1;\r\n                        else\r\n                            this.SelectedItem = this._GetItemAtIndex(this.SelectedIndex);\r\n                    }\r\n                    break;\r\n                case Collections.CollectionChangedAction.Reset:\r\n                    this._ClearTabPanel();\r\n                    this.SelectedIndex = -1;\r\n                    var tabItem: TabItem;\r\n                    var enumerator = this.Items.getEnumerator();\r\n                    while (enumerator.moveNext()) {\r\n                        tabItem = <TabItem>enumerator.current;\r\n                        if (!(tabItem instanceof TabItem))\r\n                            this._ThrowInvalidTabItem(tabItem);\r\n                        this._AddToTabPanel(tabItem);\r\n                        if (tabItem.IsSelected)\r\n                            this.SelectedItem = tabItem;\r\n                    }\r\n                    if (this.SelectedIndex !== -1 || this.Items.Count <= 0)\r\n                        break;\r\n                    this.SelectedIndex = 0;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        OnKeyDown (e: Input.KeyEventArgs) {\r\n            super.OnKeyDown(e);\r\n            if (e.Handled)\r\n                return;\r\n            var nextTabItem: TabItem;\r\n\r\n            switch (e.Key) {\r\n                case Input.Key.End:\r\n                    nextTabItem = this._FindEndTabItem();\r\n                    break;\r\n                case Input.Key.Home:\r\n                    nextTabItem = this._FindHomeTabItem();\r\n                    break;\r\n                default:\r\n                    return;\r\n            }\r\n            if (nextTabItem == null || nextTabItem === this.SelectedItem)\r\n                return;\r\n            e.Handled = true;\r\n            this.SelectedItem = nextTabItem;\r\n            nextTabItem.Focus();\r\n        }\r\n\r\n        private _FindEndTabItem (): TabItem {\r\n            var items = this.Items;\r\n            var len = items.Count;\r\n            var tabItem: TabItem = null;\r\n            for (var i = len - 1; i >= 0; i--) {\r\n                tabItem = <TabItem>items.GetValueAt(i);\r\n                if (tabItem.IsEnabled && tabItem.Visibility === Visibility.Visible)\r\n                    return tabItem;\r\n            }\r\n            return null;\r\n        }\r\n\r\n        private _FindHomeTabItem (): TabItem {\r\n            var items = this.Items;\r\n            var len = items.Count;\r\n            var tabItem: TabItem = null;\r\n            for (var i = 0; i < len; i++) {\r\n                tabItem = <TabItem>items.GetValueAt(i);\r\n                if (tabItem.IsEnabled && tabItem.Visibility === Visibility.Visible)\r\n                    return tabItem;\r\n            }\r\n            return null;\r\n        }\r\n\r\n        private SelectItem (oldItem: TabItem, newItem: TabItem) {\r\n            if (newItem == null) {\r\n                var contentHost = this._GetContentHost(this.TabStripPlacement);\r\n                if (contentHost != null)\r\n                    contentHost.Content = null;\r\n                this.SetValue(TabControl.SelectedContentProperty, null);\r\n            }\r\n            var tabItem: TabItem;\r\n            var enumerator = this.Items.getEnumerator();\r\n            while (enumerator.moveNext()) {\r\n                var tabItem = <TabItem>enumerator.current;\r\n                if (!(tabItem instanceof TabItem))\r\n                    this._ThrowInvalidTabItem(tabItem);\r\n                if (tabItem !== newItem && tabItem.IsSelected) {\r\n                    tabItem.IsSelected = false;\r\n                } else if (tabItem === newItem) {\r\n                    tabItem.IsSelected = true;\r\n                    this.SetValue(TabControl.SelectedContentProperty, tabItem.Content);\r\n                }\r\n            }\r\n\r\n            var oldItems: TabItem[] = [];\r\n            if (oldItem != null)\r\n                oldItems.push(oldItem);\r\n\r\n            var newItems: TabItem[] = [];\r\n            if (newItem != null)\r\n                newItems.push(newItem);\r\n            var e = new Controls.Primitives.SelectionChangedEventArgs(oldItems, newItems)\r\n            this.OnSelectionChanged(e);\r\n            this.SelectionChanged.raise(this, e);\r\n        }\r\n\r\n        OnSelectionChanged (e: Controls.Primitives.SelectionChangedEventArgs) {\r\n        }\r\n\r\n        private UpdateTabPanelLayout (oldValue: Dock, newValue: Dock) {\r\n            var template1 = this._GetTemplate(oldValue);\r\n            var template2 = this._GetTemplate(newValue);\r\n            var tabPanel1 = this._GetTabPanel(oldValue);\r\n            var tabPanel2 = this._GetTabPanel(newValue);\r\n            var contentHost1 = this._GetContentHost(oldValue);\r\n            var contentHost2 = this._GetContentHost(newValue);\r\n            if (oldValue !== newValue) {\r\n                if (template1 != null)\r\n                    template1.Visibility = Visibility.Collapsed;\r\n                if (tabPanel1 != null)\r\n                    tabPanel1.Children.Clear();\r\n                if (tabPanel2 != null) {\r\n                    var enumerator = this.Items.getEnumerator();\r\n                    var ti: TabItem;\r\n                    while (enumerator.moveNext()) {\r\n                        ti = <TabItem>enumerator.current;\r\n                        if (!(ti instanceof TabItem))\r\n                            this._ThrowInvalidTabItem(ti);\r\n                        this._AddToTabPanel(ti);\r\n                    }\r\n                }\r\n                if (contentHost1 != null)\r\n                    contentHost1.Content = null;\r\n                if (contentHost2 != null)\r\n                    contentHost2.Content = this.SelectedContent;\r\n            }\r\n            if (template2 == null)\r\n                return;\r\n            template2.Visibility = Visibility.Visible;\r\n        }\r\n\r\n        private UpdateSelectedContent (content: any) {\r\n            var tabItem = <TabItem>this.SelectedItem;\r\n            if (!(tabItem instanceof TabItem))\r\n                return;\r\n            var contentHost = this._GetContentHost(this.TabStripPlacement);\r\n            if (contentHost == null)\r\n                return;\r\n            contentHost.HorizontalAlignment = tabItem.HorizontalContentAlignment;\r\n            contentHost.VerticalAlignment = tabItem.VerticalContentAlignment;\r\n            contentHost.ContentTemplate = tabItem.ContentTemplate;\r\n            contentHost.Content = content;\r\n        }\r\n\r\n        private EnsureLanguageBinding (tabItem: TabItem) {\r\n            if (tabItem == null)\r\n                return;\r\n            var frameworkElement = <FrameworkElement>tabItem.Content;\r\n            if (!(frameworkElement instanceof FrameworkElement) || frameworkElement.ReadLocalValue(FrameworkElement.LanguageProperty) !== DependencyProperty.UnsetValue)\r\n                return;\r\n            var binding = new Fayde.Data.Binding(\"Language\");\r\n            binding.Source = this;\r\n            frameworkElement.SetBinding(FrameworkElement.LanguageProperty, binding);\r\n        }\r\n\r\n        private ClearLanguageBinding (tabItem: TabItem) {\r\n            if (tabItem == null)\r\n                return;\r\n            var frameworkElement = <FrameworkElement>tabItem.Content;\r\n            if (!(frameworkElement instanceof FrameworkElement) || frameworkElement.ReadLocalValue(FrameworkElement.LanguageProperty) !== DependencyProperty.UnsetValue)\r\n                return;\r\n            frameworkElement.ClearValue(FrameworkElement.LanguageProperty);\r\n        }\r\n\r\n        private _AddToTabPanel (ti: TabItem) {\r\n            var tabPanel = this._GetTabPanel(this.TabStripPlacement);\r\n            if (!tabPanel || tabPanel.Children.Contains(ti))\r\n                return;\r\n            tabPanel.Children.Add(ti);\r\n            this.EnsureLanguageBinding(ti);\r\n        }\r\n\r\n        private _InsertIntoTabPanel (index: number, ti: TabItem) {\r\n            var tabPanel = this._GetTabPanel(this.TabStripPlacement);\r\n            if (!tabPanel || tabPanel.Children.Contains(ti))\r\n                return;\r\n            tabPanel.Children.Insert(index, ti);\r\n        }\r\n\r\n        private _RemoveFromTabPanel (ti: TabItem) {\r\n            var tabPanel = this._GetTabPanel(this.TabStripPlacement);\r\n            if (!tabPanel || !tabPanel.Children.Contains(ti))\r\n                return;\r\n            tabPanel.Children.Remove(ti);\r\n        }\r\n\r\n        private _ClearTabPanel () {\r\n            var tabPanel = this._GetTabPanel(this.TabStripPlacement);\r\n            if (!tabPanel)\r\n                return;\r\n            var enumerator = tabPanel.Children.getEnumerator();\r\n            while (enumerator.moveNext()) {\r\n                var tabItem = <TabItem>enumerator.current;\r\n                if (tabItem != null)\r\n                    this.ClearLanguageBinding(tabItem);\r\n            }\r\n            tabPanel.Children.Clear();\r\n        }\r\n\r\n        private _GetTabPanel (tabPlacement: Dock): TabPanel {\r\n            switch (tabPlacement) {\r\n                case Dock.Left:\r\n                    return this._ElementTabPanelLeft;\r\n                case Dock.Top:\r\n                    return this._ElementTabPanelTop;\r\n                case Dock.Right:\r\n                    return this._ElementTabPanelRight;\r\n                case Dock.Bottom:\r\n                    return this._ElementTabPanelBottom;\r\n                default:\r\n                    return null;\r\n            }\r\n        }\r\n\r\n        private _GetTemplate (tabPlacement: Dock): FrameworkElement {\r\n            switch (tabPlacement) {\r\n                case Dock.Left:\r\n                    return this._ElementTemplateLeft;\r\n                case Dock.Top:\r\n                    return this._ElementTemplateTop;\r\n                case Dock.Right:\r\n                    return this._ElementTemplateRight;\r\n                case Dock.Bottom:\r\n                    return this._ElementTemplateBottom;\r\n                default:\r\n                    return null;\r\n            }\r\n        }\r\n\r\n        private _GetContentHost (tabPlacement: Dock): ContentPresenter {\r\n            switch (tabPlacement) {\r\n                case Dock.Left:\r\n                    return this._ElementContentLeft;\r\n                case Dock.Top:\r\n                    return this._ElementContentTop;\r\n                case Dock.Right:\r\n                    return this._ElementContentRight;\r\n                case Dock.Bottom:\r\n                    return this._ElementContentBottom;\r\n                default:\r\n                    return null;\r\n            }\r\n        }\r\n\r\n        private _GetItemAtIndex (index: number): TabItem {\r\n            if (index < 0 || index >= this.Items.Count)\r\n                return null;\r\n            var item = <TabItem>this.Items.GetValueAt(index);\r\n            if (item instanceof TabItem)\r\n                return item;\r\n        }\r\n\r\n        private _ThrowInvalidTabItem (obj: any) {\r\n            var type: string = \"object\";\r\n            try {\r\n                type = obj.constructor._TypeName;\r\n            } catch (err) {\r\n            }\r\n            throw new ArgumentException(\"Unable to cast object of type '\" + type + \"' to type 'System.Windows.Controls.TabItem'.\");\r\n        }\r\n    }\r\n    TemplateVisualStates(TabControl,\r\n        {GroupName: \"CommonStates\", Name: \"Normal\"},\r\n        {GroupName: \"CommonStates\", Name: \"Disabled\"});\r\n    TemplateParts(TabControl,\r\n        {Name: \"TemplateLeft\", Type: FrameworkElement},\r\n        {Name: \"ContentLeft\", Type: ContentPresenter},\r\n        {Name: \"TabPanelLeft\", Type: TabPanel},\r\n        {Name: \"TemplateTop\", Type: FrameworkElement},\r\n        {Name: \"ContentTop\", Type: ContentPresenter},\r\n        {Name: \"TabPanelTop\", Type: TabPanel},\r\n        {Name: \"TemplateRight\", Type: FrameworkElement},\r\n        {Name: \"ContentRight\", Type: ContentPresenter},\r\n        {Name: \"TabPanelRight\", Type: TabPanel},\r\n        {Name: \"TemplateBottom\", Type: FrameworkElement},\r\n        {Name: \"ContentBottom\", Type: ContentPresenter},\r\n        {Name: \"TabPanelBottom\", Type: TabPanel});\r\n}","module Fayde.Controls {\r\n    export class TabItem extends ContentControl {\r\n        static HasHeaderProperty = DependencyProperty.Register(\"HasHeader\", () => Boolean, TabItem, false);\r\n        static HeaderProperty = DependencyProperty.Register(\"Header\", () => Object, TabItem, null, (d, args) => (<TabItem>d)._OnHeaderChanged(args));\r\n        static HeaderTemplateProperty = DependencyProperty.Register(\"HeaderTemplate\", () => DataTemplate, TabItem, undefined, (d, args) => (<TabItem>d).OnHeaderTemplateChanged(<DataTemplate>args.OldValue, <DataTemplate>args.NewValue));\r\n        static IsFocusedProperty = DependencyProperty.Register(\"IsFocused\", () => Boolean, TabItem, false);\r\n        static IsSelectedProperty = DependencyProperty.Register(\"IsSelected\", () => Boolean, TabItem, false, (d, args) => (<TabItem>d)._OnIsSelectedChanged(args));\r\n        HasHeader: boolean;\r\n        Header: any;\r\n        HeaderTemplate: DataTemplate;\r\n        IsFocused: boolean;\r\n        IsSelected: boolean;\r\n\r\n        private _SelectedElements = new Elements();\r\n        private _UnselectedElements = new Elements();\r\n\r\n        private _PreviousTemplate: FrameworkElement = null;\r\n        private _PreviousHeader: ContentControl = null;\r\n\r\n        get TabStripPlacement(): Dock {\r\n            var tabControlParent = this.TabControlParent;\r\n            if (tabControlParent != null)\r\n                return tabControlParent.TabStripPlacement;\r\n            return Dock.Top;\r\n        }\r\n        private get TabControlParent(): TabControl {\r\n            return VisualTreeHelper.GetParentOfType<TabControl>(this, TabControl);\r\n        }\r\n\r\n        constructor() {\r\n            super();\r\n            this.DefaultStyleKey = TabItem;\r\n        }\r\n\r\n        OnApplyTemplate() {\r\n            super.OnApplyTemplate();\r\n            var contentControl = this._GetContentControl(this.IsSelected, this.TabStripPlacement);\r\n            if (contentControl != null)\r\n                contentControl.Content = null;\r\n\r\n            this._SelectedElements.OnApplyTemplate(this, true);\r\n            this._UnselectedElements.OnApplyTemplate(this, false);\r\n\r\n            this._UpdateHeaderVisuals();\r\n            this.UpdateVisualState(false);\r\n        }\r\n\r\n        private _OnHeaderChanged(args: IDependencyPropertyChangedEventArgs) {\r\n            this.HasHeader = args.NewValue != null;\r\n            this.OnHeaderChanged(args.OldValue, args.NewValue);\r\n        }\r\n        OnHeaderChanged(oldValue: any, newValue: any) {\r\n            this._UpdateHeaderVisuals();\r\n        }\r\n        OnHeaderTemplateChanged(oldHeaderTemplate: DataTemplate, newHeaderTemplate: DataTemplate) {\r\n            this._UpdateHeaderVisuals();\r\n        }\r\n        private _OnIsSelectedChanged(args: IDependencyPropertyChangedEventArgs) {\r\n            var isSelected = <boolean>args.NewValue;\r\n            var e1 = new RoutedEventArgs();\r\n            if (isSelected)\r\n                this.OnSelected(e1);\r\n            else\r\n                this.OnUnselected(e1);\r\n            this.IsTabStop = isSelected;\r\n            this.UpdateVisualState();\r\n        }\r\n        OnSelected(e: RoutedEventArgs) {\r\n            var parent = this.TabControlParent;\r\n            if (!parent)\r\n                return;\r\n            parent.SelectedItem = this;\r\n        }\r\n        OnUnselected(e: RoutedEventArgs) {\r\n            var parent = this.TabControlParent;\r\n            if (!parent || parent.SelectedItem != this)\r\n                return;\r\n            parent.SelectedIndex = -1;\r\n        }\r\n\r\n        UpdateVisualState(useTransitions?: boolean) {\r\n            var template = this.GetTemplate(this.IsSelected, this.TabStripPlacement);\r\n            if (this._PreviousTemplate != null && this._PreviousTemplate !== template)\r\n                this._PreviousTemplate.Visibility = Visibility.Collapsed;\r\n            this._PreviousTemplate = template;\r\n            if (template != null)\r\n                template.Visibility = Visibility.Visible;\r\n            var contentControl = this._GetContentControl(this.IsSelected, this.TabStripPlacement);\r\n            if (this._PreviousHeader && this._PreviousHeader !== contentControl)\r\n                this._PreviousHeader.Content = null;\r\n            this._PreviousHeader = contentControl;\r\n            this._UpdateHeaderVisuals();\r\n\r\n            super.UpdateVisualState(useTransitions);\r\n        }\r\n        private _UpdateHeaderVisuals() {\r\n            var contentControl = this._GetContentControl(this.IsSelected, this.TabStripPlacement);\r\n            if (!contentControl)\r\n                return;\r\n            contentControl.Content = this.Header;\r\n            contentControl.ContentTemplate = this.HeaderTemplate;\r\n        }\r\n\r\n        OnMouseLeave(e: Input.MouseEventArgs) {\r\n            this.UpdateVisualState();\r\n        }\r\n        OnMouseEnter(e: Input.MouseEventArgs) {\r\n            this.UpdateVisualState();\r\n        }\r\n        OnMouseLeftButtonDown(e: Input.MouseButtonEventArgs) {\r\n            if (!this.IsEnabled || !this.TabControlParent || (this.IsSelected || e.Handled))\r\n                return;\r\n            this.IsTabStop = true;\r\n            e.Handled = this.Focus();\r\n            this.TabControlParent.SelectedIndex = this.TabControlParent.Items.IndexOf(this);\r\n        }\r\n\r\n        OnGotFocus(e: RoutedEventArgs) {\r\n            super.OnGotFocus(e);\r\n            this.SetValueInternal(TabItem.IsFocusedProperty, true);\r\n            this.UpdateVisualState();\r\n        }\r\n        OnLostFocus(e: RoutedEventArgs) {\r\n            super.OnLostFocus(e);\r\n            this.SetValueInternal(TabItem.IsFocusedProperty, false);\r\n            this.UpdateVisualState();\r\n        }\r\n\r\n        OnContentChanged(oldContent: any, newContent: any) {\r\n            super.OnContentChanged(oldContent, newContent);\r\n            var parent = this.TabControlParent;\r\n            if (!parent || !this.IsSelected)\r\n                return;\r\n            parent.SelectedContent = newContent;\r\n        }\r\n\r\n        OnKeyDown(e: Input.KeyEventArgs) {\r\n            super.OnKeyDown(e);\r\n            if (e.Handled)\r\n                return;\r\n            var parent = this.TabControlParent;\r\n            var logicalKey = Input.InteractionHelper.GetLogicalKey(this.FlowDirection, e.Key);\r\n            var startIndex = parent.Items.IndexOf(this);\r\n            var nextTabItem: TabItem = null;\r\n            switch (logicalKey) {\r\n                case Input.Key.Left:\r\n                case Input.Key.Up:\r\n                    nextTabItem = this._FindPreviousTabItem(startIndex);\r\n                    break;\r\n                case Input.Key.Right:\r\n                case Input.Key.Down:\r\n                    nextTabItem = this._FindNextTabItem(startIndex);\r\n                    break;\r\n                default:\r\n                    return;\r\n            }\r\n            if (!nextTabItem || nextTabItem === parent.SelectedItem)\r\n                return;\r\n            e.Handled = true;\r\n            parent.SelectedItem = nextTabItem;\r\n            nextTabItem.Focus();\r\n        }\r\n\r\n        GetTemplate(isSelected: boolean, tabPlacement: Dock): FrameworkElement {\r\n            var e = isSelected ? this._SelectedElements : this._UnselectedElements;\r\n            return (<Element>e[Dock[tabPlacement]]).Template;\r\n        }\r\n        private _GetContentControl(isSelected: boolean, tabPlacement: Dock): ContentControl {\r\n            var e = isSelected ? this._SelectedElements : this._UnselectedElements;\r\n            return (<Element>e[Dock[tabPlacement]]).Header;\r\n        }\r\n\r\n        private _FindPreviousTabItem(startIndex: number): TabItem {\r\n            for (var i = startIndex, items = this.TabControlParent.Items; i >= 0; i--) {\r\n                var tabItem = <TabItem>items.GetValueAt(i);\r\n                if (tabItem.IsEnabled && tabItem.Visibility === Visibility.Visible)\r\n                    return tabItem;\r\n            }\r\n            return null;\r\n        }\r\n        private _FindNextTabItem(startIndex: number): TabItem {\r\n            for (var i = startIndex, items = this.TabControlParent.Items, len = items.Count; i < len; i++) {\r\n                var tabItem = <TabItem>items.GetValueAt(i);\r\n                if (tabItem.IsEnabled && tabItem.Visibility === Visibility.Visible)\r\n                    return tabItem;\r\n            }\r\n            return null;\r\n        }\r\n    }\r\n    TemplateVisualStates(TabItem,\r\n        { GroupName: \"CommonStates\", Name: \"Normal\" },\r\n        { GroupName: \"CommonStates\", Name: \"MouseOver\" },\r\n        { GroupName: \"CommonStates\", Name: \"Disabled\" },\r\n        { GroupName: \"FocusStates\", Name: \"Unfocused\" },\r\n        { GroupName: \"FocusStates\", Name: \"Focused\" },\r\n        { GroupName: \"SelectionStates\", Name: \"Unselected\" },\r\n        { GroupName: \"SelectionStates\", Name: \"Selected\" });\r\n    TemplateParts(TabItem,\r\n        { Name: \"HeaderLeftSelected\", Type: FrameworkElement },\r\n        { Name: \"HeaderTopSelected\", Type: FrameworkElement },\r\n        { Name: \"HeaderRightSelected\", Type: FrameworkElement },\r\n        { Name: \"HeaderBottomSelected\", Type: FrameworkElement },\r\n        { Name: \"TemplateLeftSelected\", Type: FrameworkElement },\r\n        { Name: \"TemplateTopSelected\", Type: FrameworkElement },\r\n        { Name: \"TemplateRightSelected\", Type: FrameworkElement },\r\n        { Name: \"TemplateBottomSelected\", Type: FrameworkElement },\r\n        { Name: \"HeaderLeftUnselected\", Type: FrameworkElement },\r\n        { Name: \"HeaderTopUnselected\", Type: FrameworkElement },\r\n        { Name: \"HeaderRightUnselected\", Type: FrameworkElement },\r\n        { Name: \"HeaderBottomUnselected\", Type: FrameworkElement },\r\n        { Name: \"TemplateLeftUnselected\", Type: FrameworkElement },\r\n        { Name: \"TemplateTopUnselected\", Type: FrameworkElement },\r\n        { Name: \"TemplateRightUnselected\", Type: FrameworkElement },\r\n        { Name: \"TemplateBottomUnselected\", Type: FrameworkElement });\r\n\r\n    class Elements {\r\n        Top = new Element();\r\n        Bottom = new Element();\r\n        Left = new Element();\r\n        Right = new Element();\r\n        OnApplyTemplate(control: Control, isSelected: boolean) {\r\n            this.Top.OnApplyTemplate(control, isSelected, \"Top\");\r\n            this.Bottom.OnApplyTemplate(control, isSelected, \"Bottom\");\r\n            this.Left.OnApplyTemplate(control, isSelected, \"Left\");\r\n            this.Right.OnApplyTemplate(control, isSelected, \"Right\");\r\n        }\r\n    }\r\n    class Element {\r\n        Header: ContentControl = null;\r\n        Template: FrameworkElement = null;\r\n        OnApplyTemplate(control: Control, isSelected: boolean, dock: string) {\r\n            var post = dock + (isSelected ? \"Selected\" : \"Unselected\");\r\n            this.Header = <ContentControl>control.GetTemplateChild(\"Header\" + post, ContentControl);\r\n            this.Template = <FrameworkElement>control.GetTemplateChild(\"Template\" + post, FrameworkElement);\r\n        }\r\n    }\r\n}","module Fayde.Controls {\r\n    export class TimePicker extends Control {\r\n        static SelectedHourProperty = DependencyProperty.Register(\"SelectedHour\", () => Number, TimePicker, 0, (d, args) => (<TimePicker>d).OnSelectedHourChanged(args));\r\n        static SelectedMinuteProperty = DependencyProperty.Register(\"SelectedMinute\", () => Number, TimePicker, 0, (d, args) => (<TimePicker>d).OnSelectedMinuteChanged(args));\r\n        static SelectedSecondProperty = DependencyProperty.Register(\"SelectedSecond\", () => Number, TimePicker, 0, (d, args) => (<TimePicker>d).OnSelectedSecondChanged(args));\r\n        static SelectedTimeProperty = DependencyProperty.Register(\"SelectedTime\", () => TimeSpan, TimePicker, undefined, (d, args) => (<TimePicker>d).OnSelectedTimeChanged(args));\r\n        static IsSecondsShownProperty = DependencyProperty.Register(\"IsSecondsShown\", () => Boolean, TimePicker, true, (d, args) => (<TimePicker>d)._UpdateText());\r\n        static DisplayModeProperty = DependencyProperty.Register(\"DisplayMode\", () => new Enum(TimeDisplayMode), TimePicker, TimeDisplayMode.Regular, (d, args) => (<TimePicker>d).OnDisplayModeChanged(args));\r\n        SelectedHour: number;\r\n        SelectedMinute: number;\r\n        SelectedSecond: number;\r\n        SelectedTime: TimeSpan;\r\n        IsSecondsShown: boolean;\r\n        DisplayMode: TimeDisplayMode;\r\n\r\n        private OnSelectedHourChanged(args: IDependencyPropertyChangedEventArgs) {\r\n            this.CoerceHour(args.NewValue);\r\n            this.CoerceTime();\r\n        }\r\n        private OnSelectedMinuteChanged(args: IDependencyPropertyChangedEventArgs) {\r\n            this.CoerceMinute(args.NewValue);\r\n            this.CoerceTime();\r\n        }\r\n        private OnSelectedSecondChanged(args: IDependencyPropertyChangedEventArgs) {\r\n            this.CoerceSecond(args.NewValue);\r\n            this.CoerceTime();\r\n        }\r\n        private OnSelectedTimeChanged(args: IDependencyPropertyChangedEventArgs) {\r\n            var ts = <TimeSpan>args.NewValue;\r\n            if (ts instanceof TimeSpan) {\r\n                this.CoerceHour(ts.Hours);\r\n                this.CoerceMinute(ts.Minutes);\r\n                this.CoerceSecond(ts.Seconds);\r\n            } else {\r\n                this.CoerceHour(NaN);\r\n                this.CoerceMinute(NaN);\r\n                this.CoerceSecond(NaN);\r\n            }\r\n        }\r\n        private OnDisplayModeChanged(args: IDependencyPropertyChangedEventArgs) {\r\n            this._UpdateText();\r\n        }\r\n\r\n        private _HourTextBox: TextBox = null;\r\n        private _MinuteTextBox: TextBox = null;\r\n        private _SecondTextBox: TextBox = null;\r\n        private _SecondSeparator: FrameworkElement = null;\r\n        private _SuffixTextBlock: TextBlock = null;\r\n\r\n        private _HourGesture = new Internal.EventGesture<TextBox>();\r\n        private _MinuteGesture = new Internal.EventGesture<TextBox>();\r\n        private _SecondGesture = new Internal.EventGesture<TextBox>();\r\n        private _SuffixGesture = new Internal.EventGesture<TextBox>();\r\n\r\n        private _SelectionHandler: Internal.SelectionHandler = null;\r\n\r\n        constructor() {\r\n            super();\r\n            this.DefaultStyleKey = TimePicker;\r\n            this.CoerceTime();\r\n        }\r\n\r\n        OnApplyTemplate() {\r\n            super.OnApplyTemplate();\r\n\r\n            this._HourGesture.Detach();\r\n            this._HourTextBox = <TextBox>this.GetTemplateChild(\"HourTextBox\", TextBox);\r\n            if (this._HourTextBox)\r\n                this._HourGesture.Attach(this._HourTextBox.LostFocus, (tb) => this.CoerceHour(this._GetHourInput()));\r\n            \r\n            this._MinuteGesture.Detach();\r\n            this._MinuteTextBox = <TextBox>this.GetTemplateChild(\"MinuteTextBox\", TextBox);\r\n            if (this._MinuteTextBox)\r\n                this._MinuteGesture.Attach(this._MinuteTextBox.LostFocus, (tb) => this.CoerceMinute(tb.Text));\r\n            \r\n            this._SecondGesture.Detach();\r\n            this._SecondTextBox = <TextBox>this.GetTemplateChild(\"SecondTextBox\", TextBox);\r\n            if (this._SecondTextBox)\r\n                this._SecondGesture.Attach(this._SecondTextBox.LostFocus, (tb) => this.CoerceSecond(tb.Text));\r\n\r\n            this._SecondSeparator = <FrameworkElement>this.GetTemplateChild(\"SecondSeparator\", FrameworkElement);\r\n\r\n            this._SuffixGesture.Detach();\r\n            this._SuffixTextBlock = <TextBlock>this.GetTemplateChild(\"SuffixTextBlock\", TextBlock);\r\n            if (this._SuffixTextBlock)\r\n                this._SuffixGesture.Attach(this._SuffixTextBlock.MouseLeftButtonUp, (tb) => this.ToggleAmPm());\r\n\r\n            if (this._SelectionHandler)\r\n                this._SelectionHandler.Dispose();\r\n            this._SelectionHandler = new Internal.SelectionHandler([this._HourTextBox, this._MinuteTextBox, this._SecondTextBox]);\r\n\r\n            this._UpdateText();\r\n        }\r\n\r\n        private _GetHourInput(): string {\r\n            var text = this._HourTextBox.Text;\r\n            if (this.DisplayMode === TimeDisplayMode.Military)\r\n                return text;\r\n            var h = parseFloat(text);\r\n            var isa = !!this._SuffixTextBlock && this._SuffixTextBlock.Text === \"AM\";\r\n            if (isa && h === 12)\r\n                return \"00\";\r\n            if (!isa && h < 12)\r\n                return (h + 12).toString();\r\n            return text;\r\n        }\r\n\r\n        private CoerceHour(hour: any) {\r\n            hour = Math.max(0, Math.min(23, hour));\r\n            hour = hour || 0;\r\n            this.SetCurrentValue(TimePicker.SelectedHourProperty, hour);\r\n            this._UpdateText();\r\n        }\r\n        private CoerceMinute(minute: any) {\r\n            minute = Math.max(0, Math.min(59, minute));\r\n            minute = minute || 0;\r\n            this.SetCurrentValue(TimePicker.SelectedMinuteProperty, minute);\r\n            this._UpdateText();\r\n        }\r\n        private CoerceSecond(second: any) {\r\n            second = Math.max(0, Math.min(59, second));\r\n            second = second || 0;\r\n            this.SetCurrentValue(TimePicker.SelectedSecondProperty, second);\r\n            this._UpdateText();\r\n        }\r\n        private CoerceTime() {\r\n            var ts = new TimeSpan(this.SelectedHour, this.SelectedMinute, this.SelectedSecond);\r\n            var old = this.SelectedTime;\r\n            if (!!old && ts.CompareTo(old) === 0)\r\n                return;\r\n            this.SetCurrentValue(TimePicker.SelectedTimeProperty, ts);\r\n        }\r\n        private ToggleAmPm() {\r\n            var hour = this.SelectedHour;\r\n            if (hour >= 12)\r\n                hour -= 12;\r\n            else\r\n                hour += 12;\r\n            this.CoerceHour(hour);\r\n        }\r\n\r\n        private _UpdateText() {\r\n            var isMilitary = this.DisplayMode === TimeDisplayMode.Military;\r\n            var h = this.SelectedHour;\r\n            var m = this.SelectedMinute;\r\n            var s = this.SelectedSecond;\r\n            var isSecondShown = this.IsSecondsShown;\r\n\r\n            var hd = h;\r\n            if (!isMilitary) {\r\n                hd = hd >= 12 ? (hd - 12) : hd;\r\n                hd = hd === 0 ? 12 : hd;\r\n            }\r\n\r\n            if (this._HourTextBox)\r\n                this._HourTextBox.Text = formatNumber(hd, 2, \"00\");\r\n            if (this._MinuteTextBox)\r\n                this._MinuteTextBox.Text = formatNumber(m, 2, \"00\");\r\n            if (this._SecondTextBox) {\r\n                this._SecondTextBox.Text = formatNumber(s, 2, \"00\");\r\n                this._SecondTextBox.Visibility = isSecondShown ? Visibility.Visible : Visibility.Collapsed;\r\n            }\r\n\r\n            if (this._SecondSeparator)\r\n                this._SecondSeparator.Visibility = isSecondShown ? Visibility.Visible : Visibility.Collapsed;\r\n\r\n            if (this._SuffixTextBlock) {\r\n                this._SuffixTextBlock.Visibility = isMilitary ? Visibility.Collapsed : Visibility.Visible;\r\n                this._SuffixTextBlock.Text = h >= 12 ? \"PM\" : \"AM\";\r\n            }\r\n        }\r\n    }\r\n    TemplateParts(TimePicker,\r\n        { Name: \"HourTextBox\", Type: TextBox },\r\n        { Name: \"MinuteTextBox\", Type: TextBox },\r\n        { Name: \"SecondTextBox\", Type: TextBox },\r\n        { Name: \"SecondSeparator\", Type: FrameworkElement },\r\n        { Name: \"SuffixTextBlock\", Type: TextBlock });\r\n    TemplateVisualStates(TimePicker,\r\n        { GroupName: \"CommonStates\", Name: \"Normal\" },\r\n        { GroupName: \"CommonStates\", Name: \"Disabled\" },\r\n        { GroupName: \"ValidationStates\", Name: \"Valid\" },\r\n        { GroupName: \"ValidationStates\", Name: \"InvalidFocused\" },\r\n        { GroupName: \"ValidationStates\", Name: \"InvalidUnfocused\" });\r\n    \r\n    function formatNumber(n: number, digits: number, fallback: string) {\r\n        if (isNaN(n))\r\n            return fallback;\r\n        return Localization.Format(\"{0:d\" + digits + \"}\", n);\r\n    }\r\n}","module Fayde.Controls {\r\n    import ScrollEx = Internal.ScrollEx;\r\n\r\n    export class TreeView extends ItemsControl {\r\n        static SelectedItemProperty = DependencyProperty.Register(\"SelectedItem\", () => Object, TreeView, null, (d, args) => (<TreeView>d).OnSelectedItemChanged(args));\r\n        static SelectedValueProperty = DependencyProperty.Register(\"SelectedValue\", () => Object, TreeView, null, (d, args) => (<TreeView>d).OnSelectedValueChanged(args));\r\n        static SelectedValuePathProperty = DependencyProperty.Register(\"SelectedValuePath\", () => String, TreeView, \"\", (d, args) => (<TreeView>d).OnSelectedValuePathChanged(args));\r\n        static ItemContainerStyleProperty = DependencyProperty.Register(\"ItemContainerStyle\", () => Style, TreeView, null, (d, args) => (<TreeView>d).OnItemContainerStyleChanged(args));\r\n\r\n        SelectedItem: any;\r\n        SelectedValue: any;\r\n        SelectedValuePath: string;\r\n        ItemContainerStyle: Style;\r\n\r\n        private OnSelectedItemChanged (e: DependencyPropertyChangedEventArgs) {\r\n            if (this._IgnorePropertyChange)\r\n                this._IgnorePropertyChange = false;\r\n            else if (!this._AllowWrite) {\r\n                this._IgnorePropertyChange = true;\r\n                this.SetValue(TreeView.SelectedItemProperty, e.OldValue);\r\n                throw new InvalidOperationException(\"Cannot set read-only property SelectedItem.\");\r\n            }\r\n            else\r\n                this.UpdateSelectedValue(e.NewValue);\r\n        }\r\n\r\n        private OnSelectedValueChanged (e: DependencyPropertyChangedEventArgs) {\r\n            if (this._IgnorePropertyChange) {\r\n                this._IgnorePropertyChange = false;\r\n            } else {\r\n                if (this._AllowWrite)\r\n                    return;\r\n                this._IgnorePropertyChange = true;\r\n                this.SetValue(TreeView.SelectedValueProperty, e.OldValue);\r\n                throw new InvalidOperationException(\"Cannot set read-only property SelectedValue.\");\r\n            }\r\n        }\r\n\r\n        private OnSelectedValuePathChanged (e: DependencyPropertyChangedEventArgs) {\r\n            this.UpdateSelectedValue(this.SelectedItem);\r\n        }\r\n\r\n        private OnItemContainerStyleChanged (e: DependencyPropertyChangedEventArgs) {\r\n            this.ItemsControlHelper.UpdateItemContainerStyle(<Style>e.NewValue);\r\n        }\r\n\r\n        private _AllowWrite: boolean;\r\n        private _IgnorePropertyChange: boolean;\r\n\r\n        SelectedContainer: TreeViewItem;\r\n        IsSelectedContainerHookedUp: boolean;\r\n        IsSelectionChangeActive: boolean;\r\n        ItemsControlHelper: Internal.ItemsControlHelper;\r\n\r\n        private SelectedItemChanged = new RoutedPropertyChangedEvent<any>();\r\n\r\n        constructor () {\r\n            super();\r\n            this.DefaultStyleKey = TreeView;\r\n            this.ItemsControlHelper = new Internal.ItemsControlHelper(this);\r\n        }\r\n\r\n        OnApplyTemplate () {\r\n            super.OnApplyTemplate();\r\n            this.ItemsControlHelper.OnApplyTemplate();\r\n            this.UpdateVisualState(false);\r\n        }\r\n\r\n        GetContainerForItem (): UIElement {\r\n            return new TreeViewItem();\r\n        }\r\n\r\n        IsItemItsOwnContainer (item: any): boolean {\r\n            return item instanceof TreeViewItem;\r\n        }\r\n\r\n        PrepareContainerForItem (element: UIElement, item: any) {\r\n            var treeViewItem = <TreeViewItem>element;\r\n            if (treeViewItem instanceof TreeViewItem)\r\n                treeViewItem.ParentItemsControl = this;\r\n            Internal.ItemsControlHelper.PrepareContainerForItemOverride(element, this.ItemContainerStyle);\r\n            HeaderedItemsControl.PrepareHeaderedItemsControlContainer(treeViewItem, item, this, this.ItemContainerStyle);\r\n            super.PrepareContainerForItem(element, item);\r\n        }\r\n\r\n        ClearContainerForItem (element: UIElement, item: any) {\r\n            var treeViewItem = <TreeViewItem>element;\r\n            if (treeViewItem instanceof TreeViewItem)\r\n                treeViewItem.ParentItemsControl = null;\r\n            super.ClearContainerForItem(element, item);\r\n        }\r\n\r\n        OnItemsChanged (e: Collections.CollectionChangedEventArgs) {\r\n            if (!e)\r\n                throw new ArgumentException(\"e\");\r\n            super.OnItemsChanged(e);\r\n            if (e.NewItems != null) {\r\n                for (var i = 0, items = <TreeViewItem[]>e.NewItems, len = items.length; i < len; i++) {\r\n                    items[i].ParentItemsControl = this;\r\n                }\r\n            }\r\n\r\n            switch (e.Action) {\r\n                case Collections.CollectionChangedAction.Remove:\r\n                case Collections.CollectionChangedAction.Reset:\r\n                    if (this.SelectedItem != null && !this.IsSelectedContainerHookedUp)\r\n                        this.SelectFirstItem();\r\n                    break;\r\n                case Collections.CollectionChangedAction.Replace:\r\n                    var selectedItem = this.SelectedItem;\r\n                    if (selectedItem != null && (e.OldItems == null || nullstone.equals(selectedItem, e.OldItems[0])))\r\n                        this.ChangeSelection(selectedItem, this.SelectedContainer, false);\r\n                    break;\r\n            }\r\n\r\n            if (!e.OldItems)\r\n                return;\r\n            for (var i = 0, items = <TreeViewItem[]>e.OldItems, len = items.length; i < len; i++) {\r\n                items[i].ParentItemsControl = null;\r\n            }\r\n        }\r\n\r\n        CheckForSelectedDescendents (item: TreeViewItem) {\r\n            var stack: TreeViewItem[] = [];\r\n            stack.push(item);\r\n            while (stack.length > 0) {\r\n                var container = stack.pop();\r\n                if (container.IsSelected) {\r\n                    container.IgnorePropertyChange = true;\r\n                    container.IsSelected = false;\r\n                    this.ChangeSelection(container, container, true);\r\n                    if (this.SelectedContainer.ParentItemsControl == null)\r\n                        this.SelectedContainer.RequiresContainsSelectionUpdate = true;\r\n                }\r\n                var enumerator = container.Items.getEnumerator();\r\n                while (enumerator.moveNext())\r\n                    stack.push(enumerator.current);\r\n            }\r\n        }\r\n\r\n        PropagateKeyDown (e: Input.KeyEventArgs) {\r\n            this.OnKeyDown(e);\r\n        }\r\n\r\n        OnKeyDown (e: Input.KeyEventArgs) {\r\n            super.OnKeyDown(e);\r\n            if (e.Handled || !this.IsEnabled)\r\n                return;\r\n            if (Input.Keyboard.HasControl()) {\r\n                switch (e.Key) {\r\n                    case Input.Key.PageUp:\r\n                    case Input.Key.PageDown:\r\n                    case Input.Key.End:\r\n                    case Input.Key.Home:\r\n                    case Input.Key.Left:\r\n                    case Input.Key.Up:\r\n                    case Input.Key.Right:\r\n                    case Input.Key.Down:\r\n                        if (ScrollEx.HandleKey(this.ItemsControlHelper.ScrollHost, e.Key, this.FlowDirection))\r\n                            e.Handled = true;\r\n                        break;\r\n                }\r\n            } else {\r\n                switch (e.Key) {\r\n                    case Input.Key.PageUp:\r\n                    case Input.Key.PageDown:\r\n                        if (this.SelectedContainer != null) {\r\n                            if (!this.HandleScrollByPage(e.Key === Input.Key.PageUp))\r\n                                break;\r\n                            e.Handled = true;\r\n                            break;\r\n                        }\r\n                        else {\r\n                            if (!this.FocusFirstItem())\r\n                                break;\r\n                            e.Handled = true;\r\n                            break;\r\n                        }\r\n                    case Input.Key.End:\r\n                        if (!this.FocusLastItem())\r\n                            break;\r\n                        e.Handled = true;\r\n                        break;\r\n                    case Input.Key.Home:\r\n                        if (!this.FocusFirstItem())\r\n                            break;\r\n                        e.Handled = true;\r\n                        break;\r\n                    case Input.Key.Up:\r\n                    case Input.Key.Down:\r\n                        if (this.SelectedContainer != null || !this.FocusFirstItem())\r\n                            break;\r\n                        e.Handled = true;\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        private HandleScrollByPage (up: boolean): boolean {\r\n            var scrollHost = this.ItemsControlHelper.ScrollHost;\r\n            if (scrollHost != null) {\r\n                var viewportHeight = scrollHost.ViewportHeight;\r\n                var top: IOutValue = {Value: 0};\r\n                var bottom: IOutValue = {Value: 0};\r\n                ScrollEx.GetTopAndBottom(this.SelectedContainer.HeaderElement || this.SelectedContainer, scrollHost, top, bottom);\r\n                var tvi1: TreeViewItem = null;\r\n                var tvi2 = this.SelectedContainer;\r\n                var itemsControl = this.SelectedContainer.ParentItemsControl;\r\n                if (itemsControl != null) {\r\n                    if (up) {\r\n                        for (var parentItemsControl; itemsControl !== this; itemsControl = parentItemsControl) {\r\n                            var tvi3 = <TreeViewItem>itemsControl;\r\n                            if (tvi3 != null) {\r\n                                parentItemsControl = tvi3.ParentItemsControl;\r\n                                if (!parentItemsControl)\r\n                                    break;\r\n                                tvi2 = tvi3;\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    var index = itemsControl.ItemContainersManager.IndexFromContainer(tvi2);\r\n                    var count = itemsControl.Items.Count;\r\n                    while (itemsControl != null && tvi2 != null) {\r\n                        if (tvi2.IsEnabled) {\r\n                            var currentDelta: IOutValue = {Value: 0};\r\n                            if (tvi2.HandleScrollByPage(up, scrollHost, viewportHeight, top.Value, bottom.Value, currentDelta))\r\n                                return true;\r\n                            if (NumberEx.IsGreaterThanClose(currentDelta.Value, viewportHeight)) {\r\n                                if (tvi1 === this.SelectedContainer || tvi1 == null) {\r\n                                    if (!up)\r\n                                        return this.SelectedContainer.HandleDownKey();\r\n                                    return this.SelectedContainer.HandleUpKey();\r\n                                }\r\n                                break;\r\n                            } else\r\n                                tvi1 = tvi2;\r\n                        }\r\n                        index += up ? -1 : 1;\r\n                        if (0 <= index && index < count) {\r\n                            tvi2 = <TreeViewItem>itemsControl.ItemContainersManager.ContainerFromIndex(index);\r\n                            if (!(tvi2 instanceof TreeViewItem)) tvi2 = null;\r\n                        } else if (itemsControl === this) {\r\n                            tvi2 = null;\r\n                        } else {\r\n                            while (itemsControl != null) {\r\n                                var tvi3 = itemsControl instanceof TreeViewItem ? <TreeViewItem>itemsControl : null;\r\n                                itemsControl = tvi3.ParentItemsControl;\r\n                                if (itemsControl != null) {\r\n                                    count = itemsControl.Items.Count;\r\n                                    index = itemsControl.ItemContainersManager.IndexFromContainer(tvi3) + (up ? -1 : 1);\r\n                                    if (index > -1 && index < count) {\r\n                                        tvi2 = <TreeViewItem>itemsControl.ItemContainersManager.ContainerFromIndex(index);\r\n                                        if (!(tvi2 instanceof TreeViewItem)) tvi2 = null;\r\n                                        break;\r\n                                    }\r\n                                    else if (itemsControl == this) {\r\n                                        tvi2 = null;\r\n                                        itemsControl = null;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (tvi1 != null) {\r\n                    if (up) {\r\n                        if (tvi1 !== this.SelectedContainer)\r\n                            return tvi1.Focus();\r\n                    } else\r\n                        tvi1.FocusInto();\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        OnMouseEnter (e: Input.MouseEventArgs) {\r\n            super.OnMouseEnter(e);\r\n            this.UpdateVisualState();\r\n        }\r\n\r\n        OnMouseLeave (e: Input.MouseEventArgs) {\r\n            super.OnMouseLeave(e);\r\n            this.UpdateVisualState();\r\n        }\r\n\r\n        OnMouseMove (e: Input.MouseEventArgs) {\r\n            super.OnMouseMove(e);\r\n            this.UpdateVisualState();\r\n        }\r\n\r\n        OnMouseLeftButtonDown (e: Input.MouseButtonEventArgs) {\r\n            super.OnMouseLeftButtonDown(e);\r\n            if (!e.Handled && this.HandleMouseButtonDown())\r\n                e.Handled = true;\r\n            this.UpdateVisualState();\r\n        }\r\n\r\n        HandleMouseButtonDown (): boolean {\r\n            if (!this.SelectedContainer)\r\n                return false;\r\n            if (!this.SelectedContainer.IsFocused)\r\n                this.SelectedContainer.Focus();\r\n            return true;\r\n        }\r\n\r\n        OnMouseLeftButtonUp (e: Input.MouseButtonEventArgs) {\r\n            super.OnMouseLeftButtonUp(e);\r\n            this.UpdateVisualState();\r\n        }\r\n\r\n        OnGotFocus (e: RoutedEventArgs) {\r\n            super.OnGotFocus(e);\r\n            this.UpdateVisualState();\r\n        }\r\n\r\n        OnLostFocus (e: RoutedEventArgs) {\r\n            super.OnLostFocus(e);\r\n            this.UpdateVisualState();\r\n        }\r\n\r\n        ChangeSelection (itemOrContainer: any, container: TreeViewItem, selected: boolean) {\r\n            if (this.IsSelectionChangeActive)\r\n                return;\r\n            var oldValue = null;\r\n            var newValue = null;\r\n            var flag = false;\r\n            var selContainer = this.SelectedContainer;\r\n            this.IsSelectionChangeActive = true;\r\n            try {\r\n                if (selected && container !== selContainer) {\r\n                    oldValue = this.SelectedItem;\r\n                    if (selContainer != null) {\r\n                        selContainer.IsSelected = false;\r\n                        selContainer.UpdateContainsSelection(false);\r\n                    }\r\n                    newValue = itemOrContainer;\r\n                    this.SelectedContainer = container;\r\n                    this.SelectedContainer.UpdateContainsSelection(true);\r\n                    this.SelectedItem = itemOrContainer;\r\n                    this.UpdateSelectedValue(itemOrContainer);\r\n                    flag = true;\r\n                    this.ItemsControlHelper.ScrollIntoView(container.HeaderElement || container);\r\n                } else if (!selected && container === selContainer) {\r\n                    this.SelectedContainer.UpdateContainsSelection(false);\r\n                    this.SelectedContainer = null;\r\n                    this.SelectedItem = null;\r\n                    this.SelectedValue = null;\r\n                    oldValue = itemOrContainer;\r\n                    flag = true;\r\n                }\r\n                container.IsSelected = selected;\r\n            } finally {\r\n                this.IsSelectionChangeActive = false;\r\n            }\r\n            if (!flag)\r\n                return;\r\n            this.SelectedItemChanged.raise(this, new RoutedPropertyChangedEventArgs<any>(oldValue, newValue));\r\n        }\r\n\r\n        private UpdateSelectedValue (item: any) {\r\n            if (!item) {\r\n                this.ClearValue(TreeView.SelectedValueProperty);\r\n                return;\r\n            }\r\n\r\n            var selectedValuePath = this.SelectedValuePath;\r\n            if (!selectedValuePath) {\r\n                this.SelectedValue = item;\r\n            } else {\r\n                var binding = new Data.Binding(selectedValuePath);\r\n                binding.Source = item;\r\n                var contentControl = new ContentControl();\r\n                contentControl.SetBinding(ContentControl.ContentProperty, binding);\r\n                this.SelectedValue = contentControl.Content;\r\n                contentControl.ClearValue(ContentControl.ContentProperty);\r\n            }\r\n        }\r\n\r\n        private SelectFirstItem () {\r\n            var container = <TreeViewItem>this.ItemContainersManager.ContainerFromIndex(0);\r\n            var selected = container instanceof TreeViewItem;\r\n            if (!selected)\r\n                container = this.SelectedContainer;\r\n            this.ChangeSelection(selected ? this.ItemContainersManager.ItemFromContainer(container) : this.SelectedItem, container, selected);\r\n        }\r\n\r\n        private FocusFirstItem (): boolean {\r\n            var tvi = <TreeViewItem>this.ItemContainersManager.ContainerFromIndex(0);\r\n            if (!tvi)\r\n                return false;\r\n            if (!tvi.IsEnabled || !tvi.Focus())\r\n                return tvi.FocusDown();\r\n            return true;\r\n        }\r\n\r\n        private FocusLastItem (): boolean {\r\n            for (var index = this.Items.Count - 1; index >= 0; --index) {\r\n                var tvi = <TreeViewItem>this.ItemContainersManager.ContainerFromIndex(index);\r\n                if (tvi instanceof TreeViewItem && tvi.IsEnabled)\r\n                    return tvi.FocusInto();\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n    TemplateVisualStates(TreeView,\r\n        {GroupName: \"CommonStates\", Name: \"Normal\"},\r\n        {GroupName: \"CommonStates\", Name: \"MouseOver\"},\r\n        {GroupName: \"CommonStates\", Name: \"Disabled\"},\r\n        {GroupName: \"FocusStates\", Name: \"Unfocused\"},\r\n        {GroupName: \"FocusStates\", Name: \"Focused\"},\r\n        {GroupName: \"ValidationStates\", Name: \"Valid\"},\r\n        {GroupName: \"ValidationStates\", Name: \"InvalidUnfocused\"},\r\n        {GroupName: \"ValidationStates\", Name: \"InvalidFocused\"});\r\n\r\n    Object.defineProperty(TreeView.prototype, \"SelectedValue\", {\r\n        get: function () {\r\n            return this.GetValue(TreeView.SelectedValueProperty);\r\n        },\r\n        set: function (value: any) {\r\n            try {\r\n                this._AllowWrite = true;\r\n                this.SetValue(TreeView.SelectedValueProperty, value);\r\n            } finally {\r\n                this._AllowWrite = false;\r\n            }\r\n        }\r\n    });\r\n\r\n    Object.defineProperty(TreeView.prototype, \"SelectedItem\", {\r\n        get: function () {\r\n            return this.GetValue(TreeView.SelectedItemProperty);\r\n        },\r\n        set: function (value: any) {\r\n            try {\r\n                this._AllowWrite = true;\r\n                this.SetValue(TreeView.SelectedItemProperty, value);\r\n            } finally {\r\n                this._AllowWrite = false;\r\n            }\r\n        }\r\n    });\r\n}","module Fayde.Controls {\r\n    import ScrollExtensions = Internal.ScrollEx;\r\n\r\n    export class TreeViewItem extends HeaderedItemsControl {\r\n        static HasItemsProperty = DependencyProperty.RegisterReadOnly(\"HasItems\", () => Boolean, TreeViewItem, false, (d, args) => (<TreeViewItem>d).OnHasItemsChanged(args));\r\n        static IsExpandedProperty = DependencyProperty.Register(\"IsExpanded\", () => Boolean, TreeViewItem, false, (d, args) => (<TreeViewItem>d).OnIsExpandedPropertyChanged(args));\r\n        static IsSelectedProperty = DependencyProperty.Register(\"IsSelected\", () => Boolean, TreeViewItem, false, (d, args) => (<TreeViewItem>d).OnIsSelectedChanged(args));\r\n        static IsSelectionActiveProperty = DependencyProperty.RegisterReadOnly(\"IsSelectionActive\", () => Boolean, TreeViewItem, false, (d, args) => (<TreeViewItem>d).OnIsSelectionActiveChanged(args));\r\n\r\n        HasItems: boolean;\r\n        private $SetHasItems(value: boolean) {\r\n            try {\r\n                this._AllowWrite = true;\r\n                this.SetCurrentValue(TreeViewItem.HasItemsProperty, value);\r\n            } finally {\r\n                this._AllowWrite = false;\r\n            }\r\n        }\r\n        IsExpanded: boolean;\r\n        IsSelected: boolean;\r\n        IsSelectionActive: boolean;\r\n        private $SetIsSelectionActive(value: boolean) {\r\n            try {\r\n                this._AllowWrite = true;\r\n                this.SetCurrentValue(TreeViewItem.IsSelectionActiveProperty, value === true);\r\n            } finally {\r\n                this._AllowWrite = false;\r\n            }\r\n        }\r\n\r\n        private OnHasItemsChanged(e: DependencyPropertyChangedEventArgs) {\r\n            if (this.IgnorePropertyChange)\r\n                this.IgnorePropertyChange = false;\r\n            else if (!this._AllowWrite) {\r\n                this.IgnorePropertyChange = true;\r\n                this.SetCurrentValue(TreeViewItem.HasItemsProperty, e.OldValue);\r\n                throw new InvalidOperationException(\"Cannot set read-only property HasItems.\");\r\n            } else\r\n                this.UpdateVisualState();\r\n        }\r\n        private OnIsExpandedPropertyChanged(e: DependencyPropertyChangedEventArgs) {\r\n            var newValue = e.NewValue === true;\r\n            if (newValue)\r\n                this.OnExpanded(new RoutedEventArgs());\r\n            else\r\n                this.OnCollapsed(new RoutedEventArgs());\r\n            if (newValue) {\r\n                if (this.ExpansionStateGroup != null || !this.UserInitiatedExpansion)\r\n                    return;\r\n                this.UserInitiatedExpansion = false;\r\n                var parentTreeView = this.ParentTreeView;\r\n                if (!parentTreeView)\r\n                    return;\r\n                parentTreeView.ItemsControlHelper.ScrollIntoView(this);\r\n            } else {\r\n                if (!this.ContainsSelection)\r\n                    return;\r\n                this.Focus();\r\n            }\r\n        }\r\n        private OnIsSelectedChanged(e: DependencyPropertyChangedEventArgs) {\r\n            if (this.IgnorePropertyChange) {\r\n                this.IgnorePropertyChange = false;\r\n            } else if (e.NewValue === true) {\r\n                this.Select(true);\r\n                this.OnSelected(new RoutedEventArgs());\r\n            } else {\r\n                this.Select(false);\r\n                this.OnUnselected(new RoutedEventArgs());\r\n            }\r\n        }\r\n        private OnIsSelectionActiveChanged(e: DependencyPropertyChangedEventArgs) {\r\n            if (this.IgnorePropertyChange)\r\n                this.IgnorePropertyChange = false;\r\n            else if (!this._AllowWrite) {\r\n                this.IgnorePropertyChange = true;\r\n                this.SetValueInternal(TreeViewItem.IsSelectionActiveProperty, e.OldValue);\r\n                throw new InvalidOperationException(\"Cannot set read-only property IsSelectionActive.\");\r\n            } else\r\n                this.UpdateVisualState();\r\n        }\r\n\r\n        Collapsed = new RoutedEvent<RoutedEventArgs>();\r\n        Expanded = new RoutedEvent<RoutedEventArgs>();\r\n        Selected = new RoutedEvent<RoutedEventArgs>();\r\n        Unselected = new RoutedEvent<RoutedEventArgs>();\r\n\r\n        private _AllowWrite = false;\r\n        IgnorePropertyChange: boolean;\r\n        private ContainsSelection: boolean;\r\n        private CancelGotFocusBubble: boolean;\r\n        RequiresContainsSelectionUpdate: boolean;\r\n        private UserInitiatedExpansion: boolean;\r\n\r\n        private _expanderButton: Primitives.ToggleButton;\r\n        private get ExpanderButton(): Primitives.ToggleButton { return this._expanderButton; }\r\n        private set ExpanderButton(value: Primitives.ToggleButton) {\r\n            if (this._expanderButton) {\r\n                this._expanderButton.Click.off(this.OnExpanderClick, this);\r\n                this._expanderButton.GotFocus.off(this.OnExpanderGotFocus, this);\r\n            }\r\n            this._expanderButton = value;\r\n            if (this._expanderButton) {\r\n                this._expanderButton.IsChecked = this.IsExpanded;\r\n                this._expanderButton.Click.on(this.OnExpanderClick, this);\r\n                this._expanderButton.GotFocus.on(this.OnExpanderGotFocus, this);\r\n            }\r\n        }\r\n\r\n        private _headerElement: FrameworkElement;\r\n        get HeaderElement(): FrameworkElement { return this._headerElement; }\r\n        set HeaderElement(value: FrameworkElement) {\r\n            if (this._headerElement)\r\n                this._headerElement.MouseLeftButtonDown.off(this.OnHeaderMouseLeftButtonDown, this);\r\n            this._headerElement = value;\r\n            if (this._headerElement)\r\n                this._headerElement.MouseLeftButtonDown.on(this.OnHeaderMouseLeftButtonDown, this);\r\n        }\r\n\r\n        private _expansionStateGroup: Media.VSM.VisualStateGroup;\r\n        private get ExpansionStateGroup(): Media.VSM.VisualStateGroup { return this._expansionStateGroup; }\r\n        private set ExpansionStateGroup(value: Media.VSM.VisualStateGroup) {\r\n            if (this._expansionStateGroup)\r\n                this._expansionStateGroup.CurrentStateChanged.off(this.OnExpansionStateGroupStateChanged, this);\r\n            this._expansionStateGroup = value;\r\n            if (this._expansionStateGroup)\r\n                this._expansionStateGroup.CurrentStateChanged.on(this.OnExpansionStateGroupStateChanged, this);\r\n        }\r\n\r\n        private _parentItemsControl: ItemsControl;\r\n        get ParentItemsControl(): ItemsControl { return this._parentItemsControl; }\r\n        set ParentItemsControl(value: ItemsControl) {\r\n            if (this._parentItemsControl == value)\r\n                return;\r\n            this._parentItemsControl = value;\r\n            var parentTreeView = this.ParentTreeView;\r\n            if (parentTreeView == null)\r\n                return;\r\n            if (this.RequiresContainsSelectionUpdate) {\r\n                this.RequiresContainsSelectionUpdate = false;\r\n                this.UpdateContainsSelection(true);\r\n            }\r\n            parentTreeView.CheckForSelectedDescendents(this);\r\n        }\r\n\r\n        private get ParentTreeViewItem(): TreeViewItem {\r\n            var pic = <TreeViewItem>this.ParentItemsControl;\r\n            if (pic instanceof TreeViewItem)\r\n                return pic;\r\n        }\r\n\r\n        private get ParentTreeView(): TreeView {\r\n            for (var tvi = this; tvi != null; tvi = tvi.ParentTreeViewItem) {\r\n                var treeView = <TreeView>tvi.ParentItemsControl;\r\n                if (treeView instanceof TreeView)\r\n                    return treeView;\r\n            }\r\n            return null;\r\n        }\r\n\r\n        private get IsRoot(): boolean { return this.ParentItemsControl instanceof TreeView; }\r\n        private get CanExpandOnInput(): boolean { return this.HasItems && this.IsEnabled; }\r\n\r\n        private _MultiClick = new Internal.MultiClickHelper();\r\n        private _IsPressed = false;\r\n\r\n        constructor() {\r\n            super();\r\n            this.DefaultStyleKey = TreeViewItem;\r\n        }\r\n\r\n        OnApplyTemplate() {\r\n            super.OnApplyTemplate();\r\n            this.ExpanderButton = <Primitives.ToggleButton>this.GetTemplateChild(\"ExpanderButton\", Primitives.ToggleButton);\r\n            this.HeaderElement = <FrameworkElement>this.GetTemplateChild(\"Header\", FrameworkElement);\r\n            this.ExpansionStateGroup = Fayde.Media.VSM.VisualStateManager.GetGroup(this, \"ExpansionStates\");\r\n            this.UpdateVisualState(false);\r\n        }\r\n\r\n        private OnExpansionStateGroupStateChanged(sender: any, e: Media.VSM.VisualStateChangedEventArgs) {\r\n            if (e.NewState.Name && e.NewState.Name.toLowerCase() === \"expanded\")\r\n                this.BringIntoView();\r\n        }\r\n\r\n        private BringIntoView() {\r\n            if (!this.UserInitiatedExpansion)\r\n                return;\r\n            this.UserInitiatedExpansion = false;\r\n            var parent = this.ParentTreeView;\r\n            if (!parent)\r\n                return;\r\n            setTimeout(() => {\r\n                parent.ItemsControlHelper.ScrollIntoView(this);\r\n            }, 1);\r\n        }\r\n\r\n        GoToStates(gotoFunc: (state: string) => boolean) {\r\n            super.GoToStates(gotoFunc);\r\n            this.GoToStateExpansion(gotoFunc);\r\n            this.GoToStateHasItems(gotoFunc);\r\n            this.GoToStateSelection(gotoFunc);\r\n        }\r\n        GoToStateCommon(gotoFunc: (state: string) => boolean): boolean {\r\n            if (!this.IsEnabled)\r\n                return gotoFunc(\"Disabled\");\r\n            if (this._IsPressed)\r\n                return gotoFunc(\"Pressed\");\r\n            if (this.IsMouseOver)\r\n                return gotoFunc(\"MouseOver\");\r\n            return gotoFunc(\"Normal\");\r\n        }\r\n        GoToStateExpansion(gotoFunc: (state: string) => boolean): boolean {\r\n            return gotoFunc(this.IsExpanded ? \"Expanded\" : \"Collapsed\");\r\n        }\r\n        GoToStateHasItems(gotoFunc: (state: string) => boolean): boolean {\r\n            return gotoFunc(this.HasItems ? \"HasItems\" : \"NoItems\");\r\n        }\r\n        GoToStateSelection(gotoFunc: (state: string) => boolean): boolean {\r\n            if (!this.IsSelected)\r\n                return gotoFunc(\"Unselected\");\r\n            if (!this.IsSelectionActive)\r\n                return gotoFunc(\"SelectedInactive\");\r\n            return gotoFunc(\"Selected\");\r\n        }\r\n\r\n        GetContainerForItem(): UIElement {\r\n            return new TreeViewItem();\r\n        }\r\n        IsItemItsOwnContainer(item: any): boolean {\r\n            return item instanceof TreeViewItem;\r\n        }\r\n        PrepareContainerForItem(element: UIElement, item: any) {\r\n            var treeViewItem = <TreeViewItem>element;\r\n            if (treeViewItem instanceof TreeViewItem)\r\n                treeViewItem.ParentItemsControl = this;\r\n            super.PrepareContainerForItem(element, item);\r\n        }\r\n        ClearContainerForItem(element: UIElement, item: any) {\r\n            var treeViewItem = <TreeViewItem>element;\r\n            if (treeViewItem instanceof TreeViewItem)\r\n                treeViewItem.ParentItemsControl = null;\r\n            super.ClearContainerForItem(element, item);\r\n        }\r\n\r\n        OnItemsChanged(e: Collections.CollectionChangedEventArgs) {\r\n            super.OnItemsChanged(e);\r\n            this.$SetHasItems(this.Items.Count > 0);\r\n            if (e.NewItems != null) {\r\n                for (var i = 0, items = <TreeViewItem[]>e.NewItems, len = items.length; i < len; i++) {\r\n                    items[i].ParentItemsControl = this;\r\n                }\r\n            }\r\n            switch (e.Action) {\r\n                case Collections.CollectionChangedAction.Remove:\r\n                case Collections.CollectionChangedAction.Reset:\r\n                    if (this.ContainsSelection) {\r\n                        var parentTreeView = this.ParentTreeView;\r\n                        if (parentTreeView != null && !parentTreeView.IsSelectedContainerHookedUp) {\r\n                            this.ContainsSelection = false;\r\n                            this.Select(true);\r\n                        }\r\n                    }\r\n                    break;\r\n                case Collections.CollectionChangedAction.Replace:\r\n                    if (this.ContainsSelection) {\r\n                        var parentTreeView = this.ParentTreeView;\r\n                        if (parentTreeView != null) {\r\n                            var selectedItem = parentTreeView.SelectedItem;\r\n                            if (selectedItem != null && (e.OldItems == null || nullstone.equals(selectedItem, e.OldItems[0])))\r\n                                parentTreeView.ChangeSelection(selectedItem, parentTreeView.SelectedContainer, false);\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n            if (e.OldItems == null)\r\n                return;\r\n            for (var i = 0, items = <TreeViewItem[]>e.OldItems, len = items.length; i < len; i++) {\r\n                items[i].ParentItemsControl = null;\r\n            }\r\n        }\r\n\r\n        OnExpanded(e: RoutedEventArgs) {\r\n            this.ToggleExpanded();\r\n            this.Expanded.raise(this, e);\r\n        }\r\n        OnCollapsed(e: RoutedEventArgs) {\r\n            this.ToggleExpanded();\r\n            this.Collapsed.raise(this, e);\r\n        }\r\n        private ToggleExpanded() {\r\n            var expanderButton = this.ExpanderButton;\r\n            if (!expanderButton)\r\n                return;\r\n            expanderButton.IsChecked = this.IsExpanded;\r\n            this.UpdateVisualState();\r\n        }\r\n\r\n        OnSelected(e: RoutedEventArgs) {\r\n            this.UpdateVisualState();\r\n            this.Selected.raise(this, e);\r\n        }\r\n        OnUnselected(e: RoutedEventArgs) {\r\n            this.UpdateVisualState();\r\n            this.Unselected.raise(this, e);\r\n        }\r\n\r\n        OnGotFocus(e: RoutedEventArgs) {\r\n            super.OnGotFocus(e);\r\n            var parentTreeViewItem = this.ParentTreeViewItem;\r\n            if (parentTreeViewItem)\r\n                parentTreeViewItem.CancelGotFocusBubble = true;\r\n            try {\r\n                if (!this.IsEnabled || this.CancelGotFocusBubble)\r\n                    return;\r\n                this.Select(true);\r\n                this.$SetIsSelectionActive(true);\r\n                this.UpdateVisualState();\r\n            } finally {\r\n                this.CancelGotFocusBubble = false;\r\n            }\r\n        }\r\n        OnLostFocus(e: RoutedEventArgs) {\r\n            super.OnLostFocus(e);\r\n            this.$SetIsSelectionActive(false);\r\n            this.UpdateVisualState();\r\n        }\r\n        private OnExpanderGotFocus(sender: any, e: RoutedEventArgs) {\r\n            this.CancelGotFocusBubble = true;\r\n            this.$SetIsSelectionActive(true);\r\n            this.UpdateVisualState(true);\r\n        }\r\n        OnMouseEnter(e: Input.MouseEventArgs) {\r\n            super.OnMouseEnter(e);\r\n            this.UpdateVisualState();\r\n        }\r\n        OnMouseLeave(e: Input.MouseEventArgs) {\r\n            super.OnMouseLeave(e);\r\n            this.UpdateVisualState();\r\n        }\r\n        private OnHeaderMouseLeftButtonDown(sender: any, e: Input.MouseButtonEventArgs) {\r\n            this._MultiClick.OnMouseLeftButtonDown(this, e);\r\n            if (!e.Handled && this.IsEnabled) {\r\n                if (this.Focus())\r\n                    e.Handled = true;\r\n                if (this._MultiClick.ClickCount % 2 === 0) {\r\n                    var isExpanded = this.IsExpanded;\r\n                    this.UserInitiatedExpansion = this.UserInitiatedExpansion || !isExpanded;\r\n                    this.IsExpanded = !isExpanded;\r\n                    e.Handled = true;\r\n                }\r\n            }\r\n            this.OnMouseLeftButtonDown(e);\r\n            this.UpdateVisualState();\r\n        }\r\n        private OnExpanderClick(sender: any, e: RoutedEventArgs) {\r\n            var isExpanded = this.IsExpanded;\r\n            this.UserInitiatedExpansion = this.UserInitiatedExpansion || !isExpanded;\r\n            this.IsExpanded = !isExpanded;\r\n        }\r\n        OnMouseLeftButtonDown(e: Input.MouseButtonEventArgs) {\r\n            super.OnMouseLeftButtonDown(e);\r\n            var parentTreeView: TreeView;\r\n            if (!e.Handled && (parentTreeView = this.ParentTreeView) != null && parentTreeView.HandleMouseButtonDown())\r\n                e.Handled = true;\r\n            this._IsPressed = true;\r\n            this.UpdateVisualState();\r\n        }\r\n        OnMouseLeftButtonUp(e: Input.MouseButtonEventArgs) {\r\n            super.OnMouseLeftButtonUp(e);\r\n            this._IsPressed = false;\r\n            this.UpdateVisualState();\r\n        }\r\n\r\n        OnIsEnabledChanged(e: IDependencyPropertyChangedEventArgs) {\r\n            super.OnIsEnabledChanged(e);\r\n            if (!e.NewValue)\r\n                this._IsPressed = false;\r\n        }\r\n\r\n        OnKeyDown(e: Input.KeyEventArgs) {\r\n            super.OnKeyDown(e);\r\n            if (this.IsEnabled) {\r\n                if (e.Handled)\r\n                    return;\r\n                var isRTL = this.FlowDirection === FlowDirection.RightToLeft;\r\n                switch (e.Key) {\r\n                    case Input.Key.Left:\r\n                        if (!Input.Keyboard.HasControl() && (isRTL ? this.HandleRightKey() : this.HandleLeftKey()))\r\n                            e.Handled = true;\r\n                        break;\r\n                    case Input.Key.Up:\r\n                        if (!Input.Keyboard.HasControl() && this.HandleUpKey())\r\n                            e.Handled = true;\r\n                        break;\r\n                    case Input.Key.Right:\r\n                        if (!Input.Keyboard.HasControl() && (isRTL ? this.HandleLeftKey() : this.HandleRightKey()))\r\n                            e.Handled = true;\r\n                        break;\r\n                    case Input.Key.Down:\r\n                        if (!Input.Keyboard.HasControl() && this.HandleDownKey())\r\n                            e.Handled = true;\r\n                        break;\r\n                    case Input.Key.Add:\r\n                        if (this.CanExpandOnInput && !this.IsExpanded) {\r\n                            this.UserInitiatedExpansion = true;\r\n                            this.IsExpanded = true;\r\n                            e.Handled = true;\r\n                        }\r\n                        break;\r\n                    case Input.Key.Subtract:\r\n                        if (this.CanExpandOnInput && this.IsExpanded) {\r\n                            this.IsExpanded = false;\r\n                            e.Handled = true;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            if (!this.IsRoot)\r\n                return;\r\n            var parentTreeView = this.ParentTreeView;\r\n            if (!parentTreeView)\r\n                return;\r\n            parentTreeView.PropagateKeyDown(e);\r\n        }\r\n        HandleRightKey(): boolean {\r\n            if (!this.CanExpandOnInput)\r\n                return false;\r\n            if (!this.IsExpanded) {\r\n                this.UserInitiatedExpansion = true;\r\n                this.IsExpanded = true;\r\n                return true;\r\n            }\r\n            return this.HandleDownKey();\r\n        }\r\n        HandleLeftKey(): boolean {\r\n            if (!this.CanExpandOnInput || !this.IsExpanded)\r\n                return false;\r\n            if (this.IsFocused)\r\n                this.Focus();\r\n            else\r\n                this.IsExpanded = false;\r\n            return true;\r\n        }\r\n        HandleDownKey(): boolean {\r\n            return this.AllowKeyHandleEvent() && this.FocusDown();\r\n        }\r\n        HandleUpKey(): boolean {\r\n            if (!this.AllowKeyHandleEvent())\r\n                return false;\r\n            var previousFocusableItem = this.FindPreviousFocusableItem();\r\n            if (!previousFocusableItem)\r\n                return false;\r\n            if (previousFocusableItem != this.ParentItemsControl || previousFocusableItem != this.ParentTreeView)\r\n                return previousFocusableItem.Focus();\r\n            return true;\r\n        }\r\n\r\n        HandleScrollByPage(up: boolean, scrollHost: ScrollViewer, viewportHeight: number, top: number, bottom: number, currentDelta: IOutValue): boolean {\r\n            var closeEdge1: IOutValue = { Value: 0.0 };\r\n            currentDelta.Value = calculateDelta(up, this, scrollHost, top, bottom, closeEdge1);\r\n            if (NumberEx.IsGreaterThanClose(closeEdge1.Value, viewportHeight) || NumberEx.IsLessThanClose(currentDelta.Value, viewportHeight))\r\n                return false;\r\n            var flag1 = false;\r\n            var headerElement = this.HeaderElement;\r\n            if (headerElement != null && NumberEx.IsLessThanClose(calculateDelta(up, headerElement, scrollHost, top, bottom, { Value: 0 }), viewportHeight))\r\n                flag1 = true;\r\n            var tvi1: TreeViewItem = null;\r\n            var count = this.Items.Count;\r\n            var flag2 = up && this.ContainsSelection;\r\n            var index = up ? count - 1 : 0;\r\n            while (0 <= index && index < count) {\r\n                var tvi2 = <TreeViewItem>this.ItemContainersManager.ContainerFromIndex(index);\r\n                if (tvi2 instanceof TreeViewItem && tvi2.IsEnabled) {\r\n                    if (flag2) {\r\n                        if (tvi2.IsSelected) {\r\n                            flag2 = false;\r\n                            index += up ? -1 : 1;\r\n                            continue;\r\n                        } else if (tvi2.ContainsSelection) {\r\n                            flag2 = false;\r\n                        } else {\r\n                            index += up ? -1 : 1;\r\n                            continue;\r\n                        }\r\n                    }\r\n                    var currentDelta1: IOutValue = { Value: 0 };\r\n                    if (tvi2.HandleScrollByPage(up, scrollHost, viewportHeight, top, bottom, currentDelta1))\r\n                        return true;\r\n                    if (!NumberEx.IsGreaterThanClose(currentDelta1.Value, viewportHeight))\r\n                        tvi1 = tvi2;\r\n                    else\r\n                        break;\r\n                }\r\n                index += up ? -1 : 1;\r\n            }\r\n            if (tvi1 != null) {\r\n                if (up)\r\n                    return tvi1.Focus();\r\n                return tvi1.FocusInto();\r\n            } else if (flag1)\r\n                return this.Focus();\r\n            return false;\r\n        }\r\n\r\n\r\n        private Select(selected: boolean) {\r\n            var parentTreeView = this.ParentTreeView;\r\n            if (!parentTreeView || parentTreeView.IsSelectionChangeActive)\r\n                return;\r\n            var parentTreeViewItem = this.ParentTreeViewItem;\r\n            var itemOrContainer = parentTreeViewItem != null ? parentTreeViewItem.ItemContainersManager.ItemFromContainer(this) : parentTreeView.ItemContainersManager.ItemFromContainer(this);\r\n            parentTreeView.ChangeSelection(itemOrContainer, this, selected);\r\n        }\r\n\r\n        UpdateContainsSelection(selected: boolean) {\r\n            for (var parentTreeViewItem = this.ParentTreeViewItem; parentTreeViewItem != null; parentTreeViewItem = parentTreeViewItem.ParentTreeViewItem)\r\n                parentTreeViewItem.ContainsSelection = selected;\r\n        }\r\n\r\n        private AllowKeyHandleEvent(): boolean {\r\n            return this.IsSelected;\r\n        }\r\n\r\n        FocusDown(): boolean {\r\n            var nextFocusableItem = this.FindNextFocusableItem(true);\r\n            return nextFocusableItem && nextFocusableItem.Focus();\r\n        }\r\n        FocusInto(): boolean {\r\n            var lastFocusableItem = this.FindLastFocusableItem();\r\n            return lastFocusableItem && lastFocusableItem.Focus();\r\n        }\r\n\r\n        private FindNextFocusableItem(recurse: boolean): TreeViewItem {\r\n            if (recurse && this.IsExpanded && this.HasItems) {\r\n                var treeViewItem = <TreeViewItem>this.ItemContainersManager.ContainerFromIndex(0);\r\n                if (treeViewItem instanceof TreeViewItem) {\r\n                    if (!treeViewItem.IsEnabled)\r\n                        return treeViewItem.FindNextFocusableItem(false);\r\n                    return treeViewItem;\r\n                }\r\n            }\r\n            var parentItemsControl = this.ParentItemsControl;\r\n            if (parentItemsControl != null) {\r\n                var index = parentItemsControl.ItemContainersManager.IndexFromContainer(this);\r\n                var count = parentItemsControl.Items.Count;\r\n                while (index++ < count) {\r\n                    var treeViewItem = <TreeViewItem>parentItemsControl.ItemContainersManager.ContainerFromIndex(index);\r\n                    if (treeViewItem instanceof TreeViewItem && treeViewItem.IsEnabled)\r\n                        return treeViewItem;\r\n                }\r\n                var parentTreeViewItem = this.ParentTreeViewItem;\r\n                if (parentTreeViewItem instanceof TreeViewItem)\r\n                    return parentTreeViewItem.FindNextFocusableItem(false);\r\n            }\r\n            return null;\r\n        }\r\n        private FindLastFocusableItem(): TreeViewItem {\r\n            var tvi1 = this;\r\n            var tvi2: TreeViewItem = null;\r\n            for (var index = -1; tvi1 instanceof TreeViewItem; tvi1 = <TreeViewItem>tvi2.ItemContainersManager.ContainerFromIndex(index)) {\r\n                if (tvi1.IsEnabled) {\r\n                    if (!tvi1.IsExpanded || !tvi1.HasItems)\r\n                        return tvi1;\r\n                    tvi2 = tvi1;\r\n                    index = tvi1.Items.Count - 1;\r\n                }\r\n                else if (index > 0)\r\n                    --index;\r\n                else\r\n                    break;\r\n            }\r\n            return tvi2;\r\n        }\r\n        private FindPreviousFocusableItem(): ItemsControl {\r\n            var parentItemsControl = this.ParentItemsControl;\r\n            if (!parentItemsControl)\r\n                return null;\r\n            var index = parentItemsControl.ItemContainersManager.IndexFromContainer(this);\r\n            while (index-- > 0) {\r\n                var treeViewItem = <TreeViewItem>parentItemsControl.ItemContainersManager.ContainerFromIndex(index);\r\n                if (treeViewItem instanceof TreeViewItem && treeViewItem.IsEnabled) {\r\n                    var lastFocusableItem = treeViewItem.FindLastFocusableItem();\r\n                    if (lastFocusableItem != null)\r\n                        return lastFocusableItem;\r\n                }\r\n            }\r\n            return parentItemsControl;\r\n        }\r\n    }\r\n    TemplateVisualStates(TreeViewItem,\r\n        { GroupName: \"CommonStates\", Name: \"Normal\" },\r\n        { GroupName: \"CommonStates\", Name: \"MouseOver\" },\r\n        { GroupName: \"CommonStates\", Name: \"Pressed\" },\r\n        { GroupName: \"CommonStates\", Name: \"Disabled\" },\r\n        { GroupName: \"FocusStates\", Name: \"Unfocused\" },\r\n        { GroupName: \"FocusStates\", Name: \"Focused\" },\r\n        { GroupName: \"ExpansionStates\", Name: \"Collapsed\" },\r\n        { GroupName: \"ExpansionStates\", Name: \"Expanded\" },\r\n        { GroupName: \"HasItemsStates\", Name: \"HasItems\" },\r\n        { GroupName: \"HasItemsStates\", Name: \"NoItems\" },\r\n        { GroupName: \"SelectionStates\", Name: \"Unselected\" },\r\n        { GroupName: \"SelectionStates\", Name: \"Selected\" },\r\n        { GroupName: \"SelectionStates\", Name: \"SelectedInactive\" });\r\n    TemplateParts(TreeViewItem,\r\n        { Name: \"Header\", Type: FrameworkElement },\r\n        { Name: \"ExpanderButton\", Type: Primitives.ToggleButton });\r\n\r\n    function calculateDelta(up: boolean, element: FrameworkElement, scrollHost: ScrollViewer, top: number, bottom: number, closeEdge: IOutValue): number {\r\n        var top1: IOutValue = { Value: 0 };\r\n        var bottom1: IOutValue = { Value: 0 };\r\n        ScrollExtensions.GetTopAndBottom(element, scrollHost, top1, bottom1);\r\n        var ce = 0;\r\n        if (up) {\r\n            ce = bottom - bottom1.Value;\r\n            return bottom - top1.Value;\r\n        } else {\r\n            ce = top1.Value - top;\r\n            return bottom1.Value - top;\r\n        }\r\n        closeEdge.Value = ce;\r\n    }\r\n}","\r\nmodule Fayde.Controls {\r\n    export class UpDownParseErrorEventArgs extends RoutedEventArgs {\r\n        Text: string;\r\n        Error: Error;\r\n        Handled: boolean = false;\r\n        constructor(text: string, error: Error) {\r\n            super();\r\n            Object.defineProperty(this, \"Text\", { value: text, writable: false });\r\n            Object.defineProperty(this, \"Error\", { value: error, writable: false });\r\n        }\r\n    }\r\n}","\r\nmodule Fayde.Controls {\r\n    export class UpDownParsingEventArgs<T> extends RoutedEventArgs {\r\n        Text: string;\r\n        Value: T = null;\r\n        Handled: boolean = false;\r\n        constructor(text:string) {\r\n            super();\r\n            Object.defineProperty(this, \"Text\", { value: text, writable: false });\r\n        }\r\n    }\r\n}","module Fayde.Controls.contextmenu {\r\n    export class RootVisualTracker {\r\n        mousePosition = new Point();\r\n\r\n        private $$rootVisual: FrameworkElement = null;\r\n        private $$onSizeChanged: (newSize: minerva.Size) => any;\r\n\r\n        get rootVisual () {\r\n            return this.$$rootVisual;\r\n        }\r\n\r\n        set rootVisual (value: FrameworkElement) {\r\n            if (this.$$rootVisual) {\r\n                this.$$rootVisual.MouseMove.off(this._HandleRootVisualMouseMove, this);\r\n                this.$$rootVisual.SizeChanged.off(this._HandleSizeChanged, this);\r\n            }\r\n            this.$$rootVisual = value;\r\n            if (value) {\r\n                value.MouseMove.on(this._HandleRootVisualMouseMove, this);\r\n                value.SizeChanged.on(this._HandleSizeChanged, this);\r\n            }\r\n        }\r\n\r\n        constructor (owner: FrameworkElement) {\r\n            owner.LayoutUpdated.on(this._HandleLayoutUpdated, this);\r\n        }\r\n\r\n        tryInit (visual: UIElement) {\r\n            if (!visual)\r\n                return;\r\n            var surface = <Surface>visual.XamlNode.LayoutUpdater.tree.surface;\r\n            if (!surface)\r\n                return;\r\n            this.rootVisual = <FrameworkElement>surface.App.RootVisual;\r\n        }\r\n\r\n        setOnSizeChanged (onSizeChanged?: (newSize: minerva.Size) => any) {\r\n            this.$$onSizeChanged = onSizeChanged;\r\n        }\r\n\r\n        getAvailableSize (): minerva.Size {\r\n            return new minerva.Size(\r\n                this.rootVisual.ActualWidth,\r\n                this.rootVisual.ActualHeight\r\n            );\r\n        }\r\n\r\n        private _HandleLayoutUpdated (sender: FrameworkElement, e: any) {\r\n            if (!this.rootVisual) {\r\n                var surface = <Surface>sender.XamlNode.LayoutUpdater.tree.surface;\r\n                if (surface)\r\n                    this.rootVisual = <FrameworkElement>surface.App.RootVisual;\r\n            }\r\n            if (this.rootVisual)\r\n                sender.LayoutUpdated.off(this._HandleLayoutUpdated, this);\r\n        }\r\n\r\n        private _HandleRootVisualMouseMove (sender: any, e: Fayde.Input.MouseEventArgs) {\r\n            this.mousePosition = e.GetPosition(null);\r\n        }\r\n\r\n        private _HandleSizeChanged (sender: any, e: SizeChangedEventArgs) {\r\n            this.$$onSizeChanged && this.$$onSizeChanged(e.NewSize);\r\n        }\r\n    }\r\n}","\r\nmodule Fayde.Controls.Internal {\r\n    export class BindingSourceEvaluator<T> extends FrameworkElement {\r\n        static ValueProperty = DependencyProperty.Register(\"Value\", () => Object, BindingSourceEvaluator);\r\n        Value: T;\r\n\r\n        private _ValueBinding: Data.Binding = null;\r\n        get ValueBinding(): Data.Binding { return this._ValueBinding; }\r\n\r\n        constructor(binding:Data.Binding) {\r\n            super();\r\n            this._ValueBinding = binding;\r\n        }\r\n\r\n        GetDynamicValue(source: any): T {\r\n            var vb = this._ValueBinding;\r\n\r\n            var binding1 = new Data.Binding();\r\n            binding1.BindsDirectlyToSource = vb.BindsDirectlyToSource;\r\n            binding1.Converter = vb.Converter;\r\n            binding1.ConverterCulture = vb.ConverterCulture;\r\n            binding1.ConverterParameter = vb.ConverterParameter;\r\n            binding1.FallbackValue = vb.FallbackValue;\r\n            binding1.Mode = vb.Mode;\r\n            binding1.NotifyOnValidationError = vb.NotifyOnValidationError;\r\n            binding1.Path = vb.Path;\r\n            binding1.StringFormat = vb.StringFormat;\r\n            binding1.TargetNullValue = vb.TargetNullValue;\r\n            binding1.UpdateSourceTrigger = vb.UpdateSourceTrigger;\r\n            binding1.ValidatesOnDataErrors = vb.ValidatesOnDataErrors;\r\n            binding1.ValidatesOnExceptions = vb.ValidatesOnExceptions;\r\n            binding1.ValidatesOnNotifyDataErrors = vb.ValidatesOnNotifyDataErrors;\r\n            binding1.Source = source;\r\n            \r\n            this.SetBinding(BindingSourceEvaluator.ValueProperty, binding1);\r\n            var obj = <T>this.Value;\r\n            this.ClearValue(BindingSourceEvaluator.ValueProperty);\r\n            return obj;\r\n        }\r\n    }\r\n}","module Fayde.Controls.Internal {\r\n    export interface IDomainOwner extends UIElement {\r\n        Items: Internal.ObservableObjectCollection;\r\n        InvalidInputAction: InvalidInputAction;\r\n        FallbackItem: any;\r\n        Value: any;\r\n        CurrentIndex: number;\r\n        IsEditable: boolean;\r\n        OnValueChanged(oldValue: any, newValue: any);\r\n        OnCurrentIndexChanged(oldIndex: number, newIndex: number);\r\n        OnIsEditingChanged(isEditing: boolean);\r\n        OnIsInvalidInputChanged(isInvalidInput: boolean);\r\n        TryParseValue(text: string, ov: IOutValue): boolean;\r\n        FormatValue(): string;\r\n        ParseError: RoutedEvent<UpDownParseErrorEventArgs>;\r\n    }\r\n    export interface IDomainCoercer {\r\n        IsEditing: boolean;\r\n        IsInvalidInput: boolean;\r\n        OnValueChanged(oldValue: any, newValue: any);\r\n        OnCurrentIndexChanged(oldIndex: number, newIndex: number);\r\n        UpdateTextBoxText();\r\n        UpdateIsEditable();\r\n        ProcessUserInput();\r\n        Attach(textBox: TextBox);\r\n        Detach();\r\n        EscapeFocus();\r\n    }\r\n    export class DomainCoercer implements IDomainCoercer {\r\n        TextBox: TextBox = null;\r\n        Text = \"\";\r\n        IsCoercing = false;\r\n\r\n        private _IsEditing = false;\r\n        get IsEditing (): boolean {\r\n            return this._IsEditing;\r\n        }\r\n\r\n        set IsEditing (value: boolean) {\r\n            if (value === this._IsEditing)\r\n                return;\r\n            this._IsEditing = value;\r\n            this.OnIsEditingChanged(value);\r\n        }\r\n\r\n        private OnIsEditingChanged (isEditing: boolean) {\r\n            this.Owner.OnIsEditingChanged(isEditing);\r\n            if (!this.TextBox)\r\n                return;\r\n            if (!isEditing) {\r\n                this.TextBox.Text = this.Owner.FormatValue();\r\n                this.TextBox.IsHitTestVisible = false;\r\n            } else {\r\n                if (this.TextBox.IsFocused)\r\n                    this.TextBox.Select(0, this.TextBox.Text.length);\r\n                this.TextBox.IsHitTestVisible = true;\r\n            }\r\n        }\r\n\r\n        private _IsInvalidInput = false;\r\n        get IsInvalidInput (): boolean {\r\n            return this._IsInvalidInput;\r\n        }\r\n\r\n        set IsInvalidInput (value: boolean) {\r\n            if (value === this._IsInvalidInput)\r\n                return;\r\n            this._IsInvalidInput = value;\r\n            this.Owner.OnIsInvalidInputChanged(value);\r\n        }\r\n\r\n        constructor (public Owner: IDomainOwner, public OnCoerceValue: (val: any) => void, public OnCoerceCurrentIndex: (val: number) => void) {\r\n            this.Owner.KeyDown.on(this.OnKeyDown, this);\r\n        }\r\n\r\n        Attach (textBox: TextBox) {\r\n            this.TextBox = textBox;\r\n            if (textBox) {\r\n                textBox.GotFocus.on(this.TextBox_GotFocus, this);\r\n                textBox.LostFocus.on(this.TextBox_LostFocus, this);\r\n            }\r\n            this.UpdateTextBoxText();\r\n            this.UpdateIsEditable();\r\n        }\r\n\r\n        Detach () {\r\n            if (this.TextBox) {\r\n                this.TextBox.GotFocus.off(this.TextBox_GotFocus, this);\r\n                this.TextBox.LostFocus.off(this.TextBox_LostFocus, this);\r\n            }\r\n            this.TextBox = null;\r\n        }\r\n\r\n        private OnKeyDown (sender, e: Fayde.Input.KeyEventArgs) {\r\n            if (e != null && ((e.Key === Fayde.Input.Key.Enter || e.Key === Fayde.Input.Key.Space) && !this.IsEditing && this.Owner.IsEditable)) {\r\n                this.IsEditing = true;\r\n                e.Handled = true;\r\n            } else {\r\n                if (e == null || e.Handled)\r\n                    return;\r\n                if (e.Key === Fayde.Input.Key.Escape) {\r\n                    this.IsInvalidInput = false;\r\n                    this.IsEditing = false;\r\n                    e.Handled = true;\r\n                } else if (!this.IsEditing && this.Owner.IsEditable)\r\n                    this.IsEditing = true;\r\n            }\r\n        }\r\n\r\n        EscapeFocus () {\r\n            if (!this.IsInvalidInput)\r\n                this.IsEditing = false;\r\n            else if (this.Owner.InvalidInputAction === InvalidInputAction.TextBoxCannotLoseFocus && this.TextBox.IsFocused)\r\n                window.setTimeout(() => this.TextBox.Focus(), 1);\r\n        }\r\n\r\n        OnValueChanged (oldValue: any, newValue: any) {\r\n            if (!this.IsCoercing) {\r\n                var index = this.Owner.Items.IndexOf(newValue);\r\n                if (index > -1) {\r\n                    this.IsCoercing = true;\r\n                    this.OnCoerceCurrentIndex(index);\r\n                    this.IsCoercing = false;\r\n                }\r\n            }\r\n            this.UpdateTextBoxText();\r\n            this.Owner.OnValueChanged(oldValue, newValue);\r\n        }\r\n\r\n        OnCurrentIndexChanged (oldIndex: number, newIndex: number) {\r\n            if (!this.IsCoercing) {\r\n                if (newIndex >= 0 && newIndex < this.Owner.Items.Count) {\r\n                    this.IsCoercing = true;\r\n                    this.OnCoerceValue(this.Owner.Items.GetValueAt(newIndex));\r\n                    this.IsCoercing = false;\r\n                }\r\n            }\r\n            this.IsEditing = false;\r\n            this.Owner.OnCurrentIndexChanged(oldIndex, newIndex);\r\n        }\r\n\r\n        private TextBox_LostFocus (sender: any, e: RoutedEventArgs) {\r\n            this.ProcessUserInput();\r\n        }\r\n\r\n        private TextBox_GotFocus (sender: any, e: RoutedEventArgs) {\r\n            this.SelectAllText();\r\n        }\r\n\r\n        SelectAllText () {\r\n            if (this.TextBox)\r\n                this.TextBox.SelectAll();\r\n        }\r\n\r\n        UpdateTextBoxText () {\r\n            if (!this.TextBox)\r\n                return;\r\n            this.Text = this.Owner.FormatValue() || \"\";\r\n            this.TextBox.Text = this.Text;\r\n            this.TextBox.SelectionStart = this.Text.length;\r\n        }\r\n\r\n        UpdateIsEditable () {\r\n            if (this.TextBox)\r\n                this.TextBox.IsReadOnly = !this.Owner.IsEditable;\r\n        }\r\n\r\n        ProcessUserInput () {\r\n            if (!this.TextBox || this.Text === this.TextBox.Text)\r\n                return;\r\n            var selectionStart = this.TextBox.SelectionStart;\r\n            this.Text = this.TextBox.Text;\r\n            this.ApplyValue(this.Text);\r\n            if (selectionStart < this.TextBox.Text.length)\r\n                this.TextBox.SelectionStart = selectionStart;\r\n        }\r\n\r\n        OnParseError (e: UpDownParseErrorEventArgs) {\r\n            this.Owner.ParseError.raise(this, e);\r\n        }\r\n\r\n        private ApplyValue (text: string) {\r\n            if (!this.Owner.IsEditable)\r\n                return;\r\n            this.IsEditing = true;\r\n            try {\r\n                var val: IOutValue = {Value: null};\r\n                this.IsInvalidInput = !this.Owner.TryParseValue(text, val);\r\n                this.OnCoerceValue(val.Value);\r\n            } catch (err) {\r\n                var e = new UpDownParseErrorEventArgs(text, err);\r\n                this.OnParseError(e);\r\n                if (!e.Handled)\r\n                    this.UpdateTextBoxText();\r\n            } finally {\r\n                if (!this.IsInvalidInput)\r\n                    this.IsEditing = false;\r\n            }\r\n        }\r\n    }\r\n}","module Fayde.Controls.Internal {\r\n    export class EventGesture<T extends UIElement> {\r\n        Target: UIElement;\r\n        private _Callback: (t: T, e: any) => void;\r\n\r\n        Attach (event: nullstone.Event<nullstone.IEventArgs>, callback: (t: T, e: nullstone.IEventArgs) => void) {\r\n            this._Callback = callback;\r\n            event.on(this._OnEvent, this);\r\n            this.Detach = () => {\r\n                event.off(this._OnEvent, this);\r\n                this.Detach = () => {\r\n                };\r\n            };\r\n        }\r\n\r\n        Detach () {\r\n        }\r\n\r\n        private _OnEvent (sender: any, e: RoutedEventArgs) {\r\n            this._Callback && this._Callback(sender, e);\r\n        }\r\n    }\r\n} ","module Fayde.Controls.Internal {\r\n    export interface IFormattedRange extends IRange {\r\n        DecimalPlaces: number;\r\n        OnDecimalPlacesChanged(oldDecPlaces: number, newDecPlaces: number);\r\n    }\r\n    export interface IFormattedRangeCoercer extends IRangeCoercer {\r\n        OnDecimalPlacesChanged(oldDecPlaces: number, newDecPlaces: number);\r\n        AddToValue(inc: number);\r\n    }\r\n    export class FormattedRangeCoercer extends RangeCoercer implements IFormattedRangeCoercer {\r\n        constructor(range: IFormattedRange, onCoerceMaximum: (val: any) => void, onCoerceValue: (val: any) => void, public OnCoerceFormat: () => void) {\r\n            super(range, onCoerceMaximum, onCoerceValue);\r\n        }\r\n\r\n        OnDecimalPlacesChanged(oldDecPlaces: number, newDecPlaces: number) {\r\n            this.CoerceDepth++;\r\n            this.OnCoerceFormat();\r\n            this.CoerceDepth--;\r\n        }\r\n\r\n        AddToValue(inc: number) {\r\n            this.OnCoerceValue(this.Value + inc);\r\n            this.RequestedVal = this.Value;\r\n        }\r\n    }\r\n} ","module Fayde.Controls.Internal {\r\n    import GridUnitType = minerva.controls.grid.GridUnitType;\r\n\r\n    export enum GridResizeDirection {\r\n        Auto,\r\n        Columns,\r\n        Rows\r\n    }\r\n    export enum GridResizeBehavior {\r\n        BasedOnAlignment,\r\n        CurrentAndNext,\r\n        PreviousAndCurrent,\r\n        PreviousAndNext\r\n    }\r\n    export enum SplitBehavior {\r\n        Split,\r\n        ResizeDefinition1,\r\n        ResizeDefinition2\r\n    }\r\n\r\n    export class GridSplitterResizer {\r\n        Direction: GridResizeDirection;\r\n        Behavior: GridResizeBehavior;\r\n        SplitBehavior: SplitBehavior;\r\n        SplitterIndex: number;\r\n        SplitterLength: number;\r\n\r\n        DS1: IDefinitionSize;\r\n        DS2: IDefinitionSize;\r\n\r\n        constructor (gs: GridSplitter) {\r\n            this.UpdateResizeDirection(gs);\r\n            this.Behavior = resizeBehaviors[this.Direction !== GridResizeDirection.Columns ? <number>gs.VerticalAlignment : gs.HorizontalAlignment]\r\n            || GridResizeBehavior.PreviousAndNext;\r\n            this.SplitterLength = Math.min(gs.ActualWidth, gs.ActualHeight);\r\n        }\r\n\r\n        Setup (gs: GridSplitter, grid: Grid): boolean {\r\n            var isColumns = this.Direction === GridResizeDirection.Columns;\r\n            var span = isColumns ? Grid.GetColumnSpan(gs) : Grid.GetRowSpan(gs);\r\n            if (span > 1)\r\n                return false;\r\n            var index = isColumns ? Grid.GetColumn(gs) : Grid.GetRow(gs);\r\n            var indices = this.GetBehaviorIndices(index);\r\n            var defs = isColumns ? <XamlObjectCollection<any>>grid.ColumnDefinitions : grid.RowDefinitions;\r\n            if (indices[0] < 0 || indices[1] >= defs.Count)\r\n                return false;\r\n\r\n            this.SplitterIndex = index;\r\n            this.DS1 = createSize(defs.GetValueAt(indices[0]));\r\n            this.DS1.Index = indices[0];\r\n            this.DS2 = createSize(defs.GetValueAt(indices[1]));\r\n            this.DS2.Index = indices[1];\r\n            this.SplitBehavior = (this.DS1.IsStar && this.DS2.IsStar) ? SplitBehavior.Split : (!this.DS1.IsStar ? SplitBehavior.ResizeDefinition1 : SplitBehavior.ResizeDefinition2);\r\n\r\n            return true;\r\n        }\r\n\r\n        Move (grid: Grid, horiz: number, vert: number): boolean {\r\n            var ds1 = this.DS1;\r\n            var ds2 = this.DS2;\r\n            if (!ds1 || !ds2)\r\n                return true;\r\n            if (this.SplitBehavior === SplitBehavior.Split && !NumberEx.AreClose((ds1.ActualSize + ds2.ActualSize), (ds1.OrigActualSize + ds2.OrigActualSize)))\r\n                return false;\r\n            var deltaConstraints = this.GetConstraints();\r\n            var num1 = deltaConstraints[0];\r\n            var num2 = deltaConstraints[1];\r\n            var num = this.Direction === GridResizeDirection.Columns ? horiz : vert;\r\n            num = Math.min(Math.max(num, num1), num2);\r\n            this.SetLengths(grid, ds1.ActualSize + num, ds2.ActualSize - num);\r\n            return true;\r\n        }\r\n\r\n        UpdateResizeDirection (gs: GridSplitter): boolean {\r\n            var old = this.Direction;\r\n            if (gs.HorizontalAlignment !== HorizontalAlignment.Stretch)\r\n                this.Direction = GridResizeDirection.Columns;\r\n            else if (gs.VerticalAlignment === VerticalAlignment.Stretch && gs.ActualWidth <= gs.ActualHeight)\r\n                this.Direction = GridResizeDirection.Columns;\r\n            else\r\n                this.Direction = GridResizeDirection.Rows;\r\n            return old !== this.Direction;\r\n        }\r\n\r\n        private SetLengths (grid: Grid, definition1Pixels: number, definition2Pixels: number) {\r\n            var columnDefinitions;\r\n            if (this.SplitBehavior !== SplitBehavior.Split) {\r\n                if (this.SplitBehavior === SplitBehavior.ResizeDefinition1)\r\n                    this.DS1.Size = new GridLength(definition1Pixels, GridUnitType.Pixel);\r\n                else\r\n                    this.DS2.Size = new GridLength(definition2Pixels, GridUnitType.Pixel);\r\n                return;\r\n            }\r\n\r\n            var enumerator: nullstone.IEnumerator<DependencyObject> = this.Direction === GridResizeDirection.Columns\r\n                ? grid.ColumnDefinitions.getEnumerator() : grid.RowDefinitions.getEnumerator();\r\n            var i = 0;\r\n            while (enumerator.moveNext()) {\r\n                var ds = createSize(enumerator.current);\r\n                if (this.DS1.Index === i)\r\n                    ds.Size = new GridLength(definition1Pixels, GridUnitType.Star);\r\n                else if (this.DS2.Index === i)\r\n                    ds.Size = new GridLength(definition2Pixels, GridUnitType.Star);\r\n                else if (ds.IsStar)\r\n                    ds.Size = new GridLength(ds.ActualSize, GridUnitType.Star);\r\n                i++;\r\n            }\r\n        }\r\n\r\n        private GetConstraints (): number[] {\r\n            var actualLength = this.DS1.ActualSize;\r\n            var minSize = this.DS1.MinSize;\r\n            var maxSize = this.DS1.MaxSize;\r\n\r\n            var actualLength1 = this.DS2.ActualSize;\r\n            var minSize1 = this.DS2.MinSize;\r\n            var maxSize1 = this.DS2.MaxSize;\r\n\r\n            if (this.SplitterIndex === this.DS1.Index) {\r\n                minSize = Math.max(minSize, this.SplitterLength);\r\n            } else if (this.SplitterIndex === this.DS2.Index) {\r\n                minSize1 = Math.max(minSize1, this.SplitterLength);\r\n            }\r\n\r\n            if (this.SplitBehavior === SplitBehavior.Split) {\r\n                return [\r\n                    -Math.min(actualLength - minSize, maxSize1 - actualLength1),\r\n                    Math.min(maxSize - actualLength, actualLength1 - minSize1)\r\n                ];\r\n            }\r\n            if (this.SplitBehavior !== SplitBehavior.ResizeDefinition1) {\r\n                return [\r\n                    actualLength1 - maxSize1,\r\n                    actualLength1 - minSize1\r\n                ];\r\n            }\r\n            return [\r\n                minSize - actualLength,\r\n                maxSize - actualLength\r\n            ];\r\n        }\r\n\r\n        private GetBehaviorIndices (index: number): number[] {\r\n            switch (this.Behavior) {\r\n                case GridResizeBehavior.CurrentAndNext:\r\n                    return [index, index + 1];\r\n                case GridResizeBehavior.PreviousAndCurrent:\r\n                    return [index - 1, index];\r\n                default:\r\n                    return [index - 1, index + 1];\r\n            }\r\n        }\r\n    }\r\n\r\n    var resizeBehaviors: GridResizeBehavior[] = [];\r\n    resizeBehaviors[VerticalAlignment.Top] = GridResizeBehavior.PreviousAndCurrent;\r\n    resizeBehaviors[VerticalAlignment.Bottom] = GridResizeBehavior.CurrentAndNext;\r\n    resizeBehaviors[HorizontalAlignment.Left] = GridResizeBehavior.PreviousAndCurrent;\r\n    resizeBehaviors[HorizontalAlignment.Right] = GridResizeBehavior.CurrentAndNext;\r\n\r\n\r\n    import RowDefinition = Fayde.Controls.RowDefinition;\r\n    import ColumnDefinition = Fayde.Controls.ColumnDefinition;\r\n    export interface IDefinitionSize {\r\n        ActualSize: number;\r\n        MaxSize: number;\r\n        MinSize: number;\r\n        Size: GridLength;\r\n        IsStar: boolean;\r\n        Index: number;\r\n        OrigActualSize: number;\r\n    }\r\n    function createSize (definition: Fayde.DependencyObject): IDefinitionSize {\r\n        if (definition instanceof RowDefinition) {\r\n            var rd = <RowDefinition>definition;\r\n            var ds = {};\r\n            Object.defineProperty(ds, \"ActualSize\", {\r\n                get: function (): number {\r\n                    return rd.ActualHeight;\r\n                }\r\n            });\r\n            Object.defineProperty(ds, \"MaxSize\", {\r\n                get: function (): number {\r\n                    return rd.MaxHeight || 0;\r\n                }\r\n            });\r\n            Object.defineProperty(ds, \"MinSize\", {\r\n                get: function (): number {\r\n                    return rd.MinHeight || 0;\r\n                }\r\n            });\r\n            Object.defineProperty(ds, \"Size\", {\r\n                get: function (): GridLength {\r\n                    return rd.Height;\r\n                },\r\n                set: function (value: GridLength) {\r\n                    rd.Height = value;\r\n                }\r\n            });\r\n            Object.defineProperty(ds, \"IsStar\", {\r\n                get: function (): boolean {\r\n                    return !!rd.Height && rd.Height.Type === GridUnitType.Star;\r\n                }\r\n            });\r\n            (<any>ds).Index = 0;\r\n            (<any>ds).OrigActualSize = rd.ActualHeight;\r\n            return <IDefinitionSize>ds;\r\n        }\r\n        if (definition instanceof ColumnDefinition) {\r\n            var cd = <ColumnDefinition>definition;\r\n\r\n            var ds = {};\r\n            Object.defineProperty(ds, \"ActualSize\", {\r\n                get: function (): number {\r\n                    return cd.ActualWidth;\r\n                }\r\n            });\r\n            Object.defineProperty(ds, \"MaxSize\", {\r\n                get: function (): number {\r\n                    return cd.MaxWidth || 0;\r\n                }\r\n            });\r\n            Object.defineProperty(ds, \"MinSize\", {\r\n                get: function (): number {\r\n                    return cd.MinWidth || 0;\r\n                }\r\n            });\r\n            Object.defineProperty(ds, \"Size\", {\r\n                get: function (): GridLength {\r\n                    return cd.Width;\r\n                },\r\n                set: function (value: GridLength) {\r\n                    cd.Width = value;\r\n                }\r\n            });\r\n            Object.defineProperty(ds, \"IsStar\", {\r\n                get: function (): boolean {\r\n                    return !!cd.Width && cd.Width.Type === GridUnitType.Star;\r\n                }\r\n            });\r\n            (<any>ds).Index = 0;\r\n            (<any>ds).OrigActualSize = cd.ActualWidth;\r\n            return <IDefinitionSize>ds;\r\n        }\r\n    }\r\n} ","module Fayde.Controls.Internal {\r\n    export class ItemsControlHelper {\r\n        private _itemsHost: Panel;\r\n        private _scrollHost: ScrollViewer;\r\n\r\n        ItemsControl: ItemsControl;\r\n\r\n        get ItemsHost (): Panel {\r\n            if (!(this._itemsHost instanceof Panel) && this.ItemsControl != null && this.ItemsControl.ItemContainersManager != null) {\r\n                var container = this.ItemsControl.ItemContainersManager.ContainerFromIndex(0);\r\n                if (container != null)\r\n                    this._itemsHost = <Panel>VisualTreeHelper.GetParent(container);\r\n            }\r\n            return this._itemsHost;\r\n        }\r\n\r\n        get ScrollHost (): ScrollViewer {\r\n            if (!this._scrollHost) {\r\n                var itemsHost = this.ItemsHost;\r\n                if (itemsHost != null) {\r\n                    for (var cur = <DependencyObject>itemsHost; cur !== this.ItemsControl && cur != null; cur = VisualTreeHelper.GetParent(cur)) {\r\n                        var scrollViewer = cur;\r\n                        if (scrollViewer instanceof ScrollViewer) {\r\n                            this._scrollHost = <ScrollViewer>scrollViewer;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return this._scrollHost;\r\n        }\r\n\r\n        constructor (control: ItemsControl) {\r\n            this.ItemsControl = control;\r\n        }\r\n\r\n        OnApplyTemplate () {\r\n            this._itemsHost = null;\r\n            this._scrollHost = null;\r\n        }\r\n\r\n        static PrepareContainerForItemOverride (element: DependencyObject, parentItemContainerStyle: Style) {\r\n            if (!parentItemContainerStyle)\r\n                return;\r\n            var control = element instanceof Control ? <Control>element : null;\r\n            if (!control || control.Style != null)\r\n                return;\r\n            control.SetValue(FrameworkElement.StyleProperty, parentItemContainerStyle);\r\n        }\r\n\r\n        UpdateItemContainerStyle (itemContainerStyle: Style) {\r\n            if (!itemContainerStyle)\r\n                return;\r\n            var itemsHost = this.ItemsHost;\r\n            if (!itemsHost || !itemsHost.Children)\r\n                return;\r\n            var enumerator = itemsHost.Children.getEnumerator();\r\n            while (enumerator.moveNext()) {\r\n                var cur = <FrameworkElement>enumerator.current;\r\n                if (!cur.Style)\r\n                    cur.Style = itemContainerStyle;\r\n            }\r\n        }\r\n\r\n        ScrollIntoView (element: FrameworkElement) {\r\n            var scrollHost = this.ScrollHost;\r\n            if (!scrollHost)\r\n                return;\r\n            var generalTransform: Media.GeneralTransform;\r\n            try {\r\n                generalTransform = element.TransformToVisual(scrollHost);\r\n            } catch (err) {\r\n                return;\r\n            }\r\n            var tl = generalTransform.Transform(new Point());\r\n            var sz = generalTransform.Transform(new Point(element.ActualWidth, element.ActualHeight));\r\n            var r = new minerva.Rect(tl.x, tl.y, sz.x, sz.y);\r\n\r\n            var verticalOffset = scrollHost.VerticalOffset;\r\n            var num1 = 0.0;\r\n            var viewportHeight = scrollHost.ViewportHeight;\r\n            var bottom = r.y + r.height;\r\n            if (viewportHeight < bottom) {\r\n                num1 = bottom - viewportHeight;\r\n                verticalOffset += num1;\r\n            }\r\n            var top = r.y;\r\n            if (top - num1 < 0.0)\r\n                verticalOffset -= num1 - top;\r\n            scrollHost.ScrollToVerticalOffset(verticalOffset);\r\n            var horizontalOffset = scrollHost.HorizontalOffset;\r\n            var num2 = 0.0;\r\n            var viewportWidth = scrollHost.ViewportWidth;\r\n            var right = r.x + r.width;\r\n            if (viewportWidth < right) {\r\n                num2 = right - viewportWidth;\r\n                horizontalOffset += num2;\r\n            }\r\n            var left = r.x;\r\n            if (left - num2 < 0.0)\r\n                horizontalOffset -= num2 - left;\r\n            scrollHost.ScrollToHorizontalOffset(horizontalOffset);\r\n        }\r\n    }\r\n} ","module Fayde.Controls.Internal {\r\n    export class MultiClickHelper {\r\n        ClickCount = 0;\r\n        LastClickTime: number;\r\n        LastClickPosition: Point;\r\n        OnMouseLeftButtonDown(control: Control, e: Input.MouseButtonEventArgs) {\r\n            if (!control.IsEnabled) {\r\n                this.ClickCount = 1;\r\n                return;\r\n            }\r\n\r\n            var now = new Date().getTime();\r\n            var deltaMs = now - this.LastClickTime;\r\n            var pos = e.GetPosition(control);\r\n            var dist = getDistance(this.LastClickPosition, pos);\r\n\r\n            if (deltaMs < 500.0 && dist < 9.0)\r\n                this.ClickCount++;\r\n            else\r\n                this.ClickCount = 1;\r\n\r\n            this.LastClickTime = now;\r\n            this.LastClickPosition = pos;\r\n        }\r\n    }\r\n\r\n    function getDistance(oldPosition: Point, newPosition: Point): number {\r\n        var xdiff = newPosition.x;\r\n        var ydiff = newPosition.y;\r\n        if (oldPosition) {\r\n            xdiff -= oldPosition.x;\r\n            ydiff -= oldPosition.y;\r\n        }\r\n        return xdiff * xdiff + ydiff * ydiff;\r\n    }\r\n}","module Fayde.Controls.Internal {\r\n    export class ObservableObjectCollection extends Collections.ObservableCollection<any> {\r\n        IsReadOnly: boolean = false;\r\n\r\n        constructor (collection?: nullstone.IEnumerable<any>) {\r\n            super();\r\n            if (!collection)\r\n                return;\r\n            for (var en = collection.getEnumerator(); en.moveNext();) {\r\n                this.Add(en.current);\r\n            }\r\n        }\r\n\r\n        Add (value: any) {\r\n            if (this.IsReadOnly)\r\n                throw new InvalidOperationException(\"ObservableObjectCollection is read only.\");\r\n            super.Add(value);\r\n        }\r\n\r\n        AddRange (values: any[]) {\r\n            if (this.IsReadOnly)\r\n                throw new InvalidOperationException(\"ObservableObjectCollection is read only.\");\r\n            super.AddRange(values);\r\n        }\r\n\r\n        Insert (item: any, index: number) {\r\n            if (this.IsReadOnly)\r\n                throw new InvalidOperationException(\"ObservableObjectCollection is read only.\");\r\n            super.Insert(item, index);\r\n        }\r\n\r\n        RemoveAt (index: number) {\r\n            if (this.IsReadOnly)\r\n                throw new InvalidOperationException(\"ObservableObjectCollection is read only.\");\r\n            super.RemoveAt(index);\r\n        }\r\n\r\n        SetValueAt (index: number, item: any) {\r\n            if (this.IsReadOnly)\r\n                throw new InvalidOperationException(\"ObservableObjectCollection is read only.\");\r\n            super.SetValueAt(index, item);\r\n        }\r\n\r\n        Clear () {\r\n            if (this.IsReadOnly)\r\n                throw new InvalidOperationException(\"ObservableObjectCollection is read only.\");\r\n            super.Clear();\r\n        }\r\n    }\r\n}","module Fayde.Controls.Internal {\r\n    var LineChange = 16.0;\r\n    export class ScrollEx {\r\n        static HandleKey(sv: ScrollViewer, key: Input.Key, flowDirection: FlowDirection): boolean {\r\n            if (!sv)\r\n                return false;\r\n            var isRTL = flowDirection === FlowDirection.RightToLeft;\r\n            switch (key) {\r\n                case Input.Key.PageUp:\r\n                    if (!NumberEx.IsGreaterThanClose(sv.ExtentHeight, sv.ViewportHeight))\r\n                        ScrollEx.PageLeft(sv);\r\n                    else\r\n                        ScrollEx.PageUp(sv);\r\n                    return true;\r\n                case Input.Key.PageDown:\r\n                    if (!NumberEx.IsGreaterThanClose(sv.ExtentHeight, sv.ViewportHeight))\r\n                        ScrollEx.PageRight(sv);\r\n                    else\r\n                        ScrollEx.PageDown(sv);\r\n                    return true;\r\n                case Input.Key.End:\r\n                    ScrollEx.ScrollToBottom(sv);\r\n                    return true;\r\n                case Input.Key.Home:\r\n                    ScrollEx.ScrollToTop(sv);\r\n                    return true;\r\n                case Input.Key.Left:\r\n                    isRTL ? ScrollEx.LineRight(sv) : ScrollEx.LineLeft(sv);\r\n                    return true;\r\n                case Input.Key.Up:\r\n                    ScrollEx.LineUp(sv);\r\n                    return true;\r\n                case Input.Key.Right:\r\n                    isRTL ? ScrollEx.LineLeft(sv) : ScrollEx.LineRight(sv);\r\n                    return true;\r\n                case Input.Key.Down:\r\n                    ScrollEx.LineDown(sv);\r\n                    return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        static LineUp(viewer: ScrollViewer) {\r\n            scrollByVerticalOffset(viewer, -16.0);\r\n        }\r\n        static LineDown(viewer: ScrollViewer) {\r\n            scrollByVerticalOffset(viewer, 16.0);\r\n        }\r\n        static LineLeft(viewer: ScrollViewer) {\r\n            scrollByHorizontalOffset(viewer, -16.0);\r\n        }\r\n        static LineRight(viewer: ScrollViewer) {\r\n            scrollByHorizontalOffset(viewer, 16.0);\r\n        }\r\n\r\n        static PageUp(viewer: ScrollViewer) {\r\n            scrollByVerticalOffset(viewer, -viewer.ViewportHeight);\r\n        }\r\n        static PageDown(viewer: ScrollViewer) {\r\n            scrollByVerticalOffset(viewer, viewer.ViewportHeight);\r\n        }\r\n        static PageLeft(viewer: ScrollViewer) {\r\n            scrollByHorizontalOffset(viewer, -viewer.ViewportWidth);\r\n        }\r\n        static PageRight(viewer: ScrollViewer) {\r\n            scrollByHorizontalOffset(viewer, viewer.ViewportWidth);\r\n        }\r\n\r\n        static ScrollToTop(viewer: ScrollViewer) {\r\n            viewer.ScrollToVerticalOffset(0.0);\r\n        }\r\n        static ScrollToBottom(viewer: ScrollViewer) {\r\n            viewer.ScrollToVerticalOffset(viewer.ExtentHeight);\r\n        }\r\n\r\n        static GetTopAndBottom(element: FrameworkElement, parent: FrameworkElement, top: IOutValue, bottom: IOutValue) {\r\n            var xform = element.TransformToVisual(parent);\r\n            top.Value = xform.Transform(new Point(0.0, 0.0)).y;\r\n            bottom.Value = xform.Transform(new Point(0.0, element.ActualHeight)).y;\r\n        }\r\n    }\r\n\r\n    function scrollByVerticalOffset(viewer: ScrollViewer, offset: number) {\r\n        offset += viewer.VerticalOffset;\r\n        offset = Math.max(Math.min(offset, viewer.ExtentHeight), 0.0);\r\n        viewer.ScrollToVerticalOffset(offset);\r\n    }\r\n    function scrollByHorizontalOffset(viewer: ScrollViewer, offset: number) {\r\n        offset += viewer.HorizontalOffset;\r\n        offset = Math.max(Math.min(offset, viewer.ExtentWidth), 0.0);\r\n        viewer.ScrollToHorizontalOffset(offset);\r\n    }\r\n}","module Fayde.Controls.Internal {\r\n    export class SelectionHandler {\r\n        private _ActiveBox: TextBox = null;\r\n        get ActiveBox(): TextBox { return this._ActiveBox; }\r\n\r\n        private _IsMouseDown = false;\r\n\r\n        private _TextBoxes: TextBox[] = [];\r\n        constructor(textBoxes: TextBox[]) {\r\n            this._TextBoxes = textBoxes = textBoxes.filter(tb => !!tb);\r\n            textBoxes.forEach(tb => {\r\n                tb.MouseLeftButtonDown.on(this._MouseDown, this);\r\n                tb.MouseLeftButtonUp.on(this._MouseUp, this);\r\n                tb.GotFocus.on(this._GotFocus, this);\r\n                tb.LostFocus.on(this._LostFocus, this);\r\n            });\r\n        }\r\n        Dispose() {\r\n            this._TextBoxes.forEach(tb => {\r\n                tb.MouseLeftButtonDown.off(this._MouseDown, this);\r\n                tb.MouseLeftButtonUp.off(this._MouseUp, this);\r\n                tb.GotFocus.off(this._GotFocus, this);\r\n                tb.LostFocus.off(this._LostFocus, this);\r\n            });\r\n        }\r\n\r\n        private _GotFocus(sender: any, e: RoutedEventArgs) {\r\n            if (this._IsMouseDown)\r\n                return;\r\n            (<TextBox>sender).SelectAll();\r\n        }\r\n        private _MouseDown(sender: any, e: Input.MouseButtonEventArgs) {\r\n            this._IsMouseDown = true;\r\n        }\r\n        private _MouseUp(sender: any, e: RoutedEventArgs) {\r\n            this._IsMouseDown = false;\r\n            if (this._ActiveBox === sender)\r\n                return;\r\n            this._ActiveBox = sender;\r\n            if (this._ActiveBox.SelectionLength <= 0)\r\n                (<TextBox>sender).SelectAll();\r\n        }\r\n        private _LostFocus(sender: any, e: RoutedEventArgs) {\r\n            (<TextBox>sender).Select(0, 0);\r\n            if (this._ActiveBox === sender)\r\n                this._ActiveBox = null;\r\n        }\r\n    }\r\n} ","module Fayde.Controls.Internal {\r\n    export interface ISpinOwner extends UIElement {\r\n        OnSpin();\r\n        OnIncrement();\r\n        OnDecrement();\r\n    }\r\n    export interface ISpinFlow {\r\n        UpdateValid(increase: boolean, decrease: boolean);\r\n        Dispose();\r\n    }\r\n    export class SpinFlow implements ISpinFlow {\r\n        constructor(public Owner: ISpinOwner, public Spinner: Spinner) {\r\n            if (this.Owner) {\r\n                this.Owner.KeyDown.on(this.OnKeyDown, this);\r\n                this.Owner.MouseWheel.on(this.OnMouseWheel, this);\r\n            }\r\n            if (this.Spinner)\r\n                this.Spinner.Spin.on(this.Spinner_Spin, this);\r\n        }\r\n\r\n        UpdateValid(increase: boolean, decrease: boolean) {\r\n            var validSpinDirections = ValidSpinDirections.None;\r\n            if (increase)\r\n                validSpinDirections |= ValidSpinDirections.Increase;\r\n            if (decrease)\r\n                validSpinDirections |= ValidSpinDirections.Decrease;\r\n            if (this.Spinner)\r\n                this.Spinner.ValidSpinDirection = validSpinDirections;\r\n        }\r\n        Dispose() {\r\n            if (this.Owner) {\r\n                this.Owner.KeyDown.off(this.OnKeyDown, this);\r\n                this.Owner.MouseWheel.off(this.OnMouseWheel, this);\r\n            }\r\n            if (this.Spinner)\r\n                this.Spinner.Spin.on(this.Spinner_Spin, this);\r\n        }\r\n        \r\n        private OnKeyDown(sender, e: Fayde.Input.KeyEventArgs) {\r\n            if (e.Handled)\r\n                return;\r\n            switch (e.Key) {\r\n                case Fayde.Input.Key.Enter:\r\n                    this.Owner.OnSpin();\r\n                    e.Handled = true;\r\n                    break;\r\n                case Fayde.Input.Key.Up:\r\n                    this.DoIncrement();\r\n                    e.Handled = true;\r\n                    break;\r\n                case Fayde.Input.Key.Down:\r\n                    this.DoDecrement();\r\n                    e.Handled = true;\r\n                    break;\r\n            }\r\n        }\r\n        private OnMouseWheel(sender, e: Fayde.Input.MouseWheelEventArgs) {\r\n            if (e.Handled)\r\n                return;\r\n            if (e.Delta < 0)\r\n                this.DoDecrement();\r\n            else if (0 < e.Delta)\r\n                this.DoIncrement();\r\n            e.Handled = true;\r\n        }\r\n\r\n        private Spinner_Spin(sender: any, e: SpinEventArgs) {\r\n            this.Owner.OnSpin();\r\n            if (!this.Spinner)\r\n                return;\r\n            if (e.Direction === SpinDirection.Increase)\r\n                this.DoIncrement();\r\n            else\r\n                this.DoDecrement();\r\n        }\r\n        \r\n        private DoIncrement() {\r\n            if (this.Spinner && (this.Spinner.ValidSpinDirection & ValidSpinDirections.Increase) === ValidSpinDirections.Increase)\r\n                this.Owner.OnIncrement();\r\n        }\r\n        private DoDecrement() {\r\n            if (this.Spinner && (this.Spinner.ValidSpinDirection & ValidSpinDirections.Decrease) === ValidSpinDirections.Decrease)\r\n                this.Owner.OnDecrement();\r\n        }\r\n    }\r\n}","module Fayde.Controls.Internal {\r\n    export interface IFormattedControl<T> {\r\n        Value: T;\r\n        IsEditable: boolean;\r\n        ParseValue(text: string): T;\r\n        FormatValue(val: T): string;\r\n        Parsing: RoutedEvent<UpDownParsingEventArgs<T>>;\r\n        ParseError: RoutedEvent<UpDownParseErrorEventArgs>;\r\n    }\r\n    export interface ITextBoxFormatter {\r\n        ProcessUserInput();\r\n        Dispose();\r\n        UpdateTextBoxText();\r\n        UpdateIsEditable();\r\n    }\r\n    export class TextBoxFormatter<T> implements ITextBoxFormatter {\r\n        get Value(): T { return this.Control.Value; }\r\n        Text = \"\";\r\n\r\n        constructor(public Control: IFormattedControl<T>, public TextBox: TextBox, public OnCoerceValue: (val: any) => void) {\r\n            if (this.TextBox) {\r\n                this.TextBox.GotFocus.on(this.TextBox_GotFocus, this);\r\n                this.TextBox.LostFocus.on(this.TextBox_LostFocus, this);\r\n            }\r\n            this.UpdateTextBoxText();\r\n            this.UpdateIsEditable();\r\n        }\r\n        \r\n        ProcessUserInput() {\r\n            if (!this.TextBox || this.Text === this.TextBox.Text)\r\n                return;\r\n            var selectionStart = this.TextBox.SelectionStart;\r\n            this.Text = this.TextBox.Text;\r\n            this.ApplyValue(this.Text);\r\n            if (selectionStart < this.TextBox.Text.length)\r\n                this.TextBox.SelectionStart = selectionStart;\r\n        }\r\n        Dispose() {\r\n            if (this.TextBox) {\r\n                this.TextBox.GotFocus.off(this.TextBox_GotFocus, this);\r\n                this.TextBox.LostFocus.off(this.TextBox_LostFocus, this);\r\n            }\r\n        }\r\n        \r\n        private TextBox_LostFocus(sender: any, e: RoutedEventArgs) {\r\n            this.ProcessUserInput();\r\n        }\r\n        private TextBox_GotFocus(sender: any, e: RoutedEventArgs) {\r\n            this.SelectAllText();\r\n        }\r\n\r\n        ApplyValue(text: string) {\r\n            var e1 = new UpDownParsingEventArgs<T>(text);\r\n            var obj1: T;\r\n            var error: Error = null;\r\n            try {\r\n                obj1 = this.Control.ParseValue(text);\r\n                e1.Value = obj1;\r\n            } catch (err) {\r\n                error = err;\r\n            }\r\n            try {\r\n                this.OnParsing(e1);\r\n            } catch (err) {\r\n            }\r\n            if (error == null) {\r\n                var obj2 = e1.Handled ? e1.Value : obj1;\r\n                var value = this.Value;\r\n                if (this.Value === obj2)\r\n                    this.UpdateTextBoxText();\r\n                this.OnCoerceValue(obj2);\r\n            } else if (e1.Handled) {\r\n                if (this.Value === e1.Value)\r\n                    this.UpdateTextBoxText();\r\n                this.OnCoerceValue(e1.Value);\r\n            } else {\r\n                var e2 = new UpDownParseErrorEventArgs(text, error);\r\n                this.OnParseError(e2);\r\n                if (!e2.Handled)\r\n                    this.UpdateTextBoxText();\r\n            }\r\n        }\r\n        OnParseError(e: UpDownParseErrorEventArgs) {\r\n            this.Control.ParseError.raise(this, e);\r\n        }\r\n        OnParsing(e: UpDownParsingEventArgs<T>) {\r\n            this.Control.Parsing.raise(this, e);\r\n        }\r\n        SelectAllText() {\r\n            if (this.TextBox)\r\n                this.TextBox.SelectAll();\r\n        }\r\n        UpdateTextBoxText() {\r\n            if (!this.TextBox)\r\n                return;\r\n            this.Text = this.Control.FormatValue(this.Value) || \"\";\r\n            this.TextBox.Text = this.Text;\r\n            this.TextBox.SelectionStart = this.Text.length;\r\n        }\r\n        UpdateIsEditable() {\r\n            if (this.TextBox)\r\n                this.TextBox.IsReadOnly = !this.Control.IsEditable;\r\n        }\r\n    }\r\n} ","module Fayde.Controls {\r\n    export class TabPanel extends Panel {\r\n        CreateLayoutUpdater () {\r\n            return new tabpanel.TabPanelUpdater();\r\n        }\r\n\r\n        //TODO: Alter TabNavigation, DirectionalNavigation\r\n\r\n        private get TabAlignment (): Dock {\r\n            var tabControlParent: TabControl = VisualTreeHelper.GetParentOfType<TabControl>(this, TabControl);\r\n            if (tabControlParent != null)\r\n                return tabControlParent.TabStripPlacement;\r\n            return Dock.Top;\r\n        }\r\n\r\n        static setTabAlignment (tp: TabPanel, alignment: Dock) {\r\n            if (!tp)\r\n                return;\r\n            var upd = <tabpanel.TabPanelUpdater>tp.XamlNode.LayoutUpdater;\r\n            upd.assets.tabAlignment = alignment;\r\n        }\r\n    }\r\n}","module Fayde.Controls.tabpanel {\r\n    export interface ITabPanelUpdaterAssets extends minerva.controls.panel.IPanelUpdaterAssets, measure.IInput, arrange.IInput {\r\n    }\r\n    export class TabPanelUpdater extends minerva.controls.panel.PanelUpdater {\r\n        assets: ITabPanelUpdaterAssets;\r\n\r\n        init () {\r\n            this.setMeasurePipe(minerva.singleton(measure.TabPanelMeasurePipeDef))\r\n                .setArrangePipe(minerva.singleton(arrange.TabPanelArrangePipeDef));\r\n\r\n            var assets = this.assets;\r\n            assets.tabAlignment = Dock.Top;\r\n            assets.numRows = 1;\r\n            assets.numHeaders = 0;\r\n            assets.rowHeight = 0.0;\r\n\r\n            super.init();\r\n        }\r\n    }\r\n}","module Fayde.Controls.tabpanel {\r\n    import Size = minerva.Size;\r\n    import Visibility = minerva.Visibility;\r\n    import PanelUpdaterTree = minerva.controls.panel.PanelUpdaterTree;\r\n\r\n    export module helpers {\r\n        export function getDesiredSizeWithoutMargin (upd: minerva.core.Updater): Size {\r\n            var timargin = getTabItemMargin(upd);\r\n\r\n            var size = new Size();\r\n            Size.copyTo(upd.assets.desiredSize, size);\r\n            var margin = upd.assets.margin;\r\n            size.height = Math.max(0.0, size.height - margin.top - margin.bottom);\r\n            size.width = Math.max(0.0, size.width - margin.left - margin.right + timargin);\r\n            return size;\r\n        }\r\n\r\n        function getTabItemMargin (upd: minerva.core.Updater): number {\r\n            var node = upd.getAttachedValue(\"$node\");\r\n            var ti: TabItem = node ? node.XObject : null;\r\n            if (!(ti instanceof TabItem) || ti.IsSelected)\r\n                return 0;\r\n\r\n            var panel = <Panel>ti.GetTemplate(ti.IsSelected, ti.TabStripPlacement);\r\n            if (!(panel instanceof Panel) || panel.Children.Count <= 0)\r\n                return 0;\r\n\r\n            var fe = <FrameworkElement>panel.Children.GetValueAt(0);\r\n            if (!(fe instanceof FrameworkElement) || !fe.Margin)\r\n                return 0;\r\n\r\n            return Math.abs(fe.Margin.left + fe.Margin.right);\r\n        }\r\n\r\n        export function getHeadersSize (tree: PanelUpdaterTree): number[] {\r\n            var arr = [];\r\n            for (var walker = tree.walk(); walker.step();) {\r\n                var child = walker.current;\r\n                var width = child.assets.visibility === Visibility.Collapsed ? 0.0 : getDesiredSizeWithoutMargin(child).width\r\n                arr.push(width);\r\n            }\r\n            return arr;\r\n        }\r\n\r\n        export function setTabItemZ (upd: minerva.core.Updater) {\r\n            var node = upd.getAttachedValue(\"$node\");\r\n            var ti: TabItem = node ? node.XObject : null;\r\n            if (!(ti instanceof TabItem))\r\n                return;\r\n            var zi = ti.IsSelected ? 1 : 0;\r\n            ti.SetCurrentValue(Canvas.ZIndexProperty, zi);\r\n        }\r\n\r\n        function getTabItemIsSelected (upd: minerva.core.Updater): boolean {\r\n            var node = upd.getAttachedValue(\"$node\");\r\n            var ti: TabItem = node ? node.XObject : null;\r\n            if (!(ti instanceof TabItem))\r\n                return;\r\n            return ti.IsSelected === true;\r\n        }\r\n\r\n        export function getActiveRow (tree: PanelUpdaterTree, solution: number[], isDockTop: boolean): number {\r\n            var index = 0;\r\n            var num = 0;\r\n            if (solution.length > 0) {\r\n                for (var walker = tree.walk(); walker.step();) {\r\n                    var child = walker.current;\r\n                    if (getTabItemIsSelected(child))\r\n                        return index;\r\n                    if (index < solution.length && solution[index] === num)\r\n                        ++index;\r\n                    ++num;\r\n                }\r\n            }\r\n            if (isDockTop)\r\n                index = this._NumberOfRows - 1;\r\n            return index;\r\n        }\r\n\r\n        export function calculateHeaderDistribution (tree: PanelUpdaterTree, rowWidthLimit: number, headerWidth: number[]): number[] {\r\n            var num1 = 0.0;\r\n            var length1 = headerWidth.length;\r\n            var length2 = this._NumberOfRows - 1;\r\n            var num2 = 0.0;\r\n            var num3 = 0;\r\n            var numArray1 = new Array(length2);\r\n            var numArray2 = new Array(length2);\r\n\r\n            var numArray3 = new Array(this._NumberOfRows);\r\n            var numArray4 = numArray3.slice(0);\r\n            var numArray5 = numArray3.slice(0);\r\n            var numArray6 = numArray3.slice(0);\r\n\r\n            var index1 = 0;\r\n            for (var index2 = 0; index2 < length1; ++index2) {\r\n                if (num2 + headerWidth[index2] > rowWidthLimit && num3 > 0) {\r\n                    numArray4[index1] = num2;\r\n                    numArray3[index1] = num3;\r\n                    var num4 = Math.max(0.0, (rowWidthLimit - num2) / num3);\r\n                    numArray5[index1] = num4;\r\n                    numArray1[index1] = index2 - 1;\r\n                    if (num1 < num4)\r\n                        num1 = num4;\r\n                    ++index1;\r\n                    num2 = headerWidth[index2];\r\n                    num3 = 1;\r\n                }\r\n                else {\r\n                    num2 += headerWidth[index2];\r\n                    if (headerWidth[index2] != 0.0)\r\n                        ++num3;\r\n                }\r\n            }\r\n            if (index1 === 0)\r\n                return [];\r\n            numArray4[index1] = num2;\r\n            numArray3[index1] = num3;\r\n            var num5 = (rowWidthLimit - num2) / num3;\r\n            numArray5[index1] = num5;\r\n            if (num1 < num5)\r\n                num1 = num5;\r\n\r\n            numArray2 = numArray1.slice(0);\r\n            numArray6 = numArray5.slice(0);\r\n            while (true) {\r\n                var num4 = 0;\r\n                do {\r\n                    var num6 = 0;\r\n                    var num7 = 0.0;\r\n                    for (var index2 = 0; index2 < this._NumberOfRows; ++index2) {\r\n                        if (num7 < numArray5[index2]) {\r\n                            num7 = numArray5[index2];\r\n                            num6 = index2;\r\n                        }\r\n                    }\r\n                    if (num6 != 0) {\r\n                        var index2 = num6;\r\n                        var index3 = index2 - 1;\r\n                        var index4 = numArray1[index3];\r\n                        var num8 = headerWidth[index4];\r\n                        numArray4[index2] += num8;\r\n                        if (numArray4[index2] <= rowWidthLimit) {\r\n                            --numArray1[index3];\r\n                            ++numArray3[index2];\r\n                            numArray4[index3] -= num8;\r\n                            --numArray3[index3];\r\n                            numArray5[index3] = (rowWidthLimit - numArray4[index3]) / numArray3[index3];\r\n                            numArray5[index2] = (rowWidthLimit - numArray4[index2]) / numArray3[index2];\r\n                            num4 = 0.0;\r\n                            for (var index5 = 0; index5 < this._NumberOfRows; ++index5) {\r\n                                if (num4 < numArray5[index5])\r\n                                    num4 = numArray5[index5];\r\n                            }\r\n                        }\r\n                        else\r\n                            break;\r\n                    }\r\n                    else\r\n                        break;\r\n                }\r\n                while (num4 >= num1);\r\n                num1 = num4;\r\n                numArray2 = numArray1.slice(0);\r\n                numArray6 = numArray5.slice(0);\r\n            }\r\n\r\n            var index6 = 0;\r\n            var index7 = 0;\r\n            for (var walker = tree.walk(); walker.step();) {\r\n                var child = walker.current;\r\n                if (child.assets.visibility === Visibility.Visible)\r\n                    headerWidth[index7] += numArray6[index6];\r\n                if (index6 < length2 && numArray2[index6] == index7)\r\n                    ++index6;\r\n                ++index7;\r\n            }\r\n            return numArray2;\r\n        }\r\n    }\r\n}","module Fayde.Controls {\r\n    export class FocusingInvalidControlEventArgs implements nullstone.IEventArgs {\r\n        Handled: boolean = false;\r\n        Item: ValidationSummaryItem;\r\n        Target: ValidationSummaryItemSource;\r\n\r\n        constructor (item: ValidationSummaryItem, target: ValidationSummaryItemSource) {\r\n            Object.defineProperties(this, {\r\n                \"Item\": {\r\n                    value: item,\r\n                    writable: false\r\n                },\r\n                \"Target\": {\r\n                    value: target,\r\n                    writable: false\r\n                }\r\n            });\r\n        }\r\n    }\r\n}","module Fayde.Controls {\r\n    import ObservableCollection = Fayde.Collections.ObservableCollection;\r\n    import ReadOnlyObservableCollection = Fayde.Collections.ReadOnlyObservableCollection;\r\n\r\n    export class ValidationSummary extends Control {\r\n        static ShowErrorsInSummaryProperty = DependencyProperty.RegisterAttached(\"ShowErrorsInSummary\", () => Boolean, ValidationSummary, true, ValidationSummary.OnShowErrorsInSummaryChanged);\r\n        static ErrorStyleProperty = DependencyProperty.Register(\"ErrorStyle\", () => Style, ValidationSummary);\r\n        static FilterProperty = DependencyProperty.Register(\"Filter\", () => new Enum(ValidationSummaryFilters), ValidationSummary, ValidationSummaryFilters.All, (d: ValidationSummary, args) => d.OnFilterChanged(args.OldValue, args.NewValue));\r\n        static FocusControlsOnClickProperty = DependencyProperty.Register(\"FocusControlsOnClick\", () => Boolean, ValidationSummary, true);\r\n        static HasErrorsProperty = DependencyProperty.RegisterReadOnly(\"HasErrors\", () => Boolean, ValidationSummary, false);\r\n        static HasDisplayedErrorsProperty = DependencyProperty.RegisterReadOnly(\"HasDisplayedErrors\", () => Boolean, ValidationSummary, false);\r\n        static HeaderProperty = DependencyProperty.Register(\"Header\", () => Object, ValidationSummary, undefined, (d: ValidationSummary, args) => d.OnHeaderChanged(args.OldValue, args.NewValue));\r\n        static HeaderTemplateProperty = DependencyProperty.Register(\"HeaderTemplate\", () => DataTemplate, ValidationSummary);\r\n        static SummaryListBoxStyleProperty = DependencyProperty.Register(\"SummaryListBoxStyle\", () => Style, ValidationSummary);\r\n        static TargetProperty = DependencyProperty.Register(\"Target\", () => UIElement, ValidationSummary, undefined, (d: ValidationSummary, args) => d.OnTargetChanged(args.OldValue, args.NewValue));\r\n\r\n        static GetShowErrorsInSummary (dobj: DependencyObject): boolean {\r\n            return dobj.GetValue(ValidationSummary.ShowErrorsInSummaryProperty) === true;\r\n        }\r\n\r\n        static SetShowErrorsInSummary (dobj: DependencyObject, value: boolean) {\r\n            dobj.SetValue(ValidationSummary.ShowErrorsInSummaryProperty, value === true);\r\n        }\r\n\r\n        ShowErrorsInSummary: boolean;\r\n        ErrorStyle: Style;\r\n        Filter: ValidationSummaryFilters;\r\n        FocusControlsOnClick: boolean;\r\n        HasErrors: boolean;\r\n        HasDisplayedErrors: boolean;\r\n        Header: any;\r\n        HeaderTemplate: DataTemplate;\r\n        SummaryListBoxStyle: Style;\r\n        Target: UIElement;\r\n\r\n        private static OnShowErrorsInSummaryChanged (dobj: DependencyObject, args: IDependencyPropertyChangedEventArgs) {\r\n            var root = VisualTreeHelper.GetRoot(dobj);\r\n            if (root)\r\n                ValidationSummary.UpdateDisplayedErrorsOnAllValidationSummaries(root);\r\n        }\r\n\r\n        OnFilterChanged (oldValue: ValidationSummaryFilters, newValue: ValidationSummaryFilters) {\r\n            this.UpdateDisplayedErrors();\r\n        }\r\n\r\n        OnHeaderChanged (oldValue: any, newValue: any) {\r\n            this.UpdateHeaderText();\r\n        }\r\n\r\n        OnTargetChanged (oldValue: UIElement, newValue: UIElement) {\r\n            if (this._RegisteredParent != null) {\r\n                this._RegisteredParent.BindingValidationError.off(this.Target_BindingValidationError, this);\r\n                this._RegisteredParent = null;\r\n            }\r\n            if (oldValue instanceof FrameworkElement)\r\n                (<FrameworkElement>oldValue).BindingValidationError.off(this.Target_BindingValidationError, this);\r\n            if (newValue instanceof FrameworkElement)\r\n                (<FrameworkElement>newValue).BindingValidationError.on(this.Target_BindingValidationError, this);\r\n            this._Errors.ClearErrors(ValidationSummaryItemType.PropertyError);\r\n            this.UpdateDisplayedErrors();\r\n        }\r\n\r\n        private _ErrorsListBox: ListBox = null;\r\n        private _HeaderContentControl: ContentControl = null;\r\n        private _RegisteredParent: FrameworkElement;\r\n        private _ValidationSummaryItemDictionary = {};\r\n        private _CurSummItemsSource: ValidationSummaryItemSource;\r\n\r\n        private _Errors = new ValidationItemCollection();\r\n        get Errors (): ObservableCollection<ValidationSummaryItem> {\r\n            return this._Errors;\r\n        }\r\n\r\n        private _DisplayedErrors = new ValidationItemCollection();\r\n        get DisplayedErrors (): ReadOnlyObservableCollection<ValidationSummaryItem> {\r\n            return new ReadOnlyObservableCollection<ValidationSummaryItem>(this._DisplayedErrors);\r\n        }\r\n\r\n        FocusingInvalidControl = new nullstone.Event<FocusingInvalidControlEventArgs>();\r\n        SelectionChanged = new nullstone.Event<Primitives.SelectionChangedEventArgs>();\r\n\r\n        constructor () {\r\n            super();\r\n            this.DefaultStyleKey = ValidationSummary;\r\n\r\n            this._Errors.CollectionChanged.on(this.Errors_CollectionChanged, this);\r\n\r\n            this.Loaded.on(this.ValidationSummary_Loaded, this);\r\n            this.Unloaded.on(this.ValidationSummary_Unloaded, this);\r\n            this.IsEnabledChanged.on(this.ValidationSummary_IsEnabledChanged, this);\r\n        }\r\n\r\n        OnApplyTemplate () {\r\n            super.OnApplyTemplate();\r\n            if (this._ErrorsListBox != null) {\r\n                this._ErrorsListBox.MouseLeftButtonUp.off(this.ErrorsListBox_MouseLeftButtonUp, this);\r\n                this._ErrorsListBox.KeyDown.off(this.ErrorsListBox_KeyDown, this);\r\n                this._ErrorsListBox.SelectionChanged.off(this.ErrorsListBox_SelectionChanged, this);\r\n            }\r\n            this._ErrorsListBox = <ListBox>this.GetTemplateChild(\"SummaryListBox\", ListBox);\r\n            if (this._ErrorsListBox != null) {\r\n                this._ErrorsListBox.MouseLeftButtonUp.on(this.ErrorsListBox_MouseLeftButtonUp, this);\r\n                this._ErrorsListBox.KeyDown.on(this.ErrorsListBox_KeyDown, this);\r\n                this._ErrorsListBox.ItemsSource = this.DisplayedErrors;\r\n                this._ErrorsListBox.SelectionChanged.on(this.ErrorsListBox_SelectionChanged, this);\r\n            }\r\n            this._HeaderContentControl = <ContentControl>this.GetTemplateChild(\"HeaderContentControl\", ContentControl);\r\n            this.UpdateDisplayedErrors();\r\n            this.UpdateCommon(false);\r\n            this.UpdateValidation(false);\r\n        }\r\n\r\n        private Errors_CollectionChanged (sender: any, e: Fayde.Collections.CollectionChangedEventArgs) {\r\n            if (e.OldItems != null) {\r\n                for (var i = 0, items = e.OldItems; i < items.length; i++) {\r\n                    var item = items[i];\r\n                    if (item)\r\n                        item.PropertyChanged.off(this.ValidationSummaryItem_PropertyChanged, this);\r\n                }\r\n            }\r\n            if (e.NewItems != null) {\r\n                for (var i = 0, items = e.NewItems; i < items.length; i++) {\r\n                    var item = items[i];\r\n                    if (item)\r\n                        item.PropertyChanged.on(this.ValidationSummaryItem_PropertyChanged, this);\r\n                }\r\n            }\r\n            this.SetCurrentValue(ValidationSummary.HasErrorsProperty, this._Errors.Count > 0);\r\n            this.UpdateDisplayedErrors();\r\n        }\r\n\r\n        private ErrorsListBox_KeyDown (sender: any, e: Input.KeyEventArgs) {\r\n            if (e.Key !== Input.Key.Enter)\r\n                return;\r\n            this.ExecuteClick(sender);\r\n        }\r\n\r\n        private ErrorsListBox_MouseLeftButtonUp (sender, e: Input.MouseButtonEventArgs) {\r\n            this.ExecuteClick(sender);\r\n        }\r\n\r\n        private ErrorsListBox_SelectionChanged (sender: any, e: Primitives.SelectionChangedEventArgs) {\r\n            this.SelectionChanged.raise(this, e);\r\n        }\r\n\r\n        private ValidationSummary_Loaded (sender: any, e: RoutedEventArgs) {\r\n            if (!this.Target && !this._RegisteredParent) {\r\n                var rp = VisualTreeHelper.GetParent(this);\r\n                this._RegisteredParent = rp instanceof FrameworkElement ? <FrameworkElement>rp : null;\r\n                if (this._RegisteredParent != null)\r\n                    this._RegisteredParent.BindingValidationError.on(this.Target_BindingValidationError, this);\r\n            }\r\n            this.Loaded.off(this.ValidationSummary_Loaded, this);\r\n            //this._initialized = true;\r\n        }\r\n\r\n        private ValidationSummary_Unloaded (sender: any, e: RoutedEventArgs) {\r\n            if (this._RegisteredParent != null)\r\n                this._RegisteredParent.BindingValidationError.off(this.Target_BindingValidationError, this);\r\n            this.Unloaded.off(this.ValidationSummary_Unloaded, this);\r\n            //this._initialized = false;\r\n        }\r\n\r\n        private ValidationSummary_IsEnabledChanged (sender: any, e: DependencyPropertyChangedEventArgs) {\r\n            this.UpdateCommon(true);\r\n        }\r\n\r\n        private ValidationSummaryItem_PropertyChanged (sender: any, e: PropertyChangedEventArgs) {\r\n            if (!(e.PropertyName === \"ItemType\"))\r\n                return;\r\n            this.UpdateDisplayedErrors();\r\n        }\r\n\r\n        private UpdateValidation (useTransitions: boolean) {\r\n            var gotoFunc = (state: string) => Media.VSM.VisualStateManager.GoToState(this, state, useTransitions);\r\n            if (this._DisplayedErrors.Count > 0) {\r\n                this.SetCurrentValue(ValidationSummary.HasDisplayedErrorsProperty, true);\r\n                gotoFunc(\"HasErrors\");\r\n            } else {\r\n                this.SetCurrentValue(ValidationSummary.HasDisplayedErrorsProperty, false);\r\n                gotoFunc(\"Empty\");\r\n            }\r\n        }\r\n\r\n        private UpdateCommon (useTransitions: boolean) {\r\n            var gotoFunc = (state: string) => Media.VSM.VisualStateManager.GoToState(this, state, useTransitions);\r\n            if (this.IsEnabled)\r\n                gotoFunc(\"Normal\");\r\n            else\r\n                gotoFunc(\"Disabled\");\r\n        }\r\n\r\n        private UpdateHeaderText () {\r\n            var hcc = this._HeaderContentControl;\r\n            if (!hcc)\r\n                return;\r\n            hcc.Content = (this.Header != null) ? this.Header : this.GetHeaderString();\r\n        }\r\n\r\n        private UpdateDisplayedErrors () {\r\n            var showoe = (this.Filter & ValidationSummaryFilters.ObjectErrors) !== ValidationSummaryFilters.None;\r\n            var showpe = (this.Filter & ValidationSummaryFilters.PropertyErrors) !== ValidationSummaryFilters.None;\r\n\r\n            var arr: ValidationSummaryItem[] = [];\r\n            for (var en = this.Errors.getEnumerator(); en.moveNext();) {\r\n                var item = en.current;\r\n                if (!item)\r\n                    continue;\r\n                if (showoe && item.ItemType === ValidationSummaryItemType.ObjectError)\r\n                    arr.push(item);\r\n                else if (showpe && item.ItemType === ValidationSummaryItemType.PropertyError)\r\n                    arr.push(item);\r\n            }\r\n            arr.sort(compareSummaryItems);\r\n            this._DisplayedErrors.Clear();\r\n            this._DisplayedErrors.AddRange(arr);\r\n            this.UpdateValidation(true);\r\n            this.UpdateHeaderText();\r\n        }\r\n\r\n        private Target_BindingValidationError (sender: any, e: Validation.ValidationErrorEventArgs) {\r\n            var element = <FrameworkElement>e.OriginalSource;\r\n            if (!e || !e.Error || (e.Error.ErrorContent == null || !(element instanceof FrameworkElement)))\r\n                return;\r\n            var message = e.Error.ErrorContent.toString();\r\n            var key = (element.Name || ((<any>element)._ID).toString()) + message;\r\n            var dict = this._ValidationSummaryItemDictionary;\r\n            if (e.Action === Validation.ValidationErrorEventAction.Added) {\r\n                if (ValidationSummary.GetShowErrorsInSummary(element) === false)\r\n                    return;\r\n                var caption = e.Error.PropertyName;\r\n                var item = new ValidationSummaryItem(message, caption, ValidationSummaryItemType.PropertyError, new ValidationSummaryItemSource(caption, <Control>element), null);\r\n                this._Errors.Add(item);\r\n                dict[key] = item;\r\n            } else if (e.Action === Validation.ValidationErrorEventAction.Removed) {\r\n                if (dict[key]) {\r\n                    this._Errors.Remove(dict[key]);\r\n                    dict[key] = undefined;\r\n                }\r\n            }\r\n        }\r\n\r\n        private GetHeaderString (): string {\r\n            var count = this._DisplayedErrors.Count;\r\n            if (count === 1)\r\n                return \"1 Error\";\r\n            return count.toString() + \" Errors\";\r\n        }\r\n\r\n        private ExecuteClick (sender: any) {\r\n            var lb = <ListBox>sender;\r\n            if (!(lb instanceof ListBox))\r\n                return;\r\n            var item = <ValidationSummaryItem>lb.SelectedItem;\r\n            if (!(item instanceof ValidationSummaryItem) || !this.FocusControlsOnClick)\r\n                return;\r\n            if (item.Sources.Count === 0)\r\n                this._CurSummItemsSource = null;\r\n            else if (ValidationSummary.FindMatchingErrorSource(item.Sources, this._CurSummItemsSource) < 0)\r\n                this._CurSummItemsSource = item.Sources.GetValueAt(0);\r\n            var e = new FocusingInvalidControlEventArgs(item, this._CurSummItemsSource);\r\n            this.FocusingInvalidControl.raise(this, e);\r\n            if (!e.Handled && e.Target != null && e.Target.Control != null)\r\n                e.Target.Control.Focus();\r\n            if (item.Sources.Count <= 0)\r\n                return;\r\n            var matchingErrorSource = ValidationSummary.FindMatchingErrorSource(item.Sources, e.Target);\r\n            var index = matchingErrorSource < 0 ? 0 : (matchingErrorSource + 1) % item.Sources.Count;\r\n            this._CurSummItemsSource = item.Sources.GetValueAt(index);\r\n        }\r\n\r\n        private static FindMatchingErrorSource (sources: nullstone.ICollection<ValidationSummaryItemSource>, sourceToFind: ValidationSummaryItemSource): number {\r\n            if (!sources)\r\n                return -1;\r\n            for (var i = 0; i < sources.Count; i++) {\r\n                if (sources.GetValueAt(i).Equals(sourceToFind))\r\n                    return i;\r\n            }\r\n            return -1;\r\n        }\r\n\r\n        private static UpdateDisplayedErrorsOnAllValidationSummaries (parent: DependencyObject) {\r\n            if (!parent)\r\n                return;\r\n            if (parent instanceof  ValidationSummary) {\r\n                (<ValidationSummary>parent).UpdateDisplayedErrors();\r\n            } else {\r\n                for (var i = 0, count = VisualTreeHelper.GetChildrenCount(parent); i < count; i++) {\r\n                    ValidationSummary.UpdateDisplayedErrorsOnAllValidationSummaries(VisualTreeHelper.GetChild(parent, i));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    TemplateVisualStates(ValidationSummary,\r\n        {GroupName: \"CommonStates\", Name: \"Normal\"},\r\n        {GroupName: \"CommonStates\", Name: \"Disabled\"},\r\n        {GroupName: \"ValidationStates\", Name: \"HasErrors\"},\r\n        {GroupName: \"ValidationStates\", Name: \"Empty\"});\r\n    TemplateParts(ValidationSummary,\r\n        {Name: \"SummaryListBox\", Type: ListBox});\r\n\r\n    class ValidationItemCollection extends ObservableCollection<ValidationSummaryItem> {\r\n        ClearErrors (errorType: ValidationSummaryItemType) {\r\n            var toremove: ValidationSummaryItem[] = [];\r\n            for (var en = this.getEnumerator(); en.moveNext();) {\r\n                if (en.current != null && en.current.ItemType === errorType)\r\n                    toremove.push(en.current);\r\n            }\r\n            for (var i = 0; i < toremove.length; i++) {\r\n                this.Remove(toremove[i]);\r\n            }\r\n        }\r\n\r\n        ClearItems () {\r\n            while (this.Count > 0) {\r\n                this.RemoveAt(0);\r\n            }\r\n        }\r\n    }\r\n}","module Fayde.Controls {\r\n    import ObservableCollection = Collections.ObservableCollection;\r\n\r\n    export class ValidationSummaryItem extends MVVM.ObservableObject {\r\n        Message: string;\r\n        MessageHeader: string;\r\n        ItemType: ValidationSummaryItemType;\r\n        Context: any;\r\n\r\n        private _Sources: ObservableCollection<ValidationSummaryItemSource>;\r\n        get Sources (): ObservableCollection<ValidationSummaryItemSource> {\r\n            return this._Sources;\r\n        }\r\n\r\n        constructor (message?: string, messageHeader?: string, itemType?: ValidationSummaryItemType, source?: ValidationSummaryItemSource, context?: any) {\r\n            super();\r\n            this.Message = message || null;\r\n            this.MessageHeader = messageHeader || null;\r\n            this.ItemType = itemType || ValidationSummaryItemType.ObjectError;\r\n            this._Sources = new ObservableCollection<ValidationSummaryItemSource>();\r\n            if (source != null)\r\n                this._Sources.Add(source);\r\n            this.Context = context;\r\n        }\r\n    }\r\n    Fayde.MVVM.NotifyProperties(ValidationSummaryItem, [\"Message\", \"MessageHeader\", \"ItemType\", \"Context\"]);\r\n}","module Fayde.Controls {\r\n    export class ValidationSummaryItemSource {\r\n        PropertyName: string;\r\n        Control: Control;\r\n\r\n        constructor (propertyName: string, control?: Control) {\r\n            Object.defineProperties(this, {\r\n                \"PropertyName\": {\r\n                    value: propertyName,\r\n                    writable: false\r\n                },\r\n                \"Control\": {\r\n                    value: control || null,\r\n                    writable: false\r\n                }\r\n            });\r\n        }\r\n\r\n        Equals (other: any): boolean {\r\n            if (!(other instanceof ValidationSummaryItemSource))\r\n                return false;\r\n            var vsis = <ValidationSummaryItemSource>other;\r\n            return vsis.PropertyName === this.PropertyName && vsis.Control === this.Control;\r\n        }\r\n    }\r\n}","module Fayde.Controls {\r\n    export function compareSummaryItems (item1: ValidationSummaryItem, item2: ValidationSummaryItem): number {\r\n        var refs = compareRefs(item1, item2);\r\n        if (refs != null)\r\n            return refs;\r\n        var comp = compareNum(item1.ItemType, item2.ItemType);\r\n        if (comp !== 0)\r\n            return comp;\r\n\r\n        var control1: Control = item1.Sources.Count > 0 ? item1.Sources.GetValueAt(0).Control : null;\r\n        var control2: Control = item2.Sources.Count > 0 ? item2.Sources.GetValueAt(0).Control : null;\r\n        if (control1 !== control2) {\r\n            refs = compareRefs(control1, control2);\r\n            if (refs != null)\r\n                return refs;\r\n            comp = compareNum(control1.TabIndex, control2.TabIndex);\r\n            if (comp !== 0)\r\n                return comp;\r\n            return compareVisualOrder(control1, control2);\r\n        }\r\n    }\r\n\r\n    function compareRefs (item1: any, item2: any): number {\r\n        if (item1 == null)\r\n            return item2 == null ? null : -1;\r\n        if (item2 == null)\r\n            return 1;\r\n        return null;\r\n    }\r\n\r\n    function compareNum (x: number, y: number): number {\r\n        return x === y ? 0 : (x < y ? -1 : 1);\r\n    }\r\n\r\n    function compareVisualOrder (control1: Control, control2: Control): number {\r\n        if (!control1 || !control2 || control1 === control2)\r\n            return 0;\r\n        var trail: DependencyObject[] = [];\r\n        var cur = <DependencyObject>control1;\r\n        trail.push(cur);\r\n        while ((cur = VisualTreeHelper.GetParent(cur)) != null) {\r\n            trail.push(cur);\r\n        }\r\n\r\n        cur = control2;\r\n        var last = cur;\r\n        while ((cur = VisualTreeHelper.GetParent(cur)) != null) {\r\n            var index = trail.indexOf(cur);\r\n            if (index === 0)\r\n                return -1;\r\n            if (index < 0)\r\n                continue;\r\n            var prev = trail[index - 1];\r\n            if (!last || !prev)\r\n                return 0;\r\n            for (var i = 0, count = VisualTreeHelper.GetChildrenCount(cur); i < count; i++) {\r\n                var child = VisualTreeHelper.GetChild(cur, i);\r\n                if (child === prev)\r\n                    return 1;\r\n                if (child === last)\r\n                    return -1;\r\n            }\r\n            last = cur;\r\n        }\r\n        return 0;\r\n    }\r\n}","module Fayde.Controls {\r\n    export class Viewbox extends FrameworkElement {\r\n        CreateLayoutUpdater () {\r\n            return new viewbox.ViewboxUpdater();\r\n        }\r\n\r\n        static ChildProperty = DependencyProperty.Register(\"Child\", () => UIElement, Viewbox);\r\n        static StretchProperty = DependencyProperty.Register(\"Stretch\", () => new Enum(Media.Stretch), Viewbox, undefined, (d: Viewbox, args) => d.InvalidateMeasure());\r\n        static StretchDirectionProperty = DependencyProperty.Register(\"StretchDirection\", () => new Enum(StretchDirection), Viewbox, undefined, (d: Viewbox, args) => d.InvalidateMeasure());\r\n        Child: UIElement;\r\n        Stretch: Media.Stretch;\r\n        StretchDirection: StretchDirection;\r\n    }\r\n    Markup.Content(Viewbox, Viewbox.ChildProperty);\r\n\r\n    module reactions {\r\n        UIReaction<Media.Stretch>(Viewbox.StretchProperty, (updater, ov, nv) => updater.invalidateMeasure(), false);\r\n        UIReaction<StretchDirection>(Viewbox.StretchDirectionProperty, (updater, ov, nv) => updater.invalidateMeasure(), false);\r\n        UIReaction<UIElement>(Viewbox.ChildProperty, (upd, ov, nv, viewbox?: Viewbox) => {\r\n            var node = viewbox.XamlNode;\r\n            var error = new BError();\r\n            if (ov instanceof Fayde.UIElement)\r\n                node.DetachVisualChild(ov, error);\r\n            if (nv instanceof Fayde.UIElement)\r\n                node.AttachVisualChild(nv, error);\r\n            if (error.Message)\r\n                error.ThrowException();\r\n            upd.updateBounds();\r\n            upd.invalidateMeasure();\r\n        }, false, false);\r\n    }\r\n}","module Fayde.Controls.viewbox {\r\n    export interface IViewboxUpdaterAssets extends minerva.core.IUpdaterAssets, processdown.IInput {\r\n        stretch: Media.Stretch;\r\n        stretchDirection: StretchDirection;\r\n    }\r\n\r\n    export class ViewboxUpdater extends minerva.anon.AnonymousUpdater {\r\n        tree: minerva.core.UpdaterTree;\r\n        assets: IViewboxUpdaterAssets;\r\n\r\n        init () {\r\n            this.setProcessDownPipe(minerva.singleton(processdown.ViewboxProcessDownPipeDef));\r\n\r\n            var assets = this.assets;\r\n            assets.stretch = Media.Stretch.Uniform;\r\n            assets.stretchDirection = StretchDirection.Both;\r\n            assets.viewXform = mat3.identity();\r\n\r\n            super.init();\r\n        }\r\n\r\n        measureOverride (availableSize: Size): Size {\r\n            var child = this.tree.subtree;\r\n            if (!child)\r\n                return new Size();\r\n\r\n            child.measure(new Size(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY));\r\n\r\n            var childSize = child.assets.desiredSize;\r\n            var scalefac = helpers.computeScaleFactor(availableSize, childSize, this.assets.stretch, this.assets.stretchDirection);\r\n            return new Size(scalefac.width * childSize.width, scalefac.height * childSize.height);\r\n        }\r\n\r\n        arrangeOverride (finalSize: Size): Size {\r\n            var child = this.tree.subtree;\r\n            if (!child)\r\n                return new Size();\r\n\r\n            var assets = this.assets;\r\n            var childSize = child.assets.desiredSize;\r\n            var scale = helpers.computeScaleFactor(finalSize, childSize, assets.stretch, assets.stretchDirection);\r\n\r\n            child.arrange(new Rect(0, 0, childSize.width, childSize.height));\r\n\r\n            this.setViewXform(scale.width, scale.height);\r\n\r\n            return new Size(scale.width * childSize.width, scale.height * childSize.height);\r\n        }\r\n\r\n        private setViewXform (sx: number, sy: number) {\r\n            var assets = this.assets;\r\n            var xform = mat3.createScale(sx, sy);\r\n            if (!mat3.equal(assets.viewXform, xform)) {\r\n                mat3.copyTo(xform, assets.viewXform);\r\n                assets.dirtyFlags |= minerva.DirtyFlags.Transform;\r\n            }\r\n        }\r\n    }\r\n}","module Fayde.Controls.viewbox.helpers {\r\n    export function computeScaleFactor (availableSize: minerva.ISize, contentSize: minerva.ISize, stretch: Media.Stretch, stretchDirection: StretchDirection) {\r\n        var scaleX = 1.0;\r\n        var scaleY = 1.0;\r\n\r\n        var isConstrainedWidth = isFinite(availableSize.width);\r\n        var isConstrainedHeight = isFinite(availableSize.height);\r\n\r\n        if ((stretch === Media.Stretch.Uniform || stretch === Media.Stretch.UniformToFill || stretch === Media.Stretch.Fill)\r\n            && (isConstrainedWidth || isConstrainedHeight)) {\r\n            scaleX = isZero(contentSize.width) ? 0.0 : availableSize.width / contentSize.width;\r\n            scaleY = isZero(contentSize.height) ? 0.0 : availableSize.height / contentSize.height;\r\n\r\n            if (!isConstrainedWidth)        scaleX = scaleY;\r\n            else if (!isConstrainedHeight)  scaleY = scaleX;\r\n            else {\r\n                switch (stretch) {\r\n                    case Media.Stretch.Uniform:\r\n                        var minscale = scaleX < scaleY ? scaleX : scaleY;\r\n                        scaleX = scaleY = minscale;\r\n                        break;\r\n                    case Media.Stretch.UniformToFill:\r\n                        var maxscale = scaleX > scaleY ? scaleX : scaleY;\r\n                        scaleX = scaleY = maxscale;\r\n                        break;\r\n                    case Media.Stretch.Fill:\r\n                        break;\r\n                }\r\n            }\r\n\r\n            //Apply stretch direction by bounding scales.\r\n            //In the uniform case, scaleX=scaleY, so this sort of clamping will maintain aspect ratio\r\n            //In the uniform fill case, we have the same result too.\r\n            //In the fill case, note that we change aspect ratio, but that is okay\r\n            switch (stretchDirection) {\r\n                case StretchDirection.UpOnly:\r\n                    if (scaleX < 1.0) scaleX = 1.0;\r\n                    if (scaleY < 1.0) scaleY = 1.0;\r\n                    break;\r\n\r\n                case StretchDirection.DownOnly:\r\n                    if (scaleX > 1.0) scaleX = 1.0;\r\n                    if (scaleY > 1.0) scaleY = 1.0;\r\n                    break;\r\n\r\n                case StretchDirection.Both:\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return new Size(scaleX, scaleY);\r\n    }\r\n\r\n    var epsilon: number = 1.192093E-07;\r\n    function isZero (val: number): boolean {\r\n        return Math.abs(val) < epsilon;\r\n    }\r\n}","module Fayde.Controls {\r\n    export class WrapPanel extends Fayde.Controls.Panel {\r\n        CreateLayoutUpdater () {\r\n            return new wrappanel.WrapPanelUpdater();\r\n        }\r\n\r\n        static OrientationProperty = DependencyProperty.Register(\"Orientation\", () => new Enum(Orientation), WrapPanel, Orientation.Horizontal);\r\n        static ItemWidthProperty = DependencyProperty.Register(\"ItemWidth\", () => Number, WrapPanel, NaN);\r\n        static ItemHeightProperty = DependencyProperty.Register(\"ItemHeight\", () => Number, WrapPanel, NaN);\r\n        Orientation: Fayde.Orientation;\r\n        ItemWidth: number;\r\n        ItemHeight: number;\r\n    }\r\n\r\n    module reactions {\r\n        UIReaction<Orientation>(WrapPanel.OrientationProperty, (upd, ov, nv) => upd.invalidateMeasure(), false);\r\n        UIReaction<number>(WrapPanel.ItemWidthProperty, (upd, ov, nv) => upd.invalidateMeasure(), false);\r\n        UIReaction<number>(WrapPanel.ItemHeightProperty, (upd, ov, nv) => upd.invalidateMeasure(), false);\r\n    }\r\n}\r\n","module Fayde.Controls.wrappanel {\r\n    export interface IWrapPanelUpdaterAssets extends minerva.controls.panel.IPanelUpdaterAssets, measure.IInput, arrange.IInput {\r\n    }\r\n\r\n    export class WrapPanelUpdater extends minerva.controls.panel.PanelUpdater {\r\n        assets: IWrapPanelUpdaterAssets;\r\n\r\n        init () {\r\n            this.setMeasurePipe(minerva.singleton(measure.WrapPanelMeasurePipeDef))\r\n                .setArrangePipe(minerva.singleton(arrange.WrapPanelArrangePipeDef));\r\n\r\n            var assets = this.assets;\r\n            assets.orientation = Orientation.Horizontal;\r\n            assets.itemWidth = NaN;\r\n            assets.itemHeight = NaN;\r\n\r\n            super.init();\r\n        }\r\n    }\r\n}","module Fayde.Controls.wrappanel {\r\n    export module helpers {\r\n        export function coerceChildSize (child: minerva.core.Updater, itemWidth: number, itemHeight: number) {\r\n            var node = child.getAttachedValue(\"$node\");\r\n            var xobj = node ? node.XObject : null;\r\n            if (!xobj)\r\n                return;\r\n            if (isNaN(child.assets.width) && !isNaN(itemWidth))\r\n                xobj.Width = itemWidth;\r\n            if (isNaN(child.assets.height) && !isNaN(itemHeight))\r\n                xobj.Height = itemHeight;\r\n        }\r\n    }\r\n}","module Fayde.Controls.tabpanel.arrange {\r\n    import panel = minerva.controls.panel;\r\n    export interface IInput extends panel.arrange.IInput {\r\n        tabAlignment: Dock;\r\n        numRows: number;\r\n        numHeaders: number;\r\n        rowHeight: number;\r\n    }\r\n    export interface IState extends panel.arrange.IState {\r\n    }\r\n    export interface IOutput extends panel.arrange.IOutput {\r\n    }\r\n    export class TabPanelArrangePipeDef extends minerva.controls.panel.arrange.PanelArrangePipeDef {\r\n        constructor () {\r\n            super();\r\n            this.addTapinAfter('doOverride', 'doVertical', tapins.doVertical)\r\n                .addTapinAfter('doVertical', 'doHorizontal', tapins.doHorizontal)\r\n                .removeTapin('doOverride');\r\n        }\r\n    }\r\n}","module Fayde.Controls.tabpanel.measure {\r\n    import panel = minerva.controls.panel;\r\n    export interface IInput extends panel.measure.IInput {\r\n        tabAlignment: Dock;\r\n        numRows: number;\r\n        numHeaders: number;\r\n        rowHeight: number;\r\n    }\r\n    export interface IState extends panel.measure.IState {\r\n    }\r\n    export interface IOutput extends panel.measure.IOutput {\r\n        numRows: number;\r\n        numHeaders: number;\r\n        rowHeight: number;\r\n    }\r\n    export class TabPanelMeasurePipeDef extends panel.measure.PanelMeasurePipeDef {\r\n        constructor () {\r\n            super();\r\n            this.addTapinAfter('doOverride', 'doVertical', tapins.doVertical)\r\n                .addTapinAfter('doVertical', 'doHorizontal', tapins.doHorizontal)\r\n                .removeTapin('doOverride');\r\n        }\r\n\r\n        createOutput () {\r\n            var output = <IOutput>super.createOutput();\r\n            output.numRows = 1;\r\n            output.numHeaders = 0;\r\n            output.rowHeight = 0.0;\r\n            return output;\r\n        }\r\n\r\n        prepare (input: IInput, state: IState, output: IOutput) {\r\n            output.numRows = input.numRows;\r\n            output.numHeaders = input.numHeaders;\r\n            output.rowHeight = input.rowHeight;\r\n            super.prepare(input, state, output);\r\n        }\r\n\r\n        flush (input: IInput, state: IState, output: IOutput) {\r\n            super.flush(input, state, output);\r\n            input.numRows = output.numRows;\r\n            input.numHeaders = output.numHeaders;\r\n            input.rowHeight = output.rowHeight;\r\n        }\r\n    }\r\n}","module Fayde.Controls.viewbox.processdown {\r\n    export interface IInput extends minerva.core.processdown.IInput {\r\n        viewXform: number[];\r\n    }\r\n    export interface IState extends minerva.core.processdown.IState {\r\n    }\r\n    export interface IOutput extends minerva.core.processdown.IOutput {\r\n    }\r\n    export class ViewboxProcessDownPipeDef extends minerva.core.processdown.ProcessDownPipeDef {\r\n        constructor () {\r\n            super();\r\n            this.addTapinAfter('calcRenderXform', 'applyViewXform', tapins.applyViewXform);\r\n        }\r\n    }\r\n\r\n    module tapins {\r\n        export function applyViewXform (input: IInput, state: IState, output: IOutput, vpinput: IInput, tree: minerva.core.UpdaterTree): boolean {\r\n            if ((input.dirtyFlags & minerva.DirtyFlags.Transform) === 0)\r\n                return true;\r\n            mat3.preapply(output.renderXform, input.viewXform);\r\n            return true;\r\n        }\r\n    }\r\n}","module Fayde.Controls.wrappanel.arrange {\r\n    import panel = minerva.controls.panel;\r\n    export interface IInput extends panel.arrange.IInput {\r\n        orientation: Orientation;\r\n        itemWidth: number;\r\n        itemHeight: number;\r\n    }\r\n    export interface IState extends panel.arrange.IState {\r\n    }\r\n    export interface IOutput extends panel.arrange.IOutput {\r\n    }\r\n    export class WrapPanelArrangePipeDef extends panel.arrange.PanelArrangePipeDef {\r\n        constructor () {\r\n            super();\r\n            this.addTapinAfter('doOverride', 'doHorizontal', tapins.doHorizontal)\r\n                .addTapinAfter('doOverride', 'doVertical', tapins.doVertical)\r\n                .removeTapin('doOverride');\r\n        }\r\n    }\r\n}","module Fayde.Controls.wrappanel.measure {\r\n    import panel = minerva.controls.panel;\r\n    export interface IInput extends panel.measure.IInput {\r\n        orientation: Orientation;\r\n        itemWidth: number;\r\n        itemHeight: number;\r\n    }\r\n    export interface IState extends panel.measure.IState {\r\n    }\r\n    export interface IOutput extends panel.measure.IOutput {\r\n    }\r\n    export class WrapPanelMeasurePipeDef extends panel.measure.PanelMeasurePipeDef {\r\n        constructor () {\r\n            super();\r\n            this.addTapinAfter('doOverride', 'doHorizontal', tapins.doHorizontal)\r\n                .addTapinAfter('doOverride', 'doVertical', tapins.doVertical)\r\n                .removeTapin('doOverride');\r\n        }\r\n    }\r\n}","module Fayde.Controls.tabpanel.arrange.tapins {\r\n    import Size = minerva.Size;\r\n    import Rect = minerva.Rect;\r\n    import Point = minerva.Point;\r\n\r\n    export function doHorizontal (input: IInput, state: IState, output: IOutput, tree: minerva.controls.panel.PanelUpdaterTree, finalRect: minerva.Rect): boolean {\r\n        if (input.tabAlignment !== Dock.Top && input.tabAlignment !== Dock.Bottom)\r\n            return true;\r\n\r\n        var fs = state.finalSize;\r\n\r\n        var isMultiRow = input.numRows > 1;\r\n        var activeRow = 0;\r\n        var solution: number[] = [];\r\n        var childOffset = new Point();\r\n        var headersSize = helpers.getHeadersSize(tree);\r\n        if (isMultiRow) {\r\n            solution = helpers.calculateHeaderDistribution(tree, fs.width, headersSize);\r\n            activeRow = helpers.getActiveRow(tree, solution, input.tabAlignment === Dock.Top);\r\n            if (input.tabAlignment === Dock.Top)\r\n                childOffset.y = (input.numRows - 1.0 - activeRow) * input.rowHeight;\r\n            if (input.tabAlignment === Dock.Bottom && activeRow !== 0)\r\n                childOffset.y = (input.numRows - activeRow) * input.rowHeight;\r\n        }\r\n\r\n        var cr = state.childRect;\r\n        cr.x = cr.y = cr.width = cr.height = 0;\r\n        cr.height = input.rowHeight;\r\n\r\n        var childIndex = 0;\r\n        var separatorIndex = 0;\r\n        for (var walker = tree.walk(); walker.step();) {\r\n            var child = walker.current;\r\n            if (child.assets.visibility === minerva.Visibility.Collapsed)\r\n                continue;\r\n\r\n            cr.width = headersSize[childIndex];\r\n            cr.height = input.rowHeight;\r\n            var isLastHeaderInRow = isMultiRow && (separatorIndex < solution.length && solution[separatorIndex] === childIndex || childIndex === (input.numHeaders - 1));\r\n            if (isLastHeaderInRow)\r\n                cr.width = fs.width - childOffset.x;\r\n            child.arrange(cr);\r\n\r\n            cr.x += cr.width;\r\n            if (isLastHeaderInRow) {\r\n                if ((separatorIndex === activeRow && input.tabAlignment === Dock.Top) ||\r\n                    (separatorIndex === activeRow - 1 && input.tabAlignment === Dock.Bottom))\r\n                    childOffset.y = 0;\r\n                else\r\n                    childOffset.y += input.rowHeight;\r\n\r\n                childOffset.x = 0;\r\n                separatorIndex++;\r\n            }\r\n            childIndex++;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","module Fayde.Controls.tabpanel.arrange.tapins {\r\n    export function doVertical (input: IInput, state: IState, output: IOutput, tree: minerva.core.IUpdaterTree, finalRect: minerva.Rect): boolean {\r\n        if (input.tabAlignment !== Dock.Left && input.tabAlignment !== Dock.Right)\r\n            return true;\r\n\r\n        var cr = state.childRect;\r\n        cr.x = cr.y = 0;\r\n        cr.width = state.finalSize.width;\r\n        for (var walker = tree.walk(); walker.step();) {\r\n            var child = walker.current;\r\n            if (child.assets.visibility === minerva.Visibility.Collapsed)\r\n                continue;\r\n            helpers.setTabItemZ(child);\r\n            var sizeWithoutMargin = helpers.getDesiredSizeWithoutMargin(child);\r\n            cr.height = sizeWithoutMargin.height;\r\n            child.arrange(cr);\r\n            cr.y += sizeWithoutMargin.height;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","module Fayde.Controls.tabpanel.measure.tapins {\r\n    export function doHorizontal (input: IInput, state: IState, output: IOutput, tree: minerva.core.IUpdaterTree, availableSize: minerva.Size): boolean {\r\n        if (input.tabAlignment !== Dock.Top && input.tabAlignment !== Dock.Bottom)\r\n            return true;\r\n\r\n        var ds = output.desiredSize;\r\n        ds.width = ds.height = 0;\r\n        output.numRows = 1;\r\n        output.numHeaders = 0;\r\n        output.rowHeight = 0.0;\r\n\r\n        var count = 0;\r\n        var totalWidth = 0.0;\r\n        var num3 = 0.0;\r\n        for (var walker = tree.walk(); walker.step();) {\r\n            var child = walker.current;\r\n            if (child.assets.visibility === minerva.Visibility.Collapsed)\r\n                break;\r\n            output.numHeaders++;\r\n            child.measure(state.availableSize);\r\n\r\n            var sizeWithoutMargin = helpers.getDesiredSizeWithoutMargin(child);\r\n            if (output.rowHeight < sizeWithoutMargin.height)\r\n                output.rowHeight = sizeWithoutMargin.height;\r\n            if (totalWidth + sizeWithoutMargin.width > availableSize.width && count > 0) {\r\n                if (num3 < totalWidth)\r\n                    num3 = totalWidth;\r\n                totalWidth = sizeWithoutMargin.width;\r\n                count = 1;\r\n                output.numRows++;\r\n            }\r\n            else {\r\n                totalWidth += sizeWithoutMargin.width;\r\n                count++;\r\n            }\r\n        }\r\n\r\n        if (num3 < totalWidth)\r\n            num3 = totalWidth;\r\n        ds.height = output.rowHeight * output.numRows;\r\n        ds.width = !isFinite(ds.width) || isNaN(ds.width) || num3 < availableSize.width ? num3 : availableSize.width;\r\n\r\n        return true;\r\n    }\r\n}","module Fayde.Controls.tabpanel.measure.tapins {\r\n    export function doVertical (input: IInput, state: IState, output: IOutput, tree: minerva.core.IUpdaterTree, availableSize: minerva.Size): boolean {\r\n        if (input.tabAlignment !== Dock.Left && input.tabAlignment !== Dock.Right)\r\n            return true;\r\n\r\n        var ds = output.desiredSize;\r\n        ds.width = ds.height = 0;\r\n        output.numRows = 1;\r\n        output.numHeaders = 0;\r\n        output.rowHeight = 0.0;\r\n\r\n        for (var walker = tree.walk(); walker.step();) {\r\n            var child = walker.current;\r\n            if (child.assets.visibility === minerva.Visibility.Collapsed)\r\n                break;\r\n            output.numHeaders++;\r\n            child.measure(state.availableSize);\r\n\r\n            var sizeWithoutMargin = helpers.getDesiredSizeWithoutMargin(child);\r\n            if (ds.width < sizeWithoutMargin.width)\r\n                ds.width = sizeWithoutMargin.width;\r\n            ds.height += sizeWithoutMargin.height;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","module Fayde.Controls.wrappanel.arrange.tapins {\r\n    import Size = minerva.Size;\r\n    import Rect = minerva.Rect;\r\n\r\n    export function doHorizontal (input: IInput, state: IState, output: IOutput, tree: minerva.core.IUpdaterTree, finalRect: Rect): boolean {\r\n        if (input.orientation !== Orientation.Horizontal)\r\n            return true;\r\n\r\n        var fs = state.finalSize;\r\n        var as = state.arrangedSize;\r\n        Size.copyTo(fs, as);\r\n\r\n        var cr = state.childRect;\r\n        cr.x = cr.y = cr.width = cr.height = 0;\r\n\r\n        var rowHeight = 0;\r\n        for (var walker = tree.walk(); walker.step();) {\r\n            var child = walker.current;\r\n            var childDesired = child.assets.desiredSize;\r\n            if (fs.width < (cr.x + childDesired.width)) {  // needs to start another row\r\n                cr.x = 0;  // reset offsetX to 0\r\n                cr.y += rowHeight; //offsetY + lastrow height\r\n                rowHeight = 0;  //reset row spacing\r\n            }\r\n            rowHeight = Math.max(rowHeight, childDesired.height);\r\n            Size.copyTo(childDesired, cr);\r\n            child.arrange(cr);\r\n            cr.x += childDesired.width;\r\n        }\r\n        as.width = Math.max(as.width, fs.width);\r\n\r\n        return true;\r\n    }\r\n}","module Fayde.Controls.wrappanel.arrange.tapins {\r\n    import Size = minerva.Size;\r\n    import Rect = minerva.Rect;\r\n\r\n    export function doVertical (input: IInput, state: IState, output: IOutput, tree: minerva.core.IUpdaterTree, finalRect: Rect): boolean {\r\n        if (input.orientation !== Orientation.Vertical)\r\n            return true;\r\n\r\n        var fs = state.finalSize;\r\n        var as = state.arrangedSize;\r\n        Size.copyTo(fs, as);\r\n\r\n        var cr = state.childRect;\r\n        cr.x = cr.y = cr.width = cr.height = 0;\r\n\r\n        var colWidth = 0;\r\n        for (var walker = tree.walk(); walker.step();) {\r\n            var child = walker.current;\r\n            var childDesired = child.assets.desiredSize;\r\n            if (fs.height < (cr.y + childDesired.height)) {  // needs to start another col\r\n                cr.x += colWidth;   //and colWidth\r\n                cr.y = 0;           //reset OffsetY to top\r\n                colWidth = 0;          //reset colWidth\r\n            }\r\n            colWidth = Math.max(colWidth, childDesired.width);\r\n            Size.copyTo(childDesired, cr);\r\n            child.arrange(cr);\r\n            cr.y += childDesired.height;\r\n        }\r\n        as.height = Math.max(as.height, fs.height);\r\n\r\n        return true;\r\n    }\r\n}","module Fayde.Controls.wrappanel.measure.tapins {\r\n    import Size = minerva.Size;\r\n\r\n    export function doHorizontal (input: IInput, state: IState, output: IOutput, tree: minerva.core.IUpdaterTree, availableSize: Size): boolean {\r\n        if (input.orientation !== Orientation.Horizontal)\r\n            return true;\r\n\r\n        var as = state.availableSize;\r\n        if (!isNaN(input.height))\r\n            as.height = input.height;\r\n        as.height = Math.min(as.height, input.maxHeight);\r\n        as.height = Math.max(as.height, input.minHeight);\r\n\r\n        var ds = output.desiredSize;\r\n        ds.width = ds.height = 0;\r\n\r\n        var rowHeight = 0;\r\n        var offsetX = 0;\r\n        var offsetY = 0;\r\n        for (var walker = tree.walk(); walker.step();) {\r\n            var child = walker.current;\r\n            //TODO: We should coerce width/height before measure\r\n            helpers.coerceChildSize(child, input.itemWidth, input.itemHeight);\r\n            child.measure(as);\r\n\r\n            var childDesired = child.assets.desiredSize;\r\n            if (as.width < (offsetX + childDesired.width)) {  // needs to start another row\r\n                offsetX = 0;  // reset offsetX to 0\r\n                offsetY += rowHeight;\r\n                rowHeight = 0;  //reset row height\r\n            }\r\n            rowHeight = Math.max(rowHeight, childDesired.height);\r\n\r\n            ds.height = Math.max(ds.height, offsetY + childDesired.height);\r\n            ds.width = Math.max(ds.width, offsetX + childDesired.width);\r\n            offsetX += childDesired.width;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","module Fayde.Controls.wrappanel.measure.tapins {\r\n    import Size = minerva.Size;\r\n\r\n    export function doVertical (input: IInput, state: IState, output: IOutput, tree: minerva.core.IUpdaterTree, availableSize: Size): boolean {\r\n        if (input.orientation !== Orientation.Vertical)\r\n            return true;\r\n\r\n        var as = state.availableSize;\r\n        if (!isNaN(input.width))\r\n            as.width = input.width;\r\n        as.width = Math.min(as.width, input.maxWidth);\r\n        as.width = Math.max(as.width, input.minWidth);\r\n\r\n        var ds = output.desiredSize;\r\n        ds.width = ds.height = 0;\r\n\r\n        var colWidth = 0;\r\n        var offsetX = 0;\r\n        var offsetY = 0;\r\n        for (var walker = tree.walk(); walker.step();) {\r\n            var child = walker.current;\r\n            //TODO: We should coerce width/height before measure\r\n            helpers.coerceChildSize(child, input.itemWidth, input.itemHeight);\r\n            child.measure(as);\r\n\r\n            var childDesired = child.assets.desiredSize;\r\n            if (as.height < (offsetY + childDesired.height)) {  // needs to start another col\r\n                offsetX += colWidth;\r\n                offsetY = 0; //reset offsetY to 0\r\n                colWidth = 0; //reset col spacing\r\n            }\r\n            colWidth = Math.max(colWidth, childDesired.width);\r\n\r\n            ds.height = Math.max(ds.height, offsetY + childDesired.height);\r\n            ds.width = Math.max(ds.width, offsetX + childDesired.width);\r\n            offsetY += childDesired.height;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}"],"sourceRoot":"/source/"}